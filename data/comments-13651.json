[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1316075933",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13651#issuecomment-1316075933",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13651",
        "id": 1316075933,
        "node_id": "IC_kwDOCVq1mM5Ocbmd",
        "user": {
            "login": "yuslepukhin",
            "id": 11303988,
            "node_id": "MDQ6VXNlcjExMzAzOTg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11303988?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yuslepukhin",
            "html_url": "https://github.com/yuslepukhin",
            "followers_url": "https://api.github.com/users/yuslepukhin/followers",
            "following_url": "https://api.github.com/users/yuslepukhin/following{/other_user}",
            "gists_url": "https://api.github.com/users/yuslepukhin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yuslepukhin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yuslepukhin/subscriptions",
            "organizations_url": "https://api.github.com/users/yuslepukhin/orgs",
            "repos_url": "https://api.github.com/users/yuslepukhin/repos",
            "events_url": "https://api.github.com/users/yuslepukhin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yuslepukhin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-16T00:24:33Z",
        "updated_at": "2022-11-16T00:24:33Z",
        "author_association": "MEMBER",
        "body": "> what should i do ?\r\nI would suggest following the process and share with us the model, if possible and a minimum test program, that is used to measure performance.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1316075933/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1316809168",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13651#issuecomment-1316809168",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13651",
        "id": 1316809168,
        "node_id": "IC_kwDOCVq1mM5OfOnQ",
        "user": {
            "login": "allen20200111",
            "id": 37377179,
            "node_id": "MDQ6VXNlcjM3Mzc3MTc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/37377179?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/allen20200111",
            "html_url": "https://github.com/allen20200111",
            "followers_url": "https://api.github.com/users/allen20200111/followers",
            "following_url": "https://api.github.com/users/allen20200111/following{/other_user}",
            "gists_url": "https://api.github.com/users/allen20200111/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/allen20200111/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/allen20200111/subscriptions",
            "organizations_url": "https://api.github.com/users/allen20200111/orgs",
            "repos_url": "https://api.github.com/users/allen20200111/repos",
            "events_url": "https://api.github.com/users/allen20200111/events{/privacy}",
            "received_events_url": "https://api.github.com/users/allen20200111/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-16T10:58:43Z",
        "updated_at": "2022-11-16T10:59:26Z",
        "author_association": "NONE",
        "body": "```\r\n\r\n#include <assert.h>\r\n#include <onnxruntime/core/session/onnxruntime_cxx_api.h>\r\n\r\n#include <iostream>\r\n#include <vector>\r\n\r\n#include<sys/timeb.h>\r\n#include <sched.h> \r\n\r\nlong long systemtime()\r\n{\r\n    timeb t;\r\n    ftime(&t);\r\n    return t.time*1000+t.millitm;\r\n}\r\n\r\ninline void assignToThisCore(int core_id)\r\n{\r\n    cpu_set_t  mask;\r\n    CPU_ZERO(&mask);\r\n    CPU_SET(core_id, &mask);\r\n    sched_setaffinity(0, sizeof(mask), &mask);\r\n}\r\n\r\nvoid run_ort_trt() {\r\n  Ort::Env env(ORT_LOGGING_LEVEL_WARNING, \"test\");\r\n  const auto& api = Ort::GetApi();\r\n  OrtTensorRTProviderOptionsV2* tensorrt_options;\r\n\r\n  Ort::SessionOptions session_options;\r\n  // session_options.SetIntraOpNumThreads(1);\r\n\r\n  // session_options.SetGraphOptimizationLevel(GraphOptimizationLevel::ORT_ENABLE_EXTENDED);\r\n\r\n  const char* model_path = \"aaaa.onnx\";\r\n  std::cout << model_path << std::endl;\r\n\r\n  //*****************************************************************************************\r\n  // It's not suggested to directly new OrtTensorRTProviderOptionsV2 to get provider options\r\n  //*****************************************************************************************\r\n  //\r\n  // auto tensorrt_options = get_default_trt_provider_options();\r\n  // session_options.AppendExecutionProvider_TensorRT_V2(*tensorrt_options.get());\r\n\r\n  //**************************************************************************************************************************\r\n  // It's suggested to use CreateTensorRTProviderOptions() to get provider options\r\n  // since ORT takes care of valid options for you\r\n  //**************************************************************************************************************************\r\n  // Ort::ThrowOnError(api.CreateTensorRTProviderOptions(&tensorrt_options));\r\n  // std::unique_ptr<OrtTensorRTProviderOptionsV2, decltype(api.ReleaseTensorRTProviderOptions)> rel_trt_options(\r\n  //     tensorrt_options, api.ReleaseTensorRTProviderOptions);\r\n  // Ort::ThrowOnError(api.SessionOptionsAppendExecutionProvider_TensorRT_V2(static_cast<OrtSessionOptions*>(session_options),\r\n  //                                                       rel_trt_options.get()));\r\n\r\n  std::cout << \"Running ORT TRT EP with default provider options\" << std::endl;\r\n\r\n  Ort::Session session(env, model_path, session_options);\r\n\r\n  //*************************************************************************\r\n  // print model input layer (node names, types, shape etc.)\r\n  Ort::AllocatorWithDefaultOptions allocator;\r\n\r\n  // print number of model input nodes\r\n  const size_t num_input_nodes = session.GetInputCount();\r\n  std::vector<Ort::AllocatedStringPtr> input_names_ptr;\r\n  std::vector<const char*> input_node_names;\r\n  input_names_ptr.reserve(num_input_nodes);\r\n  input_node_names.reserve(num_input_nodes);\r\n  std::vector<int64_t> input_node_dims;  // simplify... this model has only 1 input node {1, 3, 224, 224}.\r\n                                         // Otherwise need vector<vector<>>\r\n\r\n  std::cout << \"Number of inputs = \" << num_input_nodes << std::endl;\r\n\r\n  const int height = 1024;\r\n  const int width = 736;\r\n  // iterate over all input nodes\r\n  for (size_t i = 0; i < num_input_nodes; i++) {\r\n    // print input node names\r\n    auto input_name = session.GetInputNameAllocated(i, allocator);\r\n    std::cout << \"Input \" << i << \" : name =\" << input_name.get() << std::endl;\r\n    input_node_names.push_back(input_name.get());\r\n    input_names_ptr.push_back(std::move(input_name));\r\n\r\n    // print input node types\r\n    auto type_info = session.GetInputTypeInfo(i);\r\n    auto tensor_info = type_info.GetTensorTypeAndShapeInfo();\r\n\r\n    ONNXTensorElementDataType type = tensor_info.GetElementType();\r\n    std::cout << \"Input \" << i << \" : type = \" << type << std::endl;\r\n\r\n    // print input shapes/dims\r\n    input_node_dims = tensor_info.GetShape();\r\n\r\n    input_node_dims[2] = height;\r\n    input_node_dims[3] = width;\r\n\r\n    std::cout << \"Input \" << i << \" : num_dims = \" << input_node_dims.size() << '\\n';\r\n    for (size_t j = 0; j < input_node_dims.size(); j++) {\r\n      std::cout << \"Input \" << i << \" : dim[\" << j << \"] =\" << input_node_dims[j] << '\\n';\r\n    }\r\n    std::cout << std::flush;\r\n  }\r\n\r\n\r\n  constexpr size_t input_tensor_size = height * width * 3;  // simplify ... using known dim values to calculate size\r\n                                                       // use OrtGetTensorShapeElementCount() to get official size!\r\n\r\n  std::vector<float> input_tensor_values(input_tensor_size);\r\n  std::vector<const char*> output_node_names = {\"output\"};\r\n\r\n  // initialize input data with values in [0.0, 1.0]\r\n  for (unsigned int i = 0; i < input_tensor_size; i++) input_tensor_values[i] = (float)i / (input_tensor_size + 1);\r\n\r\n  // create input tensor object from data values\r\n  auto memory_info = Ort::MemoryInfo::CreateCpu(OrtArenaAllocator, OrtMemTypeDefault);\r\n  std::cout << \"Input 95\" << '\\n';\r\n  auto input_tensor = Ort::Value::CreateTensor<float>(memory_info, input_tensor_values.data(), \r\n                      input_tensor_size,input_node_dims.data(), 4);\r\n  std::cout << \"Input 97\" << '\\n';\r\n  assert(input_tensor.IsTensor());\r\n  // score model & input tensor, get back output tensor\r\n\r\n  std::vector<Ort::Value> output_tensors;\r\n  for (unsigned int i = 0; i < 70; i++) {\r\n  time_t now = time(nullptr);\r\n  long long start=systemtime();\r\n  output_tensors =\r\n      session.Run(Ort::RunOptions{nullptr}, input_node_names.data(), &input_tensor, 1, output_node_names.data(), 1);\r\n\r\n  std::cout << \"Input: \" << i <<\"  time: \"<< systemtime()-start<<\" 毫秒\" << '\\n';\r\n\r\n  }\r\n\r\n  assert(output_tensors.size() == 1 && output_tensors.front().IsTensor());\r\n\r\n  // Get pointer to output tensor float values\r\n  float* floatarr = output_tensors.front().GetTensorMutableData<float>();\r\n  \r\n  // assert(abs(floatarr[0] - 0.000045) < 1e-6);\r\n\r\n  // score the model, and print scores for first 5 classes\r\n  for (int i = 0; i < 5; i++) {\r\n    std::cout << \"Score for class [\" << i << \"] =  \" << floatarr[i] << '\\n';\r\n  }\r\n  std::cout << std::flush;\r\n\r\n  // Results should be as below...\r\n  // Score for class[0] = 0.000045\r\n  // Score for class[1] = 0.003846\r\n  // Score for class[2] = 0.000125\r\n  // Score for class[3] = 0.001180\r\n  // Score for class[4] = 0.001317\r\n\r\n  std::cout << \"Done!\" << std::endl;\r\n}\r\n\r\nint main(int /*argc*/, char*[]) {\r\n  assignToThisCore(2);\r\n  run_ort_trt();\r\n\r\n  return 0;\r\n}\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1316809168/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1316836863",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13651#issuecomment-1316836863",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13651",
        "id": 1316836863,
        "node_id": "IC_kwDOCVq1mM5OfVX_",
        "user": {
            "login": "allen20200111",
            "id": 37377179,
            "node_id": "MDQ6VXNlcjM3Mzc3MTc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/37377179?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/allen20200111",
            "html_url": "https://github.com/allen20200111",
            "followers_url": "https://api.github.com/users/allen20200111/followers",
            "following_url": "https://api.github.com/users/allen20200111/following{/other_user}",
            "gists_url": "https://api.github.com/users/allen20200111/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/allen20200111/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/allen20200111/subscriptions",
            "organizations_url": "https://api.github.com/users/allen20200111/orgs",
            "repos_url": "https://api.github.com/users/allen20200111/repos",
            "events_url": "https://api.github.com/users/allen20200111/events{/privacy}",
            "received_events_url": "https://api.github.com/users/allen20200111/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-16T11:21:34Z",
        "updated_at": "2022-11-16T11:21:34Z",
        "author_association": "NONE",
        "body": "> > what should i do ?\r\n> > I would suggest following the process and share with us the model, if possible and a minimum test program, that is used to measure performance.\r\n\r\ncan you give me email , the model email to you, can not upload because of github limit",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1316836863/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1317449447",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13651#issuecomment-1317449447",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13651",
        "id": 1317449447,
        "node_id": "IC_kwDOCVq1mM5Ohq7n",
        "user": {
            "login": "yuslepukhin",
            "id": 11303988,
            "node_id": "MDQ6VXNlcjExMzAzOTg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11303988?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yuslepukhin",
            "html_url": "https://github.com/yuslepukhin",
            "followers_url": "https://api.github.com/users/yuslepukhin/followers",
            "following_url": "https://api.github.com/users/yuslepukhin/following{/other_user}",
            "gists_url": "https://api.github.com/users/yuslepukhin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yuslepukhin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yuslepukhin/subscriptions",
            "organizations_url": "https://api.github.com/users/yuslepukhin/orgs",
            "repos_url": "https://api.github.com/users/yuslepukhin/repos",
            "events_url": "https://api.github.com/users/yuslepukhin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yuslepukhin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-16T18:14:21Z",
        "updated_at": "2022-11-16T18:27:04Z",
        "author_association": "MEMBER",
        "body": "> > > what should i do ?\r\n> > > I would suggest following the process and share with us the model, if possible and a minimum test program, that is used to measure performance.\r\n> \r\n> can you give me email , the model email to you, can not upload because of github limit\r\n\r\nI don't think it would be a good assumption that email would accept files that are over github limit. People usually put it in the cloud and send a link.\r\n\r\nYou specify onnxruntime version of 1.6 and yet in your example above you use some C++ API that only recently appeared. It is unlikely that that we are going to issue any patches for 1.6.\r\n\r\nWe employ memory patterns and pre-allocations. You need to run at least 1-2 times before you can measure the performance, so we do not allocate much more memory (providing you do not use dynamic shapes). And then compute the mean and variance/percentiles.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1317449447/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1317977978",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13651#issuecomment-1317977978",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13651",
        "id": 1317977978,
        "node_id": "IC_kwDOCVq1mM5Ojr96",
        "user": {
            "login": "allen20200111",
            "id": 37377179,
            "node_id": "MDQ6VXNlcjM3Mzc3MTc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/37377179?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/allen20200111",
            "html_url": "https://github.com/allen20200111",
            "followers_url": "https://api.github.com/users/allen20200111/followers",
            "following_url": "https://api.github.com/users/allen20200111/following{/other_user}",
            "gists_url": "https://api.github.com/users/allen20200111/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/allen20200111/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/allen20200111/subscriptions",
            "organizations_url": "https://api.github.com/users/allen20200111/orgs",
            "repos_url": "https://api.github.com/users/allen20200111/repos",
            "events_url": "https://api.github.com/users/allen20200111/events{/privacy}",
            "received_events_url": "https://api.github.com/users/allen20200111/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-17T02:39:31Z",
        "updated_at": "2022-11-17T03:05:12Z",
        "author_association": "NONE",
        "body": "> > > > what should i do ?\r\n> > > > I would suggest following the process and share with us the model, if possible and a minimum test program, that is used to measure performance.\r\n> > \r\n> > \r\n> > can you give me email , the model email to you, can not upload because of github limit\r\n> \r\n> I don't think it would be a good assumption that email would accept files that are over github limit. People usually put it in the cloud and send a link.\r\n> \r\n> You specify onnxruntime version of 1.6 and yet in your example above you use some C++ API that only recently appeared. It is unlikely that that we are going to issue any patches for 1.6.\r\n> \r\n> We employ memory patterns and pre-allocations. You need to run at least 1-2 times before you can measure the performance, so we do not allocate much more memory (providing you do not use dynamic shapes). And then compute the mean and variance/percentiles.\r\n\r\nThank you very much for you reply.\r\n\r\n**link:    https://pan.baidu.com/s/1r8i8YOAyz9yU3kxCk7gfZQ?pwd=j5d4**\r\nthe onnxruntime 1.13 behavior same as 1.6,   I have tested both 1.6 and 1.13.\r\nI test dynamic shapes find that  model   more and more time consuming and slower and slower.\r\ntest the static shapes as shown below， sometime  slower, sometimes faster.\r\nInput: 0  time: 345 ms\r\nInput: 1  time: 339 ms\r\nInput: 2  time: 541 ms\r\nInput: 3  time: 420 ms\r\nInput: 4  time: 445 ms\r\nInput: 5  time: 474 ms\r\nInput: 6  time: 428 ms\r\nInput: 7  time: 430 ms\r\nInput: 8  time: 505 ms\r\nInput: 9  time: 497 ms\r\nInput: 10  time: 441 ms\r\nInput: 11  time: 436 ms\r\nInput: 12  time: 650 ms\r\nInput: 13  time: 469 ms\r\nInput: 14  time: 472 ms\r\nInput: 15  time: 496 ms\r\nInput: 16  time: 569 ms\r\nInput: 17  time: 733 ms\r\nInput: 18  time: 394 ms\r\nInput: 19  time: 412 ms\r\nInput: 20  time: 446 ms\r\nInput: 21  time: 576 ms\r\nInput: 22  time: 518 ms\r\nInput: 23  time: 436 ms\r\nInput: 24  time: 641 ms\r\nInput: 25  time: 838 ms\r\nInput: 26  time: 654 ms\r\nInput: 27  time: 1109 ms\r\nInput: 28  time: 486 ms\r\nInput: 29  time: 422 ms\r\nInput: 30  time: 1480 ms\r\nInput: 31  time: 974 ms\r\nInput: 32  time: 874 ms\r\nInput: 33  time: 400 ms\r\nInput: 34  time: 568 ms\r\nInput: 35  time: 591 ms\r\nInput: 36  time: 423 ms\r\nInput: 37  time: 567 ms\r\nInput: 38  time: 856 ms\r\nInput: 39  time: 723 ms\r\nInput: 40  time: 877 ms\r\nInput: 41  time: 476 ms\r\nInput: 42  time: 658 ms\r\nInput: 43  time: 1864 ms\r\nInput: 44  time: 860 ms\r\nInput: 45  time: 1087 ms\r\nInput: 46  time: 1360 ms\r\nInput: 47  time: 417 ms\r\nInput: 48  time: 1121 ms\r\nInput: 49  time: 451 ms\r\nInput: 50  time: 619 ms\r\nInput: 51  time: 630 ms\r\nInput: 52  time: 1494 ms\r\nInput: 53  time: 502 ms\r\nInput: 54  time: 663 ms\r\nInput: 55  time: 1312 ms\r\nInput: 56  time: 1068 ms\r\nInput: 57  time: 435 ms\r\nInput: 58  time: 1179 ms\r\nInput: 59  time: 861 ms\r\nInput: 60  time: 485 ms\r\nInput: 61  time: 1991 ms\r\nInput: 62  time: 482 ms\r\nInput: 63  time: 818 ms\r\nInput: 64  time: 488 ms\r\nInput: 65  time: 606 ms\r\nInput: 66  time: 993 ms\r\nInput: 67  time: 628 ms\r\nInput: 68  time: 608 ms\r\nInput: 69  time: 689 ms\r\nInput: 70  time: 818 ms\r\nInput: 71  time: 627 ms\r\nInput: 72  time: 833 ms\r\nInput: 73  time: 947 ms\r\nInput: 74  time: 1921 ms\r\nInput: 75  time: 966 ms\r\nInput: 76  time: 961 ms\r\nInput: 77  time: 934 ms\r\nInput: 78  time: 1532 ms\r\nInput: 79  time: 2143 ms\r\nInput: 80  time: 931 ms\r\nInput: 81  time: 1378 ms\r\nInput: 82  time: 1894 ms\r\nInput: 83  time: 1297 ms\r\nInput: 84  time: 1960 ms\r\nInput: 85  time: 1567 ms\r\nInput: 86  time: 1255 ms\r\nInput: 87  time: 2298 ms",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1317977978/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1319082780",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13651#issuecomment-1319082780",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13651",
        "id": 1319082780,
        "node_id": "IC_kwDOCVq1mM5On5sc",
        "user": {
            "login": "yuslepukhin",
            "id": 11303988,
            "node_id": "MDQ6VXNlcjExMzAzOTg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11303988?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yuslepukhin",
            "html_url": "https://github.com/yuslepukhin",
            "followers_url": "https://api.github.com/users/yuslepukhin/followers",
            "following_url": "https://api.github.com/users/yuslepukhin/following{/other_user}",
            "gists_url": "https://api.github.com/users/yuslepukhin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yuslepukhin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yuslepukhin/subscriptions",
            "organizations_url": "https://api.github.com/users/yuslepukhin/orgs",
            "repos_url": "https://api.github.com/users/yuslepukhin/repos",
            "events_url": "https://api.github.com/users/yuslepukhin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yuslepukhin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-17T19:10:36Z",
        "updated_at": "2022-11-17T19:10:36Z",
        "author_association": "MEMBER",
        "body": "Baidu seems to require a client installation to download the file, and that I am not willing to do for my work computer. Would it be possible to put this on a MS OneDrive or Google Drive? Or anything else that does not require a proprietary client installation.\r\nThe size does not seem to be very big for free versions.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1319082780/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1319098307",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13651#issuecomment-1319098307",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13651",
        "id": 1319098307,
        "node_id": "IC_kwDOCVq1mM5On9fD",
        "user": {
            "login": "yuslepukhin",
            "id": 11303988,
            "node_id": "MDQ6VXNlcjExMzAzOTg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11303988?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yuslepukhin",
            "html_url": "https://github.com/yuslepukhin",
            "followers_url": "https://api.github.com/users/yuslepukhin/followers",
            "following_url": "https://api.github.com/users/yuslepukhin/following{/other_user}",
            "gists_url": "https://api.github.com/users/yuslepukhin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yuslepukhin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yuslepukhin/subscriptions",
            "organizations_url": "https://api.github.com/users/yuslepukhin/orgs",
            "repos_url": "https://api.github.com/users/yuslepukhin/repos",
            "events_url": "https://api.github.com/users/yuslepukhin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yuslepukhin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-17T19:24:42Z",
        "updated_at": "2022-11-17T19:24:42Z",
        "author_association": "MEMBER",
        "body": "One thing to suggest, since it is a CPU, you do not need memory arena. \r\n`options.DisableCpuMemArena();`",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1319098307/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]