[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/601004966",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3261#issuecomment-601004966",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3261",
        "id": 601004966,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTAwNDk2Ng==",
        "user": {
            "login": "pranavsharma",
            "id": 2732907,
            "node_id": "MDQ6VXNlcjI3MzI5MDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2732907?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pranavsharma",
            "html_url": "https://github.com/pranavsharma",
            "followers_url": "https://api.github.com/users/pranavsharma/followers",
            "following_url": "https://api.github.com/users/pranavsharma/following{/other_user}",
            "gists_url": "https://api.github.com/users/pranavsharma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pranavsharma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pranavsharma/subscriptions",
            "organizations_url": "https://api.github.com/users/pranavsharma/orgs",
            "repos_url": "https://api.github.com/users/pranavsharma/repos",
            "events_url": "https://api.github.com/users/pranavsharma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pranavsharma/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-19T06:06:23Z",
        "updated_at": "2020-03-19T06:06:23Z",
        "author_association": "MEMBER",
        "body": "Can you attach your code here? The session object is meant to be constructed only once for a given model and reused when calling Run() each time. You want to ensure the Ort::Session object doesn't get destructed at the end of the scope after passing it to a function as a parameter.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/601004966/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null,
        "event": "commented",
        "actor": {
            "login": "pranavsharma",
            "id": 2732907,
            "node_id": "MDQ6VXNlcjI3MzI5MDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2732907?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pranavsharma",
            "html_url": "https://github.com/pranavsharma",
            "followers_url": "https://api.github.com/users/pranavsharma/followers",
            "following_url": "https://api.github.com/users/pranavsharma/following{/other_user}",
            "gists_url": "https://api.github.com/users/pranavsharma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pranavsharma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pranavsharma/subscriptions",
            "organizations_url": "https://api.github.com/users/pranavsharma/orgs",
            "repos_url": "https://api.github.com/users/pranavsharma/repos",
            "events_url": "https://api.github.com/users/pranavsharma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pranavsharma/received_events",
            "type": "User",
            "site_admin": false
        }
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/601161825",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3261#issuecomment-601161825",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3261",
        "id": 601161825,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTE2MTgyNQ==",
        "user": {
            "login": "goncamateus",
            "id": 9999972,
            "node_id": "MDQ6VXNlcjk5OTk5NzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9999972?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/goncamateus",
            "html_url": "https://github.com/goncamateus",
            "followers_url": "https://api.github.com/users/goncamateus/followers",
            "following_url": "https://api.github.com/users/goncamateus/following{/other_user}",
            "gists_url": "https://api.github.com/users/goncamateus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/goncamateus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/goncamateus/subscriptions",
            "organizations_url": "https://api.github.com/users/goncamateus/orgs",
            "repos_url": "https://api.github.com/users/goncamateus/repos",
            "events_url": "https://api.github.com/users/goncamateus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/goncamateus/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-19T12:55:17Z",
        "updated_at": "2020-03-19T13:07:55Z",
        "author_association": "NONE",
        "body": "It's something like this:\r\n```\r\n// Copyright(c) Microsoft Corporation.All rights reserved.\r\n// Licensed under the MIT License.\r\n//\r\n\r\n#include <assert.h>\r\n#include <vector>\r\n#include <iostream>\r\n#include <onnxruntime_cxx_api.h>\r\n#include <onnxruntime/core/providers/cpu/cpu_provider_factory.h>\r\n#include <chrono>\r\nusing namespace std::chrono;\r\n\r\n\r\nOrt::Session get_session()\r\n{\r\n  //*************************************************************************\r\n  // initialize  enviroment...one enviroment per process\r\n  // enviroment maintains thread pools and other state info\r\n  Ort::Env env(ORT_LOGGING_LEVEL_WARNING, \"test\");\r\n\r\n  // initialize session options if needed\r\n  Ort::SessionOptions session_options;\r\n  session_options.SetIntraOpNumThreads(8);\r\n\r\n  // If onnxruntime.dll is built with CUDA enabled, we can uncomment out this line to use CUDA for this\r\n  // session (we also need to include cuda_provider_factory.h above which defines it)\r\n  // #include \"cuda_provider_factory.h\"\r\n  // OrtSessionOptionsAppendExecutionProvider_CUDA(session_options, 1);\r\n\r\n  // Sets graph optimization level\r\n  // Available levels are\r\n  // ORT_DISABLE_ALL -> To disable all optimizations\r\n  // ORT_ENABLE_BASIC -> To enable basic optimizations (Such as redundant node removals)\r\n  // ORT_ENABLE_EXTENDED -> To enable extended optimizations (Includes level 1 + more complex optimizations like node fusions)\r\n  // ORT_ENABLE_ALL -> To Enable All possible opitmizations\r\n  session_options.SetGraphOptimizationLevel(GraphOptimizationLevel::ORT_ENABLE_EXTENDED);\r\n\r\n  //*************************************************************************\r\n  // create session and load model into memory\r\n  // using squeezenet version 1.3\r\n  // URL = https://github.com/onnx/models/tree/master/squeezenet\r\n#ifdef _WIN32\r\n  const wchar_t* model_path = L\"squeezenet.onnx\";\r\n#else\r\n  const char* model_path = \"def_actor.onnx\";\r\n#endif\r\n\r\n  printf(\"Using Onnxruntime C++ API\\n\");\r\n  Ort::Session session(env, model_path, session_options);\r\n  return session;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n  auto start = high_resolution_clock::now();\r\n\r\n  //*************************************************************************\r\n  // print model input layer (node names, types, shape etc.)\r\n  Ort::AllocatorWithDefaultOptions allocator;\r\n  Ort::Session session = get_session();\r\n  // print number of model input nodes\r\n  size_t num_input_nodes = session.GetInputCount();\r\n  std::vector<const char*> input_node_names(num_input_nodes);\r\n  std::vector<int64_t> input_node_dims;  // simplify... this model has only 1 input node {1, 3, 224, 224}.\r\n                                         // Otherwise need vector<vector<>>\r\n\r\n  // iterate over all input nodes\r\n  for (int i = 0; i < num_input_nodes; i++) {\r\n    // print input node names\r\n    char* input_name = session.GetInputName(i, allocator);\r\n    input_node_names[i] = input_name;\r\n\r\n    // print input node types\r\n    Ort::TypeInfo type_info = session.GetInputTypeInfo(i);\r\n    auto tensor_info = type_info.GetTensorTypeAndShapeInfo();\r\n\r\n    ONNXTensorElementDataType type = tensor_info.GetElementType();\r\n\r\n    // print input shapes/dims\r\n    input_node_dims = tensor_info.GetShape();\r\n  }\r\n\r\n  // Results should be...\r\n  // Number of inputs = 1\r\n  // Input 0 : name = data_0\r\n  // Input 0 : type = 1\r\n  // Input 0 : num_dims = 4\r\n  // Input 0 : dim 0 = 1\r\n  // Input 0 : dim 1 = 3\r\n  // Input 0 : dim 2 = 224\r\n  // Input 0 : dim 3 = 224\r\n\r\n  //*************************************************************************\r\n  // Similar operations to get output node information.\r\n  // Use OrtSessionGetOutputCount(), OrtSessionGetOutputName()\r\n  // OrtSessionGetOutputTypeInfo() as shown above.\r\n\r\n  //*************************************************************************\r\n  // Score the model using sample data, and inspect values\r\n  size_t input_tensor_size = 32 * 16;  // simplify ... using known dim values to calculate size\r\n                                       // use OrtGetTensorShapeElementCount() to get official size!\r\n\r\n  std::vector<float> input_tensor_values(input_tensor_size);\r\n  std::vector<const char*> output_node_names = {\"output\"};\r\n\r\n  // initialize input data with values in [0.0, 1.0]\r\n  for (unsigned int i = 0; i < input_tensor_size; i++)\r\n    input_tensor_values[i] = (float)1;  // (float)i / (input_tensor_size + 1);\r\n\r\n  // create input tensor object from data values\r\n  auto memory_info = Ort::MemoryInfo::CreateCpu(OrtArenaAllocator, OrtMemTypeDefault);\r\n  Ort::Value input_tensor = Ort::Value::CreateTensor<float>(memory_info, input_tensor_values.data(), input_tensor_size, input_node_dims.data(), 2);\r\n  assert(input_tensor.IsTensor());\r\n  // score model & input tensor, get back output tensor\r\n  auto output_tensors = session.Run(Ort::RunOptions{nullptr}, input_node_names.data(), &input_tensor, 1, output_node_names.data(), 1);\r\n  auto stop = high_resolution_clock::now();\r\n  assert(output_tensors.size() == 1 && output_tensors.front().IsTensor());\r\n  auto duration = duration_cast<microseconds>(stop - start);\r\n  std::cout << \"Took \" << duration.count() << \" microseconds\" << std::endl;\r\n  // Get pointer to output tensor float values\r\n  float* floatarr = output_tensors.front().GetTensorMutableData<float>();\r\n  printf(\"Result = %f\\n\", floatarr[0]);\r\n  printf(\"Done!\\n\");\r\n  return 0;\r\n}\r\n\r\n```\r\nI got your code from the C# samples and adapted to my problem, ignore the comments.\r\nIt compiles but returns SegFault.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/601161825/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null,
        "event": "commented",
        "actor": {
            "login": "goncamateus",
            "id": 9999972,
            "node_id": "MDQ6VXNlcjk5OTk5NzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9999972?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/goncamateus",
            "html_url": "https://github.com/goncamateus",
            "followers_url": "https://api.github.com/users/goncamateus/followers",
            "following_url": "https://api.github.com/users/goncamateus/following{/other_user}",
            "gists_url": "https://api.github.com/users/goncamateus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/goncamateus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/goncamateus/subscriptions",
            "organizations_url": "https://api.github.com/users/goncamateus/orgs",
            "repos_url": "https://api.github.com/users/goncamateus/repos",
            "events_url": "https://api.github.com/users/goncamateus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/goncamateus/received_events",
            "type": "User",
            "site_admin": false
        }
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/601170836",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3261#issuecomment-601170836",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3261",
        "id": 601170836,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTE3MDgzNg==",
        "user": {
            "login": "goncamateus",
            "id": 9999972,
            "node_id": "MDQ6VXNlcjk5OTk5NzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9999972?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/goncamateus",
            "html_url": "https://github.com/goncamateus",
            "followers_url": "https://api.github.com/users/goncamateus/followers",
            "following_url": "https://api.github.com/users/goncamateus/following{/other_user}",
            "gists_url": "https://api.github.com/users/goncamateus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/goncamateus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/goncamateus/subscriptions",
            "organizations_url": "https://api.github.com/users/goncamateus/orgs",
            "repos_url": "https://api.github.com/users/goncamateus/repos",
            "events_url": "https://api.github.com/users/goncamateus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/goncamateus/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-19T13:14:52Z",
        "updated_at": "2020-03-19T13:15:53Z",
        "author_association": "NONE",
        "body": "Using it this way, it doesn't even compiles:\r\n```\r\n// Copyright(c) Microsoft Corporation.All rights reserved.\r\n// Licensed under the MIT License.\r\n//\r\n\r\n#include <assert.h>\r\n#include <vector>\r\n#include <iostream>\r\n#include <onnxruntime_cxx_api.h>\r\n#include <onnxruntime/core/providers/cpu/cpu_provider_factory.h>\r\n#include <chrono>\r\nusing namespace std::chrono;\r\n\r\n\r\nOrt::Session get_session()\r\n{\r\n  //*************************************************************************\r\n  // initialize  enviroment...one enviroment per process\r\n  // enviroment maintains thread pools and other state info\r\n  Ort::Env env(ORT_LOGGING_LEVEL_WARNING, \"test\");\r\n\r\n  // initialize session options if needed\r\n  Ort::SessionOptions session_options;\r\n  session_options.SetIntraOpNumThreads(8);\r\n\r\n  // If onnxruntime.dll is built with CUDA enabled, we can uncomment out this line to use CUDA for this\r\n  // session (we also need to include cuda_provider_factory.h above which defines it)\r\n  // #include \"cuda_provider_factory.h\"\r\n  // OrtSessionOptionsAppendExecutionProvider_CUDA(session_options, 1);\r\n\r\n  // Sets graph optimization level\r\n  // Available levels are\r\n  // ORT_DISABLE_ALL -> To disable all optimizations\r\n  // ORT_ENABLE_BASIC -> To enable basic optimizations (Such as redundant node removals)\r\n  // ORT_ENABLE_EXTENDED -> To enable extended optimizations (Includes level 1 + more complex optimizations like node fusions)\r\n  // ORT_ENABLE_ALL -> To Enable All possible opitmizations\r\n  session_options.SetGraphOptimizationLevel(GraphOptimizationLevel::ORT_ENABLE_EXTENDED);\r\n\r\n  //*************************************************************************\r\n  // create session and load model into memory\r\n  // using squeezenet version 1.3\r\n  // URL = https://github.com/onnx/models/tree/master/squeezenet\r\n#ifdef _WIN32\r\n  const wchar_t* model_path = L\"squeezenet.onnx\";\r\n#else\r\n  const char* model_path = \"def_actor.onnx\";\r\n#endif\r\n\r\n  printf(\"Using Onnxruntime C++ API\\n\");\r\n  Ort::Session session(env, model_path, session_options);\r\n  return session;\r\n}\r\n\r\nfloat get_result(Ort::Session session)\r\n{\r\n  auto start = high_resolution_clock::now();\r\n  Ort::AllocatorWithDefaultOptions allocator;\r\n    // print number of model input nodes\r\n  size_t num_input_nodes = session.GetInputCount();\r\n  std::vector<const char*> input_node_names(num_input_nodes);\r\n  std::vector<int64_t> input_node_dims;  // simplify... this model has only 1 input node {1, 3, 224, 224}.\r\n                                         // Otherwise need vector<vector<>>\r\n\r\n  // iterate over all input nodes\r\n  for (int i = 0; i < num_input_nodes; i++) {\r\n    // print input node names\r\n    char* input_name = session.GetInputName(i, allocator);\r\n    input_node_names[i] = input_name;\r\n\r\n    // print input node types\r\n    Ort::TypeInfo type_info = session.GetInputTypeInfo(i);\r\n    auto tensor_info = type_info.GetTensorTypeAndShapeInfo();\r\n\r\n    ONNXTensorElementDataType type = tensor_info.GetElementType();\r\n\r\n    // print input shapes/dims\r\n    input_node_dims = tensor_info.GetShape();\r\n  }\r\n\r\n  // Results should be...\r\n  // Number of inputs = 1\r\n  // Input 0 : name = data_0\r\n  // Input 0 : type = 1\r\n  // Input 0 : num_dims = 4\r\n  // Input 0 : dim 0 = 1\r\n  // Input 0 : dim 1 = 3\r\n  // Input 0 : dim 2 = 224\r\n  // Input 0 : dim 3 = 224\r\n\r\n  //*************************************************************************\r\n  // Similar operations to get output node information.\r\n  // Use OrtSessionGetOutputCount(), OrtSessionGetOutputName()\r\n  // OrtSessionGetOutputTypeInfo() as shown above.\r\n\r\n  //*************************************************************************\r\n  // Score the model using sample data, and inspect values\r\n  size_t input_tensor_size = 32 * 16;  // simplify ... using known dim values to calculate size\r\n                                       // use OrtGetTensorShapeElementCount() to get official size!\r\n\r\n  std::vector<float> input_tensor_values(input_tensor_size);\r\n  std::vector<const char*> output_node_names = {\"output\"};\r\n\r\n  // initialize input data with values in [0.0, 1.0]\r\n  for (unsigned int i = 0; i < input_tensor_size; i++)\r\n    input_tensor_values[i] = (float)1;  // (float)i / (input_tensor_size + 1);\r\n\r\n  // create input tensor object from data values\r\n  auto memory_info = Ort::MemoryInfo::CreateCpu(OrtArenaAllocator, OrtMemTypeDefault);\r\n  Ort::Value input_tensor = Ort::Value::CreateTensor<float>(memory_info, input_tensor_values.data(), input_tensor_size, input_node_dims.data(), 2);\r\n  assert(input_tensor.IsTensor());\r\n  // score model & input tensor, get back output tensor\r\n  auto output_tensors = session.Run(Ort::RunOptions{nullptr}, input_node_names.data(), &input_tensor, 1, output_node_names.data(), 1);\r\n  auto stop = high_resolution_clock::now();\r\n  assert(output_tensors.size() == 1 && output_tensors.front().IsTensor());\r\n  auto duration = duration_cast<microseconds>(stop - start);\r\n  std::cout << \"Took \" << duration.count() << \" microseconds\" << std::endl;\r\n  // Get pointer to output tensor float values\r\n  float* floatarr = output_tensors.front().GetTensorMutableData<float>();\r\n  // assert(abs(floatarr[0] - 0.000045) < 1e-6);\r\n  return floatarr[0];\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n\r\n  //*************************************************************************\r\n  // print model input layer (node names, types, shape etc.)\r\n  Ort::Session session = get_session();\r\n\r\n  // score the model, and print scores for first 5 classes\r\n  printf(\"Result = %f\\n\", get_result(session));\r\n\r\n  printf(\"Done!\\n\");\r\n  return 0;\r\n}\r\n\r\n```\r\nThis will return:\r\n```\r\n/home/mateus/onnxruntime/samples/c_cxx/test_actor/test_actor.cpp: In function ‘int main(int, char**)’:\r\n/home/mateus/onnxruntime/samples/c_cxx/test_actor/test_actor.cpp:129:45: error: use of deleted function ‘Ort::Session::Session(const Ort::Session&)’\r\n   printf(\"Result = %f\\n\", get_result(session));\r\n                                             ^\r\nIn file included from /home/mateus/onnxruntime/samples/c_cxx/test_actor/test_actor.cpp:8:0:\r\n/usr/local/include/onnxruntime_cxx_api.h:202:8: note: ‘Ort::Session::Session(const Ort::Session&)’ is implicitly deleted because the default definition would be ill-formed:\r\n struct Session : Base<OrtSession> {\r\n        ^~~~~~~\r\n/usr/local/include/onnxruntime_cxx_api.h:202:8: error: use of deleted function ‘Ort::Base<T>::Base(const Ort::Base<T>&) [with T = OrtSession]’\r\n/usr/local/include/onnxruntime_cxx_api.h:94:3: note: declared here\r\n   Base(const Base&) = delete;\r\n   ^~~~\r\n/home/mateus/onnxruntime/samples/c_cxx/test_actor/test_actor.cpp:53:7: note:   initializing argument 1 of ‘float get_result(Ort::Session)’\r\n float get_result(Ort::Session session)\r\n       ^~~~~~~~~~\r\nCMakeFiles/test_actor.dir/build.make:79: recipe for target 'CMakeFiles/test_actor.dir/test_actor.o' failed\r\nmake[2]: *** [CMakeFiles/test_actor.dir/test_actor.o] Error 1\r\nCMakeFiles/Makefile2:92: recipe for target 'CMakeFiles/test_actor.dir/all' failed\r\nmake[1]: *** [CMakeFiles/test_actor.dir/all] Error 2\r\nMakefile:100: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n```\r\nCorrecting myself \"deleted function\" not \"destructed object\".",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/601170836/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null,
        "event": "commented",
        "actor": {
            "login": "goncamateus",
            "id": 9999972,
            "node_id": "MDQ6VXNlcjk5OTk5NzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9999972?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/goncamateus",
            "html_url": "https://github.com/goncamateus",
            "followers_url": "https://api.github.com/users/goncamateus/followers",
            "following_url": "https://api.github.com/users/goncamateus/following{/other_user}",
            "gists_url": "https://api.github.com/users/goncamateus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/goncamateus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/goncamateus/subscriptions",
            "organizations_url": "https://api.github.com/users/goncamateus/orgs",
            "repos_url": "https://api.github.com/users/goncamateus/repos",
            "events_url": "https://api.github.com/users/goncamateus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/goncamateus/received_events",
            "type": "User",
            "site_admin": false
        }
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/601866441",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3261#issuecomment-601866441",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3261",
        "id": 601866441,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTg2NjQ0MQ==",
        "user": {
            "login": "pranavsharma",
            "id": 2732907,
            "node_id": "MDQ6VXNlcjI3MzI5MDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2732907?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pranavsharma",
            "html_url": "https://github.com/pranavsharma",
            "followers_url": "https://api.github.com/users/pranavsharma/followers",
            "following_url": "https://api.github.com/users/pranavsharma/following{/other_user}",
            "gists_url": "https://api.github.com/users/pranavsharma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pranavsharma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pranavsharma/subscriptions",
            "organizations_url": "https://api.github.com/users/pranavsharma/orgs",
            "repos_url": "https://api.github.com/users/pranavsharma/repos",
            "events_url": "https://api.github.com/users/pranavsharma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pranavsharma/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-20T19:07:29Z",
        "updated_at": "2020-03-20T19:07:29Z",
        "author_association": "MEMBER",
        "body": "You want Ort::Env to be declared outside get_session. Something like this\r\n\r\n```\r\nOrt::Session get_session(Ort::Env& env) {\r\n...\r\n  Ort::Session session(env, model_path, session_options);\r\n  return session;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n  Ort::Env env(ORT_LOGGING_LEVEL_WARNING, \"test\");\r\n  Ort::Session session = get_session(env);\r\n  ...\r\n}\r\n```\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/601866441/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 2,
            "eyes": 0
        },
        "performed_via_github_app": null,
        "event": "commented",
        "actor": {
            "login": "pranavsharma",
            "id": 2732907,
            "node_id": "MDQ6VXNlcjI3MzI5MDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2732907?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pranavsharma",
            "html_url": "https://github.com/pranavsharma",
            "followers_url": "https://api.github.com/users/pranavsharma/followers",
            "following_url": "https://api.github.com/users/pranavsharma/following{/other_user}",
            "gists_url": "https://api.github.com/users/pranavsharma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pranavsharma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pranavsharma/subscriptions",
            "organizations_url": "https://api.github.com/users/pranavsharma/orgs",
            "repos_url": "https://api.github.com/users/pranavsharma/repos",
            "events_url": "https://api.github.com/users/pranavsharma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pranavsharma/received_events",
            "type": "User",
            "site_admin": false
        }
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/602237969",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3261#issuecomment-602237969",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3261",
        "id": 602237969,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjIzNzk2OQ==",
        "user": {
            "login": "goncamateus",
            "id": 9999972,
            "node_id": "MDQ6VXNlcjk5OTk5NzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9999972?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/goncamateus",
            "html_url": "https://github.com/goncamateus",
            "followers_url": "https://api.github.com/users/goncamateus/followers",
            "following_url": "https://api.github.com/users/goncamateus/following{/other_user}",
            "gists_url": "https://api.github.com/users/goncamateus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/goncamateus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/goncamateus/subscriptions",
            "organizations_url": "https://api.github.com/users/goncamateus/orgs",
            "repos_url": "https://api.github.com/users/goncamateus/repos",
            "events_url": "https://api.github.com/users/goncamateus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/goncamateus/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-22T16:48:33Z",
        "updated_at": "2020-03-22T16:48:33Z",
        "author_association": "NONE",
        "body": "Oh! Nice! Gonna try that! Thank you!",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/602237969/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null,
        "event": "commented",
        "actor": {
            "login": "goncamateus",
            "id": 9999972,
            "node_id": "MDQ6VXNlcjk5OTk5NzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9999972?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/goncamateus",
            "html_url": "https://github.com/goncamateus",
            "followers_url": "https://api.github.com/users/goncamateus/followers",
            "following_url": "https://api.github.com/users/goncamateus/following{/other_user}",
            "gists_url": "https://api.github.com/users/goncamateus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/goncamateus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/goncamateus/subscriptions",
            "organizations_url": "https://api.github.com/users/goncamateus/orgs",
            "repos_url": "https://api.github.com/users/goncamateus/repos",
            "events_url": "https://api.github.com/users/goncamateus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/goncamateus/received_events",
            "type": "User",
            "site_admin": false
        }
    },
    {
        "id": 3152851816,
        "node_id": "MDExOkNsb3NlZEV2ZW50MzE1Mjg1MTgxNg==",
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/events/3152851816",
        "actor": {
            "login": "goncamateus",
            "id": 9999972,
            "node_id": "MDQ6VXNlcjk5OTk5NzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9999972?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/goncamateus",
            "html_url": "https://github.com/goncamateus",
            "followers_url": "https://api.github.com/users/goncamateus/followers",
            "following_url": "https://api.github.com/users/goncamateus/following{/other_user}",
            "gists_url": "https://api.github.com/users/goncamateus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/goncamateus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/goncamateus/subscriptions",
            "organizations_url": "https://api.github.com/users/goncamateus/orgs",
            "repos_url": "https://api.github.com/users/goncamateus/repos",
            "events_url": "https://api.github.com/users/goncamateus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/goncamateus/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "closed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-03-22T16:48:35Z",
        "state_reason": null,
        "performed_via_github_app": null
    }
]