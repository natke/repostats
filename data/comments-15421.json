[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1500707307",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/15421#issuecomment-1500707307",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/15421",
        "id": 1500707307,
        "node_id": "IC_kwDOCVq1mM5Zcvnr",
        "user": {
            "login": "fdwr",
            "id": 1809166,
            "node_id": "MDQ6VXNlcjE4MDkxNjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1809166?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fdwr",
            "html_url": "https://github.com/fdwr",
            "followers_url": "https://api.github.com/users/fdwr/followers",
            "following_url": "https://api.github.com/users/fdwr/following{/other_user}",
            "gists_url": "https://api.github.com/users/fdwr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fdwr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fdwr/subscriptions",
            "organizations_url": "https://api.github.com/users/fdwr/orgs",
            "repos_url": "https://api.github.com/users/fdwr/repos",
            "events_url": "https://api.github.com/users/fdwr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fdwr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-07T22:55:04Z",
        "updated_at": "2023-04-07T22:58:44Z",
        "author_association": "MEMBER",
        "body": "I'm much more familiar with the C++ API over the Python projections, but just searching for the `ortvalue_from_numpy` function name in the codebase, it doesn't look as generically agnostic to EP as most other places and branches with `#ifdef`'s ðŸ¤”:\r\n\r\n[\\onnxruntime\\python\\onnxruntime_pybind_ortvalue.cc](https://github.com/microsoft/onnxruntime/blob/666aff56a4a079cfece596d4c697020c66e3c94a/onnxruntime/python/onnxruntime_pybind_ortvalue.cc#L32)\r\n\r\n``` C++\r\nvoid addOrtValueMethods(pybind11::module& m) {\r\n  py::class_<OrtValue> ortvalue_binding(m, \"OrtValue\");\r\n  ortvalue_binding\r\n      // Factory method to create an OrtValue (Tensor) from the given Numpy object\r\n      // The Tensor allocates and manages its own memory (on the specified device) and copies data from the Numpy data buffer\r\n      .def_static(\"ortvalue_from_numpy\", [](const py::object& array_on_cpu, const OrtDevice& device) {\r\n        if (!IsNumericNumpyArray(array_on_cpu)) {\r\n          throw std::runtime_error(\"Creation of OrtValues is currently only supported from non-string numpy arrays\");\r\n        }\r\n\r\n        // The tensor's memory is allocated on the CPU\r\n        if (device.Type() == OrtDevice::CPU) {\r\n...\r\n        } else if (device.Type() == OrtDevice::GPU) {\r\n        // The tensor's memory is allocated on CUDA\r\n#ifdef USE_CUDA\r\n          if (!IsCudaDeviceIdValid(logging::LoggingManager::DefaultLogger(), device.Id())) {\r\n            throw std::runtime_error(\"The provided device id doesn't match any available GPUs on the machine.\");\r\n          }\r\n  ...\r\n          CreateGenericMLValue(nullptr, GetCudaAllocator(device.Id()), \"\", array_on_cpu, ml_value.get(), true, false, CpuToCudaMemCpy);\r\n#elif USE_ROCM\r\n      if (!IsRocmDeviceIdValid(logging::LoggingManager::DefaultLogger(), device.Id())) {\r\n        throw std::runtime_error(\"The provided device id doesn't match any available GPUs on the machine.\");\r\n      }\r\n...\r\n```\r\n\r\n@yuslepukhin: This `ortvalue_from_numpy` function appears tightly bound to its EP's. I wonder if it can be done more generically/extensibly for future EP additions?\r\n@bmartin35: What do you think about adding an #ifdef for DML here?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1500707307/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]