[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1129373107",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1129373107",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1129373107,
        "node_id": "IC_kwDOCVq1mM5DUN2z",
        "user": {
            "login": "RyanUnderhill",
            "id": 38674843,
            "node_id": "MDQ6VXNlcjM4Njc0ODQz",
            "avatar_url": "https://avatars.githubusercontent.com/u/38674843?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RyanUnderhill",
            "html_url": "https://github.com/RyanUnderhill",
            "followers_url": "https://api.github.com/users/RyanUnderhill/followers",
            "following_url": "https://api.github.com/users/RyanUnderhill/following{/other_user}",
            "gists_url": "https://api.github.com/users/RyanUnderhill/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RyanUnderhill/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RyanUnderhill/subscriptions",
            "organizations_url": "https://api.github.com/users/RyanUnderhill/orgs",
            "repos_url": "https://api.github.com/users/RyanUnderhill/repos",
            "events_url": "https://api.github.com/users/RyanUnderhill/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RyanUnderhill/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-17T22:24:28Z",
        "updated_at": "2022-05-17T22:24:28Z",
        "author_association": "MEMBER",
        "body": "As long as the ORT object destructors are being called (which call the C OrtApi::Release* methods) the memory is released immediately to the OS. There is no garbage collection inside of Onnxruntime.\r\n\r\nCan you give more details of what you're looking at? Which OS, and which memory usage metric?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1129373107/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1131436406",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1131436406",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1131436406,
        "node_id": "IC_kwDOCVq1mM5DcFl2",
        "user": {
            "login": "beelabcloud",
            "id": 69347885,
            "node_id": "MDQ6VXNlcjY5MzQ3ODg1",
            "avatar_url": "https://avatars.githubusercontent.com/u/69347885?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beelabcloud",
            "html_url": "https://github.com/beelabcloud",
            "followers_url": "https://api.github.com/users/beelabcloud/followers",
            "following_url": "https://api.github.com/users/beelabcloud/following{/other_user}",
            "gists_url": "https://api.github.com/users/beelabcloud/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beelabcloud/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beelabcloud/subscriptions",
            "organizations_url": "https://api.github.com/users/beelabcloud/orgs",
            "repos_url": "https://api.github.com/users/beelabcloud/repos",
            "events_url": "https://api.github.com/users/beelabcloud/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beelabcloud/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-19T09:03:50Z",
        "updated_at": "2022-05-19T17:37:25Z",
        "author_association": "NONE",
        "body": "> session = new Ort::Session(*env, model_data, (size_t)model_data_length, sessionOptions);\r\n\r\nIf you do new, then you are responsible to call delete. `Ort` obejcts are designed to be instantiated by value, so the destructors are automatically called and clean up native resources. They are very much like smart pointers. One usually does not call new on, say `std::unique_ptr`.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1131436406/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1131482789",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1131482789",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1131482789,
        "node_id": "IC_kwDOCVq1mM5DcQ6l",
        "user": {
            "login": "beelabcloud",
            "id": 69347885,
            "node_id": "MDQ6VXNlcjY5MzQ3ODg1",
            "avatar_url": "https://avatars.githubusercontent.com/u/69347885?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beelabcloud",
            "html_url": "https://github.com/beelabcloud",
            "followers_url": "https://api.github.com/users/beelabcloud/followers",
            "following_url": "https://api.github.com/users/beelabcloud/following{/other_user}",
            "gists_url": "https://api.github.com/users/beelabcloud/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beelabcloud/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beelabcloud/subscriptions",
            "organizations_url": "https://api.github.com/users/beelabcloud/orgs",
            "repos_url": "https://api.github.com/users/beelabcloud/repos",
            "events_url": "https://api.github.com/users/beelabcloud/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beelabcloud/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-19T09:49:01Z",
        "updated_at": "2022-05-19T09:49:01Z",
        "author_association": "NONE",
        "body": "By the way, the comsumption is not caused by the inference, and the program can run flawlessly for a few days, and not eating any extra memory. Thank you very much. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1131482789/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1131529534",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1131529534",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1131529534,
        "node_id": "IC_kwDOCVq1mM5DccU-",
        "user": {
            "login": "beelabcloud",
            "id": 69347885,
            "node_id": "MDQ6VXNlcjY5MzQ3ODg1",
            "avatar_url": "https://avatars.githubusercontent.com/u/69347885?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beelabcloud",
            "html_url": "https://github.com/beelabcloud",
            "followers_url": "https://api.github.com/users/beelabcloud/followers",
            "following_url": "https://api.github.com/users/beelabcloud/following{/other_user}",
            "gists_url": "https://api.github.com/users/beelabcloud/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beelabcloud/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beelabcloud/subscriptions",
            "organizations_url": "https://api.github.com/users/beelabcloud/orgs",
            "repos_url": "https://api.github.com/users/beelabcloud/repos",
            "events_url": "https://api.github.com/users/beelabcloud/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beelabcloud/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-19T10:40:19Z",
        "updated_at": "2022-05-19T10:40:19Z",
        "author_association": "NONE",
        "body": "bool MessageLite::ParseFrom(const T& input) {\r\n  if (flags & kParse) Clear();\r\n  constexpr bool alias = (flags & kMergeWithAliasing) != 0;\r\n  return internal::MergeFromImpl<alias>(input, this, flags);\r\n}\r\nIs it that Kparse means keep and parse?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1131529534/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1131535040",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1131535040",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1131535040,
        "node_id": "IC_kwDOCVq1mM5DcdrA",
        "user": {
            "login": "beelabcloud",
            "id": 69347885,
            "node_id": "MDQ6VXNlcjY5MzQ3ODg1",
            "avatar_url": "https://avatars.githubusercontent.com/u/69347885?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beelabcloud",
            "html_url": "https://github.com/beelabcloud",
            "followers_url": "https://api.github.com/users/beelabcloud/followers",
            "following_url": "https://api.github.com/users/beelabcloud/following{/other_user}",
            "gists_url": "https://api.github.com/users/beelabcloud/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beelabcloud/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beelabcloud/subscriptions",
            "organizations_url": "https://api.github.com/users/beelabcloud/orgs",
            "repos_url": "https://api.github.com/users/beelabcloud/repos",
            "events_url": "https://api.github.com/users/beelabcloud/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beelabcloud/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-19T10:46:46Z",
        "updated_at": "2022-05-19T10:46:46Z",
        "author_association": "NONE",
        "body": "Should I call ::google::protobuf::ShutdownProtobufLibrary() for each cycle?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1131535040/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1132015376",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1132015376",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1132015376,
        "node_id": "IC_kwDOCVq1mM5DeS8Q",
        "user": {
            "login": "tianleiwu",
            "id": 30328909,
            "node_id": "MDQ6VXNlcjMwMzI4OTA5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30328909?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tianleiwu",
            "html_url": "https://github.com/tianleiwu",
            "followers_url": "https://api.github.com/users/tianleiwu/followers",
            "following_url": "https://api.github.com/users/tianleiwu/following{/other_user}",
            "gists_url": "https://api.github.com/users/tianleiwu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tianleiwu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tianleiwu/subscriptions",
            "organizations_url": "https://api.github.com/users/tianleiwu/orgs",
            "repos_url": "https://api.github.com/users/tianleiwu/repos",
            "events_url": "https://api.github.com/users/tianleiwu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tianleiwu/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-19T17:55:08Z",
        "updated_at": "2022-05-19T17:55:26Z",
        "author_association": "MEMBER",
        "body": "> Is it that Kparse means keep and parse?\r\n\r\nI search kParse and kMergeWithAliasing in onnxruntime code, there is no result found. Is the example code from OnnxRuntime?\r\n\r\n> Should I call ::google::protobuf::ShutdownProtobufLibrary() for each cycle?\r\n\r\nI have no experience on this so I cannot answer it. You can have a try. It might introduce other issue.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1132015376/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 1,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1132365973",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1132365973",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1132365973,
        "node_id": "IC_kwDOCVq1mM5DfoiV",
        "user": {
            "login": "beelabcloud",
            "id": 69347885,
            "node_id": "MDQ6VXNlcjY5MzQ3ODg1",
            "avatar_url": "https://avatars.githubusercontent.com/u/69347885?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beelabcloud",
            "html_url": "https://github.com/beelabcloud",
            "followers_url": "https://api.github.com/users/beelabcloud/followers",
            "following_url": "https://api.github.com/users/beelabcloud/following{/other_user}",
            "gists_url": "https://api.github.com/users/beelabcloud/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beelabcloud/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beelabcloud/subscriptions",
            "organizations_url": "https://api.github.com/users/beelabcloud/orgs",
            "repos_url": "https://api.github.com/users/beelabcloud/repos",
            "events_url": "https://api.github.com/users/beelabcloud/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beelabcloud/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-20T01:55:37Z",
        "updated_at": "2022-05-20T01:55:37Z",
        "author_association": "NONE",
        "body": "Hi tianlei, thank you. \"kParse\" is argument used in the model loading codes in file \"cmake\\external\\protobuf\\src\\google\\protobuf\\message_lite.h\".\r\n::google::protobuf::ShutdownProtobufLibrary() would shudwon Protobuf entirely as I read. I'm pretty sure that the model data array is retained, and it would be recycled by the OS garbage collection after a long time idle. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1132365973/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1411139354",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1411139354",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1411139354,
        "node_id": "IC_kwDOCVq1mM5UHEca",
        "user": {
            "login": "ns-wxin",
            "id": 93163807,
            "node_id": "U_kgDOBY2RHw",
            "avatar_url": "https://avatars.githubusercontent.com/u/93163807?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ns-wxin",
            "html_url": "https://github.com/ns-wxin",
            "followers_url": "https://api.github.com/users/ns-wxin/followers",
            "following_url": "https://api.github.com/users/ns-wxin/following{/other_user}",
            "gists_url": "https://api.github.com/users/ns-wxin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ns-wxin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ns-wxin/subscriptions",
            "organizations_url": "https://api.github.com/users/ns-wxin/orgs",
            "repos_url": "https://api.github.com/users/ns-wxin/repos",
            "events_url": "https://api.github.com/users/ns-wxin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ns-wxin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-31T22:12:38Z",
        "updated_at": "2023-01-31T22:12:38Z",
        "author_association": "NONE",
        "body": "I rebuilt onnxruntime with ASAN and got the following leak stack. Wonder if anyone shed some lights on how to release the memory correctly.\r\n\r\nIndirect leak of 8 byte(s) in 1 object(s) allocated from:\r\n    #0 0x7f22934ff758 in operator new(unsigned long) ../../../../libsanitizer/asan/asan_new_delete.cpp:95\r\n    #1 0x7f228698e5c2 in void std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> >::_M_realloc_insert<onnxruntime::NodeArg const* const&>(__gnu_cxx::__normal_iterator<onnxruntime::NodeArg const**, std::vector<onnxruntime::NodeArg const*, std::allocator<onnxruntime::NodeArg const*> > >, onnxruntime::NodeArg const* const&) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x25f05c2)\r\n    #2 0x7f22869cd4c7 in onnxruntime::Graph::InitializeStateFromModelFileGraphProto() (/opt/3p/lib/libonnxruntime.so.1.12.1+0x262f4c7)\r\n    #3 0x7f2286a28311 in onnxruntime::Graph::Graph(onnxruntime::Model const&, onnx::GraphProto*, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > > const&, long, std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection>, onnxruntime::Graph*, onnxruntime::Node const*, onnxruntime::logging::Logger const&, bool) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x268a311)\r\n    #4 0x7f2286a29949 in onnxruntime::Graph::Graph(onnxruntime::Model const&, onnx::GraphProto*, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > > const&, long, std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection>, onnxruntime::logging::Logger const&, bool) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x268b949)\r\n    #5 0x7f2286ae3bfe in onnxruntime::Model::Model(onnx::ModelProto&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::list<std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection>, std::allocator<std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection> > > const*, onnxruntime::logging::Logger const&, onnxruntime::ModelOptions const&) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x2745bfe)\r\n    #6 0x7f2286ae81f7 in onnxruntime::Model::Load(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<onnxruntime::Model>&, std::__cxx11::list<std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection>, std::allocator<std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection> > > const*, onnxruntime::logging::Logger const&, onnxruntime::ModelOptions const&) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x274a1f7)\r\n    #7 0x7f2286ae8af4 in onnxruntime::common::Status onnxruntime::LoadModelHelper<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, onnxruntime::LoadModel<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<onnxruntime::Model>&, std::__cxx11::list<std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection>, std::allocator<std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection> > > const*, onnxruntime::logging::Logger const&, onnxruntime::ModelOptions const&)::{lambda(int)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, onnxruntime::LoadModel<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<onnxruntime::Model>&, std::__cxx11::list<std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection>, std::allocator<std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection> > > const*, onnxruntime::logging::Logger const&, onnxruntime::ModelOptions const&)::{lambda(int)#1}) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x274aaf4)\r\n    #8 0x7f2286ae97cc in onnxruntime::Model::Load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<onnxruntime::Model>&, std::__cxx11::list<std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection>, std::allocator<std::shared_ptr<onnxruntime::IOnnxRuntimeOpSchemaCollection> > > const*, onnxruntime::logging::Logger const&, onnxruntime::ModelOptions const&) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x274b7cc)\r\n    #9 0x7f2284b2aec2 in std::_Function_handler<onnxruntime::common::Status (std::shared_ptr<onnxruntime::Model>&), onnxruntime::InferenceSession::Load<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::{lambda(std::shared_ptr<onnxruntime::Model>&)#1}>::_M_invoke(std::_Any_data const&, std::shared_ptr<onnxruntime::Model>&) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x78cec2)\r\n    #10 0x7f2284b7a3e5 in onnxruntime::InferenceSession::Load(std::function<onnxruntime::common::Status (std::shared_ptr<onnxruntime::Model>&)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x7dc3e5)\r\n    #11 0x7f2284b7b582 in onnxruntime::common::Status onnxruntime::InferenceSession::Load<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x7dd582)\r\n    #12 0x7f2284ba2002 in onnxruntime::InferenceSession::Load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x804002)\r\n    #13 0x7f2284a051b6 in (anonymous namespace)::CreateSessionAndLoadModel(OrtSessionOptions const*, OrtEnv const*, char const*, void const*, unsigned long, std::unique_ptr<onnxruntime::InferenceSession, std::default_delete<onnxruntime::InferenceSession> >&) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x6671b6)\r\n    #14 0x7f2284a08364 in OrtApis::CreateSession(OrtEnv const*, char const*, OrtSessionOptions const*, OrtSession**) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x66a364)\r\n    #15 0x5f0bdb in Ort::Session::Session(Ort::Env&, char const*, Ort::SessionOptions const&) /opt/3p/include/onnxruntime/core/session/onnxruntime_cxx_inline.h:596\r\n    #16 0x5f0bdb in fingerprint::ImageFingerprintGenerator::loadModel(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) ../libs/dlp/fp20svc/src/ImageFingerprintGenerator.cpp:84\r\n    #17 0x5f2945 in fingerprint::ImageFingerprintGenerator::ImageFingerprintGenerator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) ../libs/dlp/fp20svc/src/ImageFingerprintGenerator.cpp:43\r\n    #18 0x45b619 in void std::_Construct<fingerprint::ImageFingerprintGenerator, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(fingerprint::ImageFingerprintGenerator*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/stl_construct.h:119\r\n    #19 0x45b619 in void std::allocator_traits<std::allocator<void> >::construct<fingerprint::ImageFingerprintGenerator, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(std::allocator<void>&, fingerprint::ImageFingerprintGenerator*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/alloc_traits.h:635\r\n    #20 0x45b619 in std::_Sp_counted_ptr_inplace<fingerprint::ImageFingerprintGenerator, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(std::allocator<void>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:604\r\n    #21 0x45b619 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fingerprint::ImageFingerprintGenerator, std::allocator<void>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(fingerprint::ImageFingerprintGenerator*&, std::_Sp_alloc_shared_tag<std::allocator<void> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:971\r\n    #22 0x45b619 in std::__shared_ptr<fingerprint::ImageFingerprintGenerator, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<void>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(std::_Sp_alloc_shared_tag<std::allocator<void> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:1712\r\n    #23 0x45b619 in std::shared_ptr<fingerprint::ImageFingerprintGenerator>::shared_ptr<std::allocator<void>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(std::_Sp_alloc_shared_tag<std::allocator<void> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:464\r\n    #24 0x45b619 in std::shared_ptr<fingerprint::ImageFingerprintGenerator> std::make_shared<fingerprint::ImageFingerprintGenerator, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:1010\r\n    #25 0x45b619 in fingerprint::FingerprintGeneratorPool::FingerprintGeneratorPool(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) ../libs/dlp/fp20svc/ImageFingerprintGenerator.hpp:137\r\n    #26 0x45b619 in void std::_Construct<fingerprint::FingerprintGeneratorPool, int, char const (&) [46], int>(fingerprint::FingerprintGeneratorPool*, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/stl_construct.h:119\r\n    #27 0x45b619 in void std::allocator_traits<std::allocator<void> >::construct<fingerprint::FingerprintGeneratorPool, int, char const (&) [46], int>(std::allocator<void>&, fingerprint::FingerprintGeneratorPool*, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/alloc_traits.h:635\r\n    #28 0x45b619 in std::_Sp_counted_ptr_inplace<fingerprint::FingerprintGeneratorPool, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<int, char const (&) [46], int>(std::allocator<void>, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:604\r\n    #29 0x45b619 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fingerprint::FingerprintGeneratorPool, std::allocator<void>, int, char const (&) [46], int>(fingerprint::FingerprintGeneratorPool*&, std::_Sp_alloc_shared_tag<std::allocator<void> >, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:971\r\n    #30 0x45b619 in std::__shared_ptr<fingerprint::FingerprintGeneratorPool, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<void>, int, char const (&) [46], int>(std::_Sp_alloc_shared_tag<std::allocator<void> >, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:1712\r\n    #31 0x45b619 in std::shared_ptr<fingerprint::FingerprintGeneratorPool>::shared_ptr<std::allocator<void>, int, char const (&) [46], int>(std::_Sp_alloc_shared_tag<std::allocator<void> >, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:464\r\n    #32 0x45b619 in std::shared_ptr<fingerprint::FingerprintGeneratorPool> std::make_shared<fingerprint::FingerprintGeneratorPool, int, char const (&) [46], int>(int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:1010\r\n    #33 0x445036 in __static_initialization_and_destruction_0 ../libs/dlp/fp20svc/test/src/DlpFp20Test.cpp:35\r\n    #34 0x6ccafc in __libc_csu_init (/home/wxin/src/ns/dataplane/obj-asan/dlp_fp20_lib_test+0x6ccafc)",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1411139354/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1411520274",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1411520274",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1411520274,
        "node_id": "IC_kwDOCVq1mM5UIhcS",
        "user": {
            "login": "RyanUnderhill",
            "id": 38674843,
            "node_id": "MDQ6VXNlcjM4Njc0ODQz",
            "avatar_url": "https://avatars.githubusercontent.com/u/38674843?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RyanUnderhill",
            "html_url": "https://github.com/RyanUnderhill",
            "followers_url": "https://api.github.com/users/RyanUnderhill/followers",
            "following_url": "https://api.github.com/users/RyanUnderhill/following{/other_user}",
            "gists_url": "https://api.github.com/users/RyanUnderhill/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RyanUnderhill/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RyanUnderhill/subscriptions",
            "organizations_url": "https://api.github.com/users/RyanUnderhill/orgs",
            "repos_url": "https://api.github.com/users/RyanUnderhill/repos",
            "events_url": "https://api.github.com/users/RyanUnderhill/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RyanUnderhill/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-01T06:12:15Z",
        "updated_at": "2023-02-01T06:12:15Z",
        "author_association": "MEMBER",
        "body": "@ns-wxin Could you use a more recent build? It looks like you're using onnxruntime 1.12.1? Is the leak only 8 bytes?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1411520274/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1412444314",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1412444314",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1412444314,
        "node_id": "IC_kwDOCVq1mM5UMDCa",
        "user": {
            "login": "ns-wxin",
            "id": 93163807,
            "node_id": "U_kgDOBY2RHw",
            "avatar_url": "https://avatars.githubusercontent.com/u/93163807?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ns-wxin",
            "html_url": "https://github.com/ns-wxin",
            "followers_url": "https://api.github.com/users/ns-wxin/followers",
            "following_url": "https://api.github.com/users/ns-wxin/following{/other_user}",
            "gists_url": "https://api.github.com/users/ns-wxin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ns-wxin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ns-wxin/subscriptions",
            "organizations_url": "https://api.github.com/users/ns-wxin/orgs",
            "repos_url": "https://api.github.com/users/ns-wxin/repos",
            "events_url": "https://api.github.com/users/ns-wxin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ns-wxin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-01T17:28:23Z",
        "updated_at": "2023-02-01T17:28:23Z",
        "author_association": "NONE",
        "body": "Yeah. It's 1.12.1. There's various leaks detected such as the following leaking 536 bytes. Looks like the default constructor of SessionOptions allocated some space but not released.  I tried Ort::SessionOptions.release() in my destructor but it didn't seem to get rid of this leak.\r\n\r\nDirect leak of 536 byte(s) in 1 object(s) allocated from:\r\n    #0 0x7f267fc33758 in operator new(unsigned long) ../../../../libsanitizer/asan/asan_new_delete.cpp:95\r\n    #1 0x7f26711d1287 in OrtApis::CreateSessionOptions(OrtSessionOptions**) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x6ff287)\r\n    #2 0x5f24b2 in Ort::SessionOptions::SessionOptions() /opt/3p/include/onnxruntime/core/session/onnxruntime_cxx_inline.h:412\r\n    #3 0x5f24b2 in fingerprint::ImageFingerprintGenerator::ImageFingerprintGenerator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) ../libs/dlp/fp20svc/src/ImageFingerprintGenerator.cpp:40\r\n    #4 0x45b619 in void std::_Construct<fingerprint::ImageFingerprintGenerator, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(fingerprint::ImageFingerprintGenerator*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/stl_construct.h:119\r\n    #5 0x45b619 in void std::allocator_traits<std::allocator<void> >::construct<fingerprint::ImageFingerprintGenerator, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(std::allocator<void>&, fingerprint::ImageFingerprintGenerator*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/alloc_traits.h:635\r\n    #6 0x45b619 in std::_Sp_counted_ptr_inplace<fingerprint::ImageFingerprintGenerator, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(std::allocator<void>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:604\r\n    #7 0x45b619 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fingerprint::ImageFingerprintGenerator, std::allocator<void>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(fingerprint::ImageFingerprintGenerator*&, std::_Sp_alloc_shared_tag<std::allocator<void> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:971\r\n    #8 0x45b619 in std::__shared_ptr<fingerprint::ImageFingerprintGenerator, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<void>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(std::_Sp_alloc_shared_tag<std::allocator<void> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:1712\r\n    #9 0x45b619 in std::shared_ptr<fingerprint::ImageFingerprintGenerator>::shared_ptr<std::allocator<void>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(std::_Sp_alloc_shared_tag<std::allocator<void> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:464\r\n    #10 0x45b619 in std::shared_ptr<fingerprint::ImageFingerprintGenerator> std::make_shared<fingerprint::ImageFingerprintGenerator, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:1010\r\n    #11 0x45b619 in fingerprint::FingerprintGeneratorPool::FingerprintGeneratorPool(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) ../libs/dlp/fp20svc/ImageFingerprintGenerator.hpp:137\r\n    #12 0x45b619 in void std::_Construct<fingerprint::FingerprintGeneratorPool, int, char const (&) [46], int>(fingerprint::FingerprintGeneratorPool*, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/stl_construct.h:119\r\n    #13 0x45b619 in void std::allocator_traits<std::allocator<void> >::construct<fingerprint::FingerprintGeneratorPool, int, char const (&) [46], int>(std::allocator<void>&, fingerprint::FingerprintGeneratorPool*, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/alloc_traits.h:635\r\n    #14 0x45b619 in std::_Sp_counted_ptr_inplace<fingerprint::FingerprintGeneratorPool, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<int, char const (&) [46], int>(std::allocator<void>, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:604\r\n    #15 0x45b619 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fingerprint::FingerprintGeneratorPool, std::allocator<void>, int, char const (&) [46], int>(fingerprint::FingerprintGeneratorPool*&, std::_Sp_alloc_shared_tag<std::allocator<void> >, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:971\r\n    #16 0x45b619 in std::__shared_ptr<fingerprint::FingerprintGeneratorPool, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<void>, int, char const (&) [46], int>(std::_Sp_alloc_shared_tag<std::allocator<void> >, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:1712\r\n    #17 0x45b619 in std::shared_ptr<fingerprint::FingerprintGeneratorPool>::shared_ptr<std::allocator<void>, int, char const (&) [46], int>(std::_Sp_alloc_shared_tag<std::allocator<void> >, int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:464\r\n    #18 0x45b619 in std::shared_ptr<fingerprint::FingerprintGeneratorPool> std::make_shared<fingerprint::FingerprintGeneratorPool, int, char const (&) [46], int>(int&&, char const (&) [46], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:1010\r\n    #19 0x445036 in __static_initialization_and_destruction_0 ../libs/dlp/fp20svc/test/src/DlpFp20Test.cpp:35\r\n    #20 0x6ccafc in __libc_csu_init (/home/wxin/src/ns/dataplane/obj-asan/dlp_fp20_lib_test+0x6ccafc)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1412444314/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1412472553",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/11529#issuecomment-1412472553",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/11529",
        "id": 1412472553,
        "node_id": "IC_kwDOCVq1mM5UMJ7p",
        "user": {
            "login": "ns-wxin",
            "id": 93163807,
            "node_id": "U_kgDOBY2RHw",
            "avatar_url": "https://avatars.githubusercontent.com/u/93163807?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ns-wxin",
            "html_url": "https://github.com/ns-wxin",
            "followers_url": "https://api.github.com/users/ns-wxin/followers",
            "following_url": "https://api.github.com/users/ns-wxin/following{/other_user}",
            "gists_url": "https://api.github.com/users/ns-wxin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ns-wxin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ns-wxin/subscriptions",
            "organizations_url": "https://api.github.com/users/ns-wxin/orgs",
            "repos_url": "https://api.github.com/users/ns-wxin/repos",
            "events_url": "https://api.github.com/users/ns-wxin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ns-wxin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-01T17:48:48Z",
        "updated_at": "2023-02-08T03:20:08Z",
        "author_association": "NONE",
        "body": "Sorry, the un-necessary release() on session caused most of the leak. Now that is fixed, I'm only seeing the leaking when using extensions. Specifically on CustomDomain related code.\r\nThe code looks like the following:\r\n\r\n`TextMLFingerprintGenerator::TextMLFingerprintGenerator(std::string modelFile, int threadNum)\r\n    : m_modelFile(std::move(modelFile)), m_modelThreads(threadNum)\r\n{\r\n    m_modelSession = loadModel(m_modelFile);\r\n    m_memoryInfo = Ort::MemoryInfo::CreateCpu(OrtAllocatorType::OrtArenaAllocator,\r\n                                              OrtMemType::OrtMemTypeDefault);\r\n\r\n    // setting input name for the model\r\n    m_inputName = TEXT_ML_MODEL_INPUT_NAME.c_str();\r\n\r\n    // setting input dimensions\r\n    m_inputDims = {1};\r\n\r\n    // setting output names\r\n    m_outputName = TEXT_ML_MODEL_OUTPUT_NAME.c_str();\r\n    m_outputDims = {1, TEXT_ML_EMBEDDING_LENGTH};\r\n}\r\n\r\nstd::shared_ptr<Ort::Session>\r\nTextMLFingerprintGenerator::loadModel(const std::string &modelFile)\r\n{\r\n    DLOG(1) << \"Loading model: \" << modelFile;\r\n\r\n    m_sessionOptions.SetIntraOpNumThreads(m_modelThreads);\r\n    m_sessionOptions.SetGraphOptimizationLevel(GraphOptimizationLevel::ORT_ENABLE_ALL);\r\n    m_sessionOptions.DisableCpuMemArena();\r\n\r\n    m_sessionOptions.EnableOrtCustomOps();\r\n    std::shared_ptr<Ort::Session> session =\r\n        std::make_shared<Ort::Session>(m_env, modelFile.c_str(), m_sessionOptions);\r\n\r\n    LOG(INFO) << \"Loaded model: \" << modelFile;\r\n    return session;\r\n}`\r\n\r\n==1926430==ERROR: LeakSanitizer: detected memory leaks\r\n\r\nDirect leak of 56 byte(s) in 1 object(s) allocated from:\r\n    #0 0x7fbfdb814758 in operator new(unsigned long) ../../../../libsanitizer/asan/asan_new_delete.cpp:95\r\n    #1 0x7fbfcccd7d42 in OrtApis::CreateCustomOpDomain(char const*, OrtCustomOpDomain**) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x624d42)\r\n    #2 0x7fbfcf3cbb16 in RegisterCustomOps (/opt/3p/lib/libonnxruntime.so.1.12.1+0x2d18b16)\r\n    #3 0x7fbfccce24f0 in OrtApis::EnableOrtCustomOps(OrtSessionOptions*) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x62f4f0)\r\n    #4 0x605318 in Ort::SessionOptions::EnableOrtCustomOps() /opt/3p/include/onnxruntime/core/session/onnxruntime_cxx_inline.h:452\r\n    #5 0x605318 in fingerprint::TextMLFingerprintGenerator::loadModel(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) ../libs/dlp/fp20svc/src/TextMLFingerprintGenerator.cpp:88\r\n    #6 0x606d9a in fingerprint::TextMLFingerprintGenerator::TextMLFingerprintGenerator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int) ../libs/dlp/fp20svc/src/TextMLFingerprintGenerator.cpp:64\r\n    #7 0x458605 in void std::_Construct<fingerprint::TextMLFingerprintGenerator, char const (&) [54], int>(fingerprint::TextMLFingerprintGenerator*, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/stl_construct.h:119\r\n    #8 0x458605 in void std::allocator_traits<std::allocator<void> >::construct<fingerprint::TextMLFingerprintGenerator, char const (&) [54], int>(std::allocator<void>&, fingerprint::TextMLFingerprintGenerator*, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/alloc_traits.h:635\r\n    #9 0x458605 in std::_Sp_counted_ptr_inplace<fingerprint::TextMLFingerprintGenerator, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<char const (&) [54], int>(std::allocator<void>, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:604\r\n    #10 0x458605 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fingerprint::TextMLFingerprintGenerator, std::allocator<void>, char const (&) [54], int>(fingerprint::TextMLFingerprintGenerator*&, std::_Sp_alloc_shared_tag<std::allocator<void> >, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:971\r\n    #11 0x458605 in std::__shared_ptr<fingerprint::TextMLFingerprintGenerator, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<void>, char const (&) [54], int>(std::_Sp_alloc_shared_tag<std::allocator<void> >, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:1712\r\n    #12 0x458605 in std::shared_ptr<fingerprint::TextMLFingerprintGenerator>::shared_ptr<std::allocator<void>, char const (&) [54], int>(std::_Sp_alloc_shared_tag<std::allocator<void> >, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:464\r\n    #13 0x458605 in std::shared_ptr<fingerprint::TextMLFingerprintGenerator> std::make_shared<fingerprint::TextMLFingerprintGenerator, char const (&) [54], int>(char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:1010\r\n    #14 0x44506d in __static_initialization_and_destruction_0 ../libs/dlp/fp20svc/test/src/DlpFp20Test.cpp:39\r\n    #15 0x6cc3dc in __libc_csu_init (/home/wxin/src/ns/dataplane/obj-asan/dlp_fp20_lib_test+0x6cc3dc)\r\n\r\nand \r\n\r\nIndirect leak of 256 byte(s) in 1 object(s) allocated from:\r\n    #0 0x7fbfdb814758 in operator new(unsigned long) ../../../../libsanitizer/asan/asan_new_delete.cpp:95\r\n    #1 0x7fbfcccfa1b2 in void std::vector<OrtCustomOp const*, std::allocator<OrtCustomOp const*> >::_M_realloc_insert<OrtCustomOp const*&>(__gnu_cxx::__normal_iterator<OrtCustomOp const**, std::vector<OrtCustomOp const*, std::allocator<OrtCustomOp const*> > >, OrtCustomOp const*&) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x6471b2)\r\n    #2 0x7fbfcccfa72c in OrtApis::CustomOpDomain_Add(OrtCustomOpDomain*, OrtCustomOp const*) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x64772c)\r\n    #3 0x7fbfcf3cc48f in RegisterCustomOps (/opt/3p/lib/libonnxruntime.so.1.12.1+0x2d1948f)\r\n    #4 0x7fbfccce24f0 in OrtApis::EnableOrtCustomOps(OrtSessionOptions*) (/opt/3p/lib/libonnxruntime.so.1.12.1+0x62f4f0)\r\n    #5 0x605318 in Ort::SessionOptions::EnableOrtCustomOps() /opt/3p/include/onnxruntime/core/session/onnxruntime_cxx_inline.h:452\r\n    #6 0x605318 in fingerprint::TextMLFingerprintGenerator::loadModel(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) ../libs/dlp/fp20svc/src/TextMLFingerprintGenerator.cpp:88\r\n    #7 0x606d9a in fingerprint::TextMLFingerprintGenerator::TextMLFingerprintGenerator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int) ../libs/dlp/fp20svc/src/TextMLFingerprintGenerator.cpp:64\r\n    #8 0x458605 in void std::_Construct<fingerprint::TextMLFingerprintGenerator, char const (&) [54], int>(fingerprint::TextMLFingerprintGenerator*, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/stl_construct.h:119\r\n    #9 0x458605 in void std::allocator_traits<std::allocator<void> >::construct<fingerprint::TextMLFingerprintGenerator, char const (&) [54], int>(std::allocator<void>&, fingerprint::TextMLFingerprintGenerator*, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/alloc_traits.h:635\r\n    #10 0x458605 in std::_Sp_counted_ptr_inplace<fingerprint::TextMLFingerprintGenerator, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<char const (&) [54], int>(std::allocator<void>, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:604\r\n    #11 0x458605 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fingerprint::TextMLFingerprintGenerator, std::allocator<void>, char const (&) [54], int>(fingerprint::TextMLFingerprintGenerator*&, std::_Sp_alloc_shared_tag<std::allocator<void> >, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:971\r\n    #12 0x458605 in std::__shared_ptr<fingerprint::TextMLFingerprintGenerator, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<void>, char const (&) [54], int>(std::_Sp_alloc_shared_tag<std::allocator<void> >, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr_base.h:1712\r\n    #13 0x458605 in std::shared_ptr<fingerprint::TextMLFingerprintGenerator>::shared_ptr<std::allocator<void>, char const (&) [54], int>(std::_Sp_alloc_shared_tag<std::allocator<void> >, char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:464\r\n    #14 0x458605 in std::shared_ptr<fingerprint::TextMLFingerprintGenerator> std::make_shared<fingerprint::TextMLFingerprintGenerator, char const (&) [54], int>(char const (&) [54], int&&) /opt/gcc-12/include/c++/12.2.0/bits/shared_ptr.h:1010\r\n    #15 0x44506d in __static_initialization_and_destruction_0 ../libs/dlp/fp20svc/test/src/DlpFp20Test.cpp:39\r\n    #16 0x6cc3dc in __libc_csu_init (/home/wxin/src/ns/dataplane/obj-asan/dlp_fp20_lib_test+0x6cc3dc)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1412472553/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]