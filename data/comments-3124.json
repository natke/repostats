[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/593667957",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-593667957",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3124",
        "id": 593667957,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzY2Nzk1Nw==",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-02T23:01:06Z",
        "updated_at": "2020-03-02T23:01:06Z",
        "author_association": "MEMBER",
        "body": "onnxruntime doesn't support CMake [find_package](https://cmake.org/cmake/help/latest/command/find_package.html) yet. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/593667957/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/625881468",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-625881468",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3124",
        "id": 625881468,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTg4MTQ2OA==",
        "user": {
            "login": "jgbradley1",
            "id": 654554,
            "node_id": "MDQ6VXNlcjY1NDU1NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/654554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jgbradley1",
            "html_url": "https://github.com/jgbradley1",
            "followers_url": "https://api.github.com/users/jgbradley1/followers",
            "following_url": "https://api.github.com/users/jgbradley1/following{/other_user}",
            "gists_url": "https://api.github.com/users/jgbradley1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jgbradley1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jgbradley1/subscriptions",
            "organizations_url": "https://api.github.com/users/jgbradley1/orgs",
            "repos_url": "https://api.github.com/users/jgbradley1/repos",
            "events_url": "https://api.github.com/users/jgbradley1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jgbradley1/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-08T15:50:57Z",
        "updated_at": "2020-05-08T15:50:57Z",
        "author_association": "MEMBER",
        "body": "I second this request.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/625881468/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/660435075",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-660435075",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3124",
        "id": 660435075,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQzNTA3NQ==",
        "user": {
            "login": "stale[bot]",
            "id": 26384082,
            "node_id": "MDM6Qm90MjYzODQwODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stale%5Bbot%5D",
            "html_url": "https://github.com/apps/stale",
            "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2020-07-18T06:15:56Z",
        "updated_at": "2020-07-18T06:15:56Z",
        "author_association": "NONE",
        "body": "This issue has been automatically marked as stale due to inactivity and will be closed in 7 days if no further activity occurs. If further support is needed, please provide an update and/or more details.\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/660435075/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/663818275",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-663818275",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3124",
        "id": 663818275,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzgxODI3NQ==",
        "user": {
            "login": "stale[bot]",
            "id": 26384082,
            "node_id": "MDM6Qm90MjYzODQwODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stale%5Bbot%5D",
            "html_url": "https://github.com/apps/stale",
            "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2020-07-25T06:40:15Z",
        "updated_at": "2020-07-25T06:40:15Z",
        "author_association": "NONE",
        "body": "This issue has been automatically closed due to inactivity. Please reactivate if further support is needed.\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/663818275/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/676239644",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-676239644",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3124",
        "id": 676239644,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjIzOTY0NA==",
        "user": {
            "login": "jcarius",
            "id": 7710306,
            "node_id": "MDQ6VXNlcjc3MTAzMDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7710306?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcarius",
            "html_url": "https://github.com/jcarius",
            "followers_url": "https://api.github.com/users/jcarius/followers",
            "following_url": "https://api.github.com/users/jcarius/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcarius/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcarius/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcarius/subscriptions",
            "organizations_url": "https://api.github.com/users/jcarius/orgs",
            "repos_url": "https://api.github.com/users/jcarius/repos",
            "events_url": "https://api.github.com/users/jcarius/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcarius/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-19T12:06:32Z",
        "updated_at": "2020-08-19T12:06:32Z",
        "author_association": "NONE",
        "body": "Hi all,\r\nfor those facing the same issue, I can provide two exemplary solutions that work for Ubuntu (18.04). The second one might be applicable cross-plattform, but I have not tested this.\r\n\r\n**A) The hacky way via linux environment variables**\r\nDownload the latest [linux release](https://github.com/microsoft/onnxruntime/releases) and extract the archive. Copy over the include and lib directory contents into a folder structure of your choice, for example under `/home/<USERNAME>/.local/include` and `/home/<USERNAME>/.local/lib`, respectively . If this folder is not automatically checked by the linker, then export the environment variables\r\n`export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/<USERNAME>/.local/lib`\r\n`export LIBRARY_PATH=$LIBRARY_PATH:/home/<USERNAME>/.local/lib`\r\nsuch that the shared library is found during link and runtime. If the headers are not discovered automatically, add a corresonding `include_directories` directive in your `CMakeLists.txt`. Finally, your target should `target_link_libraries` against `onnxruntime`.\r\n\r\n**B) Create libraryConfig.cmake to enable `find_package(onnxruntime)`**\r\nThis solution is much cleaner and does not require messing up the shared library paths nor a global installation. Again, extract the release into something like `/home/<USERNAME>/.local/include` and `/home/<USERNAME>/.local/lib`. Then, add `onnxruntimeConfig.cmake` under `/home/<USERNAME>/.local/share/cmake/onnxruntime`. Once `/home/<USERNAME>/.local/share/cmake` is on your `CMAKE_PREFIX_PATH` one can simply `find_package(onnxruntime)` and link the corresponding targets against `${onnxruntime_LIBRARIES}`.\r\n\r\nIf the maintainers are interested, I can create a PR with the Cmake configuration. For the time being, I'm pasting `onnxruntimeConfig.cmake` below:\r\n\r\n```\r\n# This will define the following variables:\r\n#   onnxruntime_FOUND        -- True if the system has the onnxruntime library\r\n#   onnxruntime_INCLUDE_DIRS -- The include directories for onnxruntime\r\n#   onnxruntime_LIBRARIES    -- Libraries to link against\r\n#   onnxruntime_CXX_FLAGS    -- Additional (required) compiler flags\r\n\r\ninclude(FindPackageHandleStandardArgs)\r\n\r\n# Assume we are in <install-prefix>/share/cmake/onnxruntime/onnxruntimeConfig.cmake\r\nget_filename_component(CMAKE_CURRENT_LIST_DIR \"${CMAKE_CURRENT_LIST_FILE}\" PATH)\r\nget_filename_component(onnxruntime_INSTALL_PREFIX \"${CMAKE_CURRENT_LIST_DIR}/../../../\" ABSOLUTE)\r\n\r\nset(onnxruntime_INCLUDE_DIRS ${onnxruntime_INSTALL_PREFIX}/include)\r\nset(onnxruntime_LIBRARIES onnxruntime)\r\nset(onnxruntime_CXX_FLAGS \"\") # no flags needed\r\n\r\n\r\nfind_library(onnxruntime_LIBRARY onnxruntime\r\n    PATHS \"${onnxruntime_INSTALL_PREFIX}/lib\"\r\n)\r\n\r\nadd_library(onnxruntime SHARED IMPORTED)\r\nset_property(TARGET onnxruntime PROPERTY IMPORTED_LOCATION \"${onnxruntime_LIBRARY}\")\r\nset_property(TARGET onnxruntime PROPERTY INTERFACE_INCLUDE_DIRECTORIES \"${onnxruntime_INCLUDE_DIRS}\")\r\nset_property(TARGET onnxruntime PROPERTY INTERFACE_COMPILE_OPTIONS \"${onnxruntime_CXX_FLAGS}\")\r\n\r\nfind_package_handle_standard_args(onnxruntime DEFAULT_MSG onnxruntime_LIBRARY onnxruntime_INCLUDE_DIRS)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/676239644/reactions",
            "total_count": 25,
            "+1": 21,
            "-1": 0,
            "laugh": 0,
            "hooray": 4,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/741306124",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-741306124",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3124",
        "id": 741306124,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc0MTMwNjEyNA==",
        "user": {
            "login": "WilliamTambellini",
            "id": 109458,
            "node_id": "MDQ6VXNlcjEwOTQ1OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/109458?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/WilliamTambellini",
            "html_url": "https://github.com/WilliamTambellini",
            "followers_url": "https://api.github.com/users/WilliamTambellini/followers",
            "following_url": "https://api.github.com/users/WilliamTambellini/following{/other_user}",
            "gists_url": "https://api.github.com/users/WilliamTambellini/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/WilliamTambellini/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/WilliamTambellini/subscriptions",
            "organizations_url": "https://api.github.com/users/WilliamTambellini/orgs",
            "repos_url": "https://api.github.com/users/WilliamTambellini/repos",
            "events_url": "https://api.github.com/users/WilliamTambellini/events{/privacy}",
            "received_events_url": "https://api.github.com/users/WilliamTambellini/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-12-09T00:24:18Z",
        "updated_at": "2020-12-09T00:24:18Z",
        "author_association": "CONTRIBUTOR",
        "body": "@snnn A script like onnxruntimeConfig.cmake is today the StateOftheArt practive for any library to cleanly integrate with any other project using cmake. I would be ok to prepare a PR to integrate it in the onnxrt master unless @jcarius would prefer to.\r\nWould you mind reopening at least that ticket ?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/741306124/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/741599837",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-741599837",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3124",
        "id": 741599837,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc0MTU5OTgzNw==",
        "user": {
            "login": "jcarius",
            "id": 7710306,
            "node_id": "MDQ6VXNlcjc3MTAzMDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7710306?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcarius",
            "html_url": "https://github.com/jcarius",
            "followers_url": "https://api.github.com/users/jcarius/followers",
            "following_url": "https://api.github.com/users/jcarius/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcarius/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcarius/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcarius/subscriptions",
            "organizations_url": "https://api.github.com/users/jcarius/orgs",
            "repos_url": "https://api.github.com/users/jcarius/repos",
            "events_url": "https://api.github.com/users/jcarius/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcarius/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-12-09T07:53:04Z",
        "updated_at": "2020-12-09T07:53:04Z",
        "author_association": "NONE",
        "body": "@WilliamTambellini thank you for picking this up and please go ahead, I don't have the time at the moment to make a clean PR.\r\n\r\nApart from the `onnxruntimeConfig.cmake` pasted above, it probably makes sense to also install a `onnxruntimeVersion.cmake` in the same directory, something like this:\r\n\r\n```\r\nset(PACKAGE_VERSION \"1.4.0\")\r\n\r\n# Check whether the requested PACKAGE_FIND_VERSION is compatible\r\nif(\"${PACKAGE_VERSION}\" VERSION_LESS \"${PACKAGE_FIND_VERSION}\")\r\n  set(PACKAGE_VERSION_COMPATIBLE FALSE)\r\nelse()\r\n  set(PACKAGE_VERSION_COMPATIBLE TRUE)\r\n  if(\"${PACKAGE_VERSION}\" VERSION_EQUAL \"${PACKAGE_FIND_VERSION}\")\r\n    set(PACKAGE_VERSION_EXACT TRUE)\r\n  endif()\r\nendif()\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/741599837/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/974723489",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-974723489",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3124",
        "id": 974723489,
        "node_id": "IC_kwDOCVq1mM46GRmh",
        "user": {
            "login": "prateek9623",
            "id": 17100687,
            "node_id": "MDQ6VXNlcjE3MTAwNjg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/17100687?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/prateek9623",
            "html_url": "https://github.com/prateek9623",
            "followers_url": "https://api.github.com/users/prateek9623/followers",
            "following_url": "https://api.github.com/users/prateek9623/following{/other_user}",
            "gists_url": "https://api.github.com/users/prateek9623/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/prateek9623/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/prateek9623/subscriptions",
            "organizations_url": "https://api.github.com/users/prateek9623/orgs",
            "repos_url": "https://api.github.com/users/prateek9623/repos",
            "events_url": "https://api.github.com/users/prateek9623/events{/privacy}",
            "received_events_url": "https://api.github.com/users/prateek9623/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-20T23:00:14Z",
        "updated_at": "2021-11-20T23:00:14Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hi all, \r\nI have created \"Findonnxruntime.cmake\" to help with this issue, \r\n```cmake \r\n# Find onnxruntime library\r\n#\r\n# usage:\r\n#   find_package(onnxruntime REQUIRED)\r\n# if wants to check for particular execution provider:\r\n#   find_package(onnxruntime REQUIRED COMPONENTS onnxruntime_providers_<PROVIDER_NAME>)\r\n#   find_package(onnxruntime REQUIRED COMPONENTS onnxruntime_providers_cuda onnxruntime_providers_tensorrt)\r\n# tested with cuda and tensorrt\r\n#\r\n#\r\n# Note: This file only search libs of execution providers, not their dependencies \r\n#\r\n\r\ninclude(FindPackageHandleStandardArgs)\r\n# checking if onnxruntime_ROOT contain cmake find_package compatible config\r\nfile(GLOB __cmake_config_file \"${onnxruntime_ROOT}/lib/cmake/onnxruntime/onnxruntimeConfig.cmake\")\r\nLIST(LENGTH __cmake_config_file __cmake_config_file_count)\r\nif(__cmake_config_file_count GREATER 0)\r\n  set(ARGS \"\")\r\n  if(${onnxruntime_FIND_VERSION})\r\n    list(APPEND ARGS ${onnxruntime_FIND_VERSION})\r\n  endif()\r\n  if(${onnxruntime_FIND_VERSION_EXACT})\r\n    list(APPEND ARGS \"EXACT\")\r\n  endif()\r\n  if (${onnxruntime_FIND_QUIET})\r\n    list(APPEND ARGS \"QUIET\")\r\n  elseif (${onnxruntime_FIND_REQUIRED})\r\n    list(APPEND ARGS \"REQUIRED\")\r\n  endif()\r\n  if(onnxruntime_FIND_COMPONENTS)\r\n    list(APPEND ARGS \"COMPONENTS\" ${onnxruntime_FIND_COMPONENTS})\r\n  endif()\r\n  # recalling find_package with args but with specified path\r\n  find_package(onnxruntime ${ARGS} CONFIG PATHS ${onnxruntime_ROOT})\r\nelse()\r\n  # checking if onnxruntime_ROOT contain nuget package\r\n  file(GLOB __nupkg_file \"${onnxruntime_ROOT}/Microsoft.ML.OnnxRuntime.*.nupkg\")\r\n  LIST(LENGTH __nupkg_file __nuget_file_count)\r\n  if(__nuget_file_count GREATER 0)\r\n    list (GET __nupkg_file 0 __nupkg_file)\r\n    STRING(REGEX MATCH \"[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" onnxruntime_VERSION \"${__nupkg_file}\")\r\n    message(STATUS \"Loading using nuget\")\r\n\r\n    set(ORT_INCLUDE_DIR \"${onnxruntime_ROOT}/build/native/include/\")\r\n    if(WIN32)\r\n      set(ORT_LIBRARY_DIR \"${onnxruntime_ROOT}/runtimes/win-x64/native/\")\r\n    elseif(UNIX)\r\n      set(ORT_LIBRARY_DIR \"${onnxruntime_ROOT}/runtimes/linux-x64/native/\")\r\n    else()\r\n      message(FATAL_ERROR \"Nuget package only support Win and linux\")\r\n    endif()\r\n    set(onnxruntime_FOUND FALSE)\r\n    if(EXISTS ${ORT_INCLUDE_DIR} AND EXISTS ${ORT_LIBRARY_DIR})\r\n      set(onnxruntime_FOUND TRUE)\r\n    endif()\r\n    if(onnxruntime_FOUND)\r\n      add_library(onnxruntime::onnxruntime SHARED IMPORTED)\r\n      set_target_properties(onnxruntime::onnxruntime PROPERTIES \r\n        IMPORTED_CONFIGURATIONS RELEASE\r\n        INTERFACE_INCLUDE_DIRECTORIES \"${ORT_INCLUDE_DIR}\"\r\n        )\r\n      if(WIN32)\r\n        set_target_properties(onnxruntime::onnxruntime PROPERTIES\r\n          IMPORTED_IMPLIB \"${ORT_LIBRARY_DIR}onnxruntime.lib\"\r\n          IMPORTED_LOCATION \"${ORT_LIBRARY_DIR}onnxruntime.dll\"\r\n        )\r\n      elseif(UNIX AND NOT APPLE)\r\n        set_target_properties(onnxruntime::onnxruntime PROPERTIES IMPORTED_LOCATION \"${ORT_LIBRARY_DIR}libonnxruntime.so\")\r\n      endif()\r\n    endif()\r\n  elseif(EXISTS \"${onnxruntime_ROOT}/bin\" AND EXISTS \"${onnxruntime_ROOT}/include\" AND EXISTS \"${onnxruntime_ROOT}/lib\")\r\n    set(ORT_INCLUDE_DIR \"${onnxruntime_ROOT}/include/\")\r\n    set(ORT_RUNTIME_DIR \"${onnxruntime_ROOT}/bin/\")\r\n    set(ORT_LIBRARY_DIR \"${onnxruntime_ROOT}/lib/\")\r\n    set(onnxruntime_FOUND TRUE)\r\n    add_library(onnxruntime::onnxruntime SHARED IMPORTED)\r\n    set_target_properties(onnxruntime::onnxruntime PROPERTIES \r\n      IMPORTED_CONFIGURATIONS RELEASE\r\n      INTERFACE_INCLUDE_DIRECTORIES \"${ORT_INCLUDE_DIR}\"\r\n      )\r\n    if(WIN32)\r\n      set_target_properties(onnxruntime::onnxruntime PROPERTIES\r\n        IMPORTED_IMPLIB \"${ORT_LIBRARY_DIR}onnxruntime.lib\"\r\n        IMPORTED_LOCATION \"${ORT_RUNTIME_DIR}onnxruntime.dll\"\r\n      )\r\n    elseif(UNIX AND NOT APPLE)\r\n      set_target_properties(onnxruntime::onnxruntime PROPERTIES IMPORTED_LOCATION \"${ORT_LIBRARY_DIR}libonnxruntime.so\")\r\n    endif()\r\n  endif()\r\n  if(onnxruntime_FOUND)\r\n    function(import_providers provider_name)\r\n      if(WIN32)\r\n        set(lib_path \"${ORT_LIBRARY_DIR}onnxruntime_providers_${provider_name}.dll\")\r\n      elseif(UNIX AND NOT APPLE)\r\n        set(lib_path \"${ORT_LIBRARY_DIR}libonnxruntime_providers_${provider_name}.so\")\r\n      endif()\r\n      if(EXISTS ${lib_path})\r\n          add_library(onnxruntime::onnxruntime_providers_${provider_name} MODULE IMPORTED)\r\n          set_target_properties(onnxruntime::onnxruntime_providers_${provider_name} PROPERTIES \r\n            IMPORTED_CONFIGURATIONS RELEASE\r\n            INTERFACE_INCLUDE_DIRECTORIES ${ORT_INCLUDE_DIR}\r\n            IMPORTED_LOCATION ${lib_path}\r\n          )\r\n        set(onnxruntime_onnxruntime_providers_${provider_name}_FOUND TRUE PARENT_SCOPE)\r\n      endif()\r\n    endfunction(import_providers)\r\n    set(ORT_PROVIDERS cuda;tensorrt)\r\n    foreach(__component ${ORT_PROVIDERS})\r\n      import_providers(${__component})\r\n    endforeach()\r\n    find_package_handle_standard_args(\r\n      onnxruntime\r\n      REQUIRED_VARS onnxruntime_ROOT \r\n      FOUND_VAR onnxruntime_FOUND\r\n      VERSION_VAR onnxruntime_VERSION\r\n      HANDLE_COMPONENTS\r\n    )\r\n  endif()\r\nendif()\r\n````\r\nIt can be used as a cmake module to find onnxruntime, and I have tested it with onnxruntime current cmake install package, NuGet package, and cmake package config file.\r\nI have also created a PR to support cmake package config file creation automatically #8919 ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/974723489/reactions",
            "total_count": 6,
            "+1": 6,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1445911077",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-1445911077",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3124",
        "id": 1445911077,
        "node_id": "IC_kwDOCVq1mM5WLtol",
        "user": {
            "login": "lucasjinreal",
            "id": 21303438,
            "node_id": "MDQ6VXNlcjIxMzAzNDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/21303438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lucasjinreal",
            "html_url": "https://github.com/lucasjinreal",
            "followers_url": "https://api.github.com/users/lucasjinreal/followers",
            "following_url": "https://api.github.com/users/lucasjinreal/following{/other_user}",
            "gists_url": "https://api.github.com/users/lucasjinreal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lucasjinreal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lucasjinreal/subscriptions",
            "organizations_url": "https://api.github.com/users/lucasjinreal/orgs",
            "repos_url": "https://api.github.com/users/lucasjinreal/repos",
            "events_url": "https://api.github.com/users/lucasjinreal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lucasjinreal/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-27T08:34:10Z",
        "updated_at": "2023-02-27T08:34:10Z",
        "author_association": "NONE",
        "body": "any moredern way to use this?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1445911077/reactions",
            "total_count": 4,
            "+1": 4,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1592247414",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-1592247414",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/3124",
        "id": 1592247414,
        "node_id": "IC_kwDOCVq1mM5e58R2",
        "user": {
            "login": "developer239",
            "id": 14946081,
            "node_id": "MDQ6VXNlcjE0OTQ2MDgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14946081?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/developer239",
            "html_url": "https://github.com/developer239",
            "followers_url": "https://api.github.com/users/developer239/followers",
            "following_url": "https://api.github.com/users/developer239/following{/other_user}",
            "gists_url": "https://api.github.com/users/developer239/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/developer239/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/developer239/subscriptions",
            "organizations_url": "https://api.github.com/users/developer239/orgs",
            "repos_url": "https://api.github.com/users/developer239/repos",
            "events_url": "https://api.github.com/users/developer239/events{/privacy}",
            "received_events_url": "https://api.github.com/users/developer239/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-06-15T02:29:38Z",
        "updated_at": "2023-06-15T02:29:38Z",
        "author_association": "NONE",
        "body": "@lucasjinreal \r\nI have minimalistic (no extra cmake file) working example here:\r\n\r\n- MacOS: https://github.com/developer239/yolo-cmake-opencv-onnx-cpp\r\n- Windows: https://github.com/developer239/yolo-cmake-opencv-onnx-cpp/tree/feat/windows\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1592247414/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]