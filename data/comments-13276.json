[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1275696389",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13276#issuecomment-1275696389",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13276",
        "id": 1275696389,
        "node_id": "IC_kwDOCVq1mM5MCZUF",
        "user": {
            "login": "fdwr",
            "id": 1809166,
            "node_id": "MDQ6VXNlcjE4MDkxNjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1809166?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fdwr",
            "html_url": "https://github.com/fdwr",
            "followers_url": "https://api.github.com/users/fdwr/followers",
            "following_url": "https://api.github.com/users/fdwr/following{/other_user}",
            "gists_url": "https://api.github.com/users/fdwr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fdwr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fdwr/subscriptions",
            "organizations_url": "https://api.github.com/users/fdwr/orgs",
            "repos_url": "https://api.github.com/users/fdwr/repos",
            "events_url": "https://api.github.com/users/fdwr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fdwr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-12T07:12:42Z",
        "updated_at": "2022-10-12T07:12:42Z",
        "author_association": "MEMBER",
        "body": "> but DML crashes when trying to load the models.\r\n\r\nDo you have the error message or any more details?\r\n\r\n> Try to load a model using DML in a machine with no graphics card.\r\n\r\nInteresting. Does it have no GPU at all, or an older one that doesn't support compute shaders? That would make a difference for potential recommendations.\r\n\r\n> I suspect GetAvailableProviders just give the list of runtimes linked into the program.\r\n\r\nThat's what it sounds like in the documentation: 'Queries all the execution providers supported in the native onnxruntime shared library'.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1275696389/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1275725738",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13276#issuecomment-1275725738",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13276",
        "id": 1275725738,
        "node_id": "IC_kwDOCVq1mM5MCgeq",
        "user": {
            "login": "vpenades",
            "id": 5433822,
            "node_id": "MDQ6VXNlcjU0MzM4MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5433822?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vpenades",
            "html_url": "https://github.com/vpenades",
            "followers_url": "https://api.github.com/users/vpenades/followers",
            "following_url": "https://api.github.com/users/vpenades/following{/other_user}",
            "gists_url": "https://api.github.com/users/vpenades/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vpenades/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vpenades/subscriptions",
            "organizations_url": "https://api.github.com/users/vpenades/orgs",
            "repos_url": "https://api.github.com/users/vpenades/repos",
            "events_url": "https://api.github.com/users/vpenades/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vpenades/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-12T07:39:05Z",
        "updated_at": "2022-10-12T08:25:31Z",
        "author_association": "NONE",
        "body": "The stacktrace of the exception is:\r\n```\r\nMicrosoft.ML.OnnxRuntime.OnnxRuntimeException : [ErrorCode:RuntimeException] D:\\a\\_work\\1\\s\\onnxruntime\\core\\providers\\dml\\dml_provider_factory.cc(124)\\onnxruntime.DLL!00007FFE04385AFA: (caller: 00007FFE04385B47) Exception(1) tid(25c0) 80070057 The parameter is incorrect.\r\n\r\n   at Microsoft.ML.OnnxRuntime.NativeApiStatus.VerifySuccess(IntPtr nativeStatus)\r\n   at Microsoft.ML.OnnxRuntime.SessionOptions.AppendExecutionProvider_DML(Int32 deviceId)\r\n   at Tests.GlobalSetup._ConfigureDML(SessionOptions options) in C:\\xxxxxxxxxxxxxx\\_RegisterOnnxProviders.cs:line 40\r\n   at Microsoft.ML.OnnxRuntime.SessionOptionsContainer.ApplyConfiguration(SessionOptions options, String configuration, Boolean useDefaultAsFallback)\r\n   at Microsoft.ML.OnnxRuntime.SessionOptionsContainer.Create(String configuration, Boolean useDefaultAsFallback)\r\n```\r\n\r\nSo it's throwing the exception when it calls AppendExecutionProvider_DML ....  so I guess the obvious solution would by to wrap the code with a try-catch  and do the fallback just there.\r\n\r\nNotice that the exception is being thrown within a registered configuration, so in there I can have the fallback... but ideally, a better solution would be to register the configurations based on some fallback logic _head of time_.\r\n\r\nBut, given that AppendExecutionProvider_DML would likely fail, then it should not be listed as an available provider?\r\n\r\nChanging the behavior of GetAvailableProviders  would be controversial, so I would suggest a `GetReadyToRunProviders();`\r\n\r\nAnyway, I think it's worth to clarify the provider fallback best practices, because OnnxRuntime is beginning to be used in end user products, and developers might not have access to all possible hardware that would require testing.\r\n\r\nRegarding the machine where we run the unit tests, it's a normal desktop machine. It has an integrated graphics card, most probably a basic IntelHD. What's probably different is that it runs Windows Server Essentials as operating system.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1275725738/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1276807045",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13276#issuecomment-1276807045",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13276",
        "id": 1276807045,
        "node_id": "IC_kwDOCVq1mM5MGoeF",
        "user": {
            "login": "fdwr",
            "id": 1809166,
            "node_id": "MDQ6VXNlcjE4MDkxNjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1809166?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fdwr",
            "html_url": "https://github.com/fdwr",
            "followers_url": "https://api.github.com/users/fdwr/followers",
            "following_url": "https://api.github.com/users/fdwr/following{/other_user}",
            "gists_url": "https://api.github.com/users/fdwr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fdwr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fdwr/subscriptions",
            "organizations_url": "https://api.github.com/users/fdwr/orgs",
            "repos_url": "https://api.github.com/users/fdwr/repos",
            "events_url": "https://api.github.com/users/fdwr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fdwr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-12T22:43:29Z",
        "updated_at": "2022-10-12T22:43:29Z",
        "author_association": "MEMBER",
        "body": "> Microsoft.ML.OnnxRuntime.OnnxRuntimeException ... dml_provider_factory.cc(124)\\onnxruntime.DLL\r\n> it runs Windows Server Essentials as operating system.\r\n\r\nBased on the [line number 124](https://github.com/microsoft/onnxruntime/blob/main/onnxruntime/core/providers/dml/dml_provider_factory.cc#L124)...\r\n\r\n```\r\nORT_THROW_HR_IF(E_INVALIDARG, IsSoftwareAdapter(adapter.Get()));\r\n```\r\n\r\n...the device_id you're passing to `AppendExecutionProvider_DML` is a software adapter (just passing 0 I presume?). I'm not familiar with the Server Essentials SKU to know whether the software adapter index comes first (0) which might be deliberate since the screen output wouldn't go anywhere anyway, and whether the integrated one comes second (assuming it's available), but it's definitely possible to check this beforehand using a few calls to DXGI (`EnumAdapters1` and `IDXGIAdapter1::GetDesc1`, like what `IsSoftwareAdapter` is doing).",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1276807045/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1276816779",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13276#issuecomment-1276816779",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13276",
        "id": 1276816779,
        "node_id": "IC_kwDOCVq1mM5MGq2L",
        "user": {
            "login": "fdwr",
            "id": 1809166,
            "node_id": "MDQ6VXNlcjE4MDkxNjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1809166?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fdwr",
            "html_url": "https://github.com/fdwr",
            "followers_url": "https://api.github.com/users/fdwr/followers",
            "following_url": "https://api.github.com/users/fdwr/following{/other_user}",
            "gists_url": "https://api.github.com/users/fdwr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fdwr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fdwr/subscriptions",
            "organizations_url": "https://api.github.com/users/fdwr/orgs",
            "repos_url": "https://api.github.com/users/fdwr/repos",
            "events_url": "https://api.github.com/users/fdwr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fdwr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-12T23:00:05Z",
        "updated_at": "2022-10-12T23:06:01Z",
        "author_association": "MEMBER",
        "body": "> Changing the behavior of GetAvailableProviders would be controversial, so I would suggest a GetReadyToRunProviders();\r\n\r\nFor ORT API changes, I'd see what folks on ORT core think (I just work on the DML EP) like @Pranavsharma or @skottmckay. Pranav/Skott, the user request is an API that checks whether the given EP is runnable on the machine without error. This could apply to {DML, CUDA, OpenVino...} where ORT may have been *built* with selected EPs, but the machine might not be able to *run* that EP (e.g. no capable GPU, or missing dependencies like the CUDA libraries).\r\n\r\n> Anyway, I think it's worth to clarify the provider fallback best practices\r\n\r\nAgree. Pranav/Skott, what is ORT's current advice is for cases like this? For C++, you just check the OrtStatusPtr for success of `AppendExecutionProvider_DML `. For C#, it's evidently a bit noisier in throwing exceptions that would need to be caught. Another possibility (in lieu of an ORT \"precheck\" function) is for the app to check before trying to add an EP (e.g. a DXGI call to check adapter support before trying to use the DML EP, or some equivalent CUDA API's before trying to use the CUDA EP), and these calls are trivial in C++ but more awkward in C#. I generally think \"precheck\" functions are brittle, trying to keep code paths in sync of the actual initialization logic with logic that tries to predict whether initialization may or may not succeed, and it may ultimately give a false sense of comfort anyway because some failures can still occur later even if the precheck function expects it *should* succeed. Perfwise, precheck functions may need to do nearly as much work as the actual initialization function would eventually perform too.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1276816779/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1276915518",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13276#issuecomment-1276915518",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13276",
        "id": 1276915518,
        "node_id": "IC_kwDOCVq1mM5MHC8-",
        "user": {
            "login": "pranavsharma",
            "id": 2732907,
            "node_id": "MDQ6VXNlcjI3MzI5MDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2732907?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pranavsharma",
            "html_url": "https://github.com/pranavsharma",
            "followers_url": "https://api.github.com/users/pranavsharma/followers",
            "following_url": "https://api.github.com/users/pranavsharma/following{/other_user}",
            "gists_url": "https://api.github.com/users/pranavsharma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pranavsharma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pranavsharma/subscriptions",
            "organizations_url": "https://api.github.com/users/pranavsharma/orgs",
            "repos_url": "https://api.github.com/users/pranavsharma/repos",
            "events_url": "https://api.github.com/users/pranavsharma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pranavsharma/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-13T01:35:56Z",
        "updated_at": "2022-10-13T01:35:56Z",
        "author_association": "MEMBER",
        "body": "Currently, the onus of adding the appropriate EP lies on the ORT user. The Append* functions don't really do much; they merely append factory functions to session options. Later when the session is created, the CreateProvider method is invoked on these factories to create the relevant providers and then added to the session. If CreateProvider throws an exception, we abort everything and return an error. It appears that we [don't](https://github.com/microsoft/onnxruntime/blob/5dae0c477d6c70d91952fb2c11fad37301cde7ae/onnxruntime/core/session/onnxruntime_c_api.cc#L687-L692) even check if the provider ptr returned is NULL.\r\n\r\nThis is not just about fallback to CPU. More generally should we continue with creating and adding other provider instances if an exception is thrown by one of the providers is a policy decision. Since we rely on users to attach the appropriate EP based on their hardware, it becomes important for us to notify them if this EP wasn't successfully added to the session. We could potentially add a flag to session options that says ignore failed EP creation, but it might be confusing if the user is expecting the model to perform well on (say) DML but it didn't since DML was never added and I doubt any warning log messages will be read. We'll give it some thought. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1276915518/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1277163174",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13276#issuecomment-1277163174",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13276",
        "id": 1277163174,
        "node_id": "IC_kwDOCVq1mM5MH_am",
        "user": {
            "login": "vpenades",
            "id": 5433822,
            "node_id": "MDQ6VXNlcjU0MzM4MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5433822?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vpenades",
            "html_url": "https://github.com/vpenades",
            "followers_url": "https://api.github.com/users/vpenades/followers",
            "following_url": "https://api.github.com/users/vpenades/following{/other_user}",
            "gists_url": "https://api.github.com/users/vpenades/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vpenades/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vpenades/subscriptions",
            "organizations_url": "https://api.github.com/users/vpenades/orgs",
            "repos_url": "https://api.github.com/users/vpenades/repos",
            "events_url": "https://api.github.com/users/vpenades/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vpenades/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-13T07:35:23Z",
        "updated_at": "2022-10-13T07:35:23Z",
        "author_association": "NONE",
        "body": "> Since we rely on users to attach the appropriate EP based on their hardware\r\n\r\nThat's not exactly true.\r\n\r\nI know my hardware, and I know exactly which providers to attach in my machine.\r\n\r\nBut we're developing a product that's going to be distributed in the wild, so we don't know beforehand which hardware the end users are going to have. We have to _detect it somehow_\r\n\r\nIdeally, we would like to use Cuda, if it fails then fallback to DML, if it fails then fallback to CPU.\r\n\r\nOne decision we took early was to discard Cuda as a valid provider to deliver products in the wild, because it is so much difficult to check whether it's runnable or not in end user's machines.  We did a small trial and we found that 75% of our users were unable to run it because outdated graphics drivers.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1277163174/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1297747835",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13276#issuecomment-1297747835",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13276",
        "id": 1297747835,
        "node_id": "IC_kwDOCVq1mM5NWg97",
        "user": {
            "login": "fdwr",
            "id": 1809166,
            "node_id": "MDQ6VXNlcjE4MDkxNjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1809166?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fdwr",
            "html_url": "https://github.com/fdwr",
            "followers_url": "https://api.github.com/users/fdwr/followers",
            "following_url": "https://api.github.com/users/fdwr/following{/other_user}",
            "gists_url": "https://api.github.com/users/fdwr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fdwr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fdwr/subscriptions",
            "organizations_url": "https://api.github.com/users/fdwr/orgs",
            "repos_url": "https://api.github.com/users/fdwr/repos",
            "events_url": "https://api.github.com/users/fdwr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fdwr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-31T22:08:56Z",
        "updated_at": "2022-10-31T22:08:56Z",
        "author_association": "MEMBER",
        "body": "> We have to detect it somehow\r\n\r\n@vpenades: What will you do in the meantime? Did you end up calling `EnumAdapters1` and `IDXGIAdapter1::GetDesc1`?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1297747835/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1299134437",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13276#issuecomment-1299134437",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13276",
        "id": 1299134437,
        "node_id": "IC_kwDOCVq1mM5Nbzfl",
        "user": {
            "login": "vpenades",
            "id": 5433822,
            "node_id": "MDQ6VXNlcjU0MzM4MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5433822?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vpenades",
            "html_url": "https://github.com/vpenades",
            "followers_url": "https://api.github.com/users/vpenades/followers",
            "following_url": "https://api.github.com/users/vpenades/following{/other_user}",
            "gists_url": "https://api.github.com/users/vpenades/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vpenades/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vpenades/subscriptions",
            "organizations_url": "https://api.github.com/users/vpenades/orgs",
            "repos_url": "https://api.github.com/users/vpenades/repos",
            "events_url": "https://api.github.com/users/vpenades/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vpenades/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-01T20:53:06Z",
        "updated_at": "2022-11-01T20:53:06Z",
        "author_association": "NONE",
        "body": "> What will you do in the meantime?\r\n\r\n@fdwr what I'm doing right now is, when I register the SessionOptions into `SessionOptionsContainer`, I wrap it with a Try-Catch block. If it throws an exception at `AppendExecutionProvider_DML`, the catch block attempts to create a fallback, CPU based SessionOptions object.\r\n\r\nIt makes the code somewhat verbose, and the try catch block might have undersirable side effects, like leaking some memory of the partially created SessionOptions that threw the exception.\r\n\r\nAnother problem is that I am only able to find out if a specific SessionOptions configuration is valid when I create the SessionOptions, immediately before creating an Onnx Session. And at this point I've also initialized many other things that I have to roll back.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1299134437/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]