[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/504895926",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/1284#issuecomment-504895926",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/1284",
        "id": 504895926,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDg5NTkyNg==",
        "user": {
            "login": "pranavsharma",
            "id": 2732907,
            "node_id": "MDQ6VXNlcjI3MzI5MDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2732907?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pranavsharma",
            "html_url": "https://github.com/pranavsharma",
            "followers_url": "https://api.github.com/users/pranavsharma/followers",
            "following_url": "https://api.github.com/users/pranavsharma/following{/other_user}",
            "gists_url": "https://api.github.com/users/pranavsharma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pranavsharma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pranavsharma/subscriptions",
            "organizations_url": "https://api.github.com/users/pranavsharma/orgs",
            "repos_url": "https://api.github.com/users/pranavsharma/repos",
            "events_url": "https://api.github.com/users/pranavsharma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pranavsharma/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-24T07:38:45Z",
        "updated_at": "2019-06-24T07:39:15Z",
        "author_association": "MEMBER",
        "body": "Can you attach the onnx model? How did you convert it? ConstantFill is not an onnx op; see [here](https://github.com/onnx/onnx/blob/master/docs/Operators.md). On the surface, this looks like a converter issue to me.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/504895926/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/504908202",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/1284#issuecomment-504908202",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/1284",
        "id": 504908202,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDkwODIwMg==",
        "user": {
            "login": "tadas-subonis",
            "id": 247218,
            "node_id": "MDQ6VXNlcjI0NzIxOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/247218?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tadas-subonis",
            "html_url": "https://github.com/tadas-subonis",
            "followers_url": "https://api.github.com/users/tadas-subonis/followers",
            "following_url": "https://api.github.com/users/tadas-subonis/following{/other_user}",
            "gists_url": "https://api.github.com/users/tadas-subonis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tadas-subonis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tadas-subonis/subscriptions",
            "organizations_url": "https://api.github.com/users/tadas-subonis/orgs",
            "repos_url": "https://api.github.com/users/tadas-subonis/repos",
            "events_url": "https://api.github.com/users/tadas-subonis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tadas-subonis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-24T08:16:50Z",
        "updated_at": "2019-06-24T08:16:50Z",
        "author_association": "NONE",
        "body": "I've converted it using:\r\n```\r\nimport torch.onnx\r\ndummy_input = torch.randn(1, 3, 32, 500).cuda()\r\ntorch.onnx.export(skorch_model.module, dummy_input, \"ocr_model.onnx\", export_params=True, )\r\n```\r\n\r\nwhere skorch_model.module is a standard torch.nn.Module\r\n\r\nThe ONNX file can be found here:\r\nhttps://send.firefox.com/download/04e009f5f8634e9c/#myOqDeOep_Zb2rHe4vzpRQ\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/504908202/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/504908447",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/1284#issuecomment-504908447",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/1284",
        "id": 504908447,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDkwODQ0Nw==",
        "user": {
            "login": "tadas-subonis",
            "id": 247218,
            "node_id": "MDQ6VXNlcjI0NzIxOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/247218?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tadas-subonis",
            "html_url": "https://github.com/tadas-subonis",
            "followers_url": "https://api.github.com/users/tadas-subonis/followers",
            "following_url": "https://api.github.com/users/tadas-subonis/following{/other_user}",
            "gists_url": "https://api.github.com/users/tadas-subonis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tadas-subonis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tadas-subonis/subscriptions",
            "organizations_url": "https://api.github.com/users/tadas-subonis/orgs",
            "repos_url": "https://api.github.com/users/tadas-subonis/repos",
            "events_url": "https://api.github.com/users/tadas-subonis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tadas-subonis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-24T08:17:32Z",
        "updated_at": "2019-06-24T08:17:32Z",
        "author_association": "NONE",
        "body": "PyTorch's version is pytorch=1.0.0=py3.7_cuda100_cudnn7_1",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/504908447/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/505112820",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/1284#issuecomment-505112820",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/1284",
        "id": 505112820,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTExMjgyMA==",
        "user": {
            "login": "faxu",
            "id": 20780999,
            "node_id": "MDQ6VXNlcjIwNzgwOTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/20780999?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/faxu",
            "html_url": "https://github.com/faxu",
            "followers_url": "https://api.github.com/users/faxu/followers",
            "following_url": "https://api.github.com/users/faxu/following{/other_user}",
            "gists_url": "https://api.github.com/users/faxu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/faxu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/faxu/subscriptions",
            "organizations_url": "https://api.github.com/users/faxu/orgs",
            "repos_url": "https://api.github.com/users/faxu/repos",
            "events_url": "https://api.github.com/users/faxu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/faxu/received_events",
            "type": "User",
            "site_admin": true
        },
        "created_at": "2019-06-24T17:51:30Z",
        "updated_at": "2019-06-24T17:51:59Z",
        "author_association": "MEMBER",
        "body": "CC @spandantiwari\r\n@tadas-subonis can you try with pytorch 1.1 and see if this repros? ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/505112820/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/505174435",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/1284#issuecomment-505174435",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/1284",
        "id": 505174435,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTE3NDQzNQ==",
        "user": {
            "login": "ebarsoum",
            "id": 6488789,
            "node_id": "MDQ6VXNlcjY0ODg3ODk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6488789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ebarsoum",
            "html_url": "https://github.com/ebarsoum",
            "followers_url": "https://api.github.com/users/ebarsoum/followers",
            "following_url": "https://api.github.com/users/ebarsoum/following{/other_user}",
            "gists_url": "https://api.github.com/users/ebarsoum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ebarsoum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ebarsoum/subscriptions",
            "organizations_url": "https://api.github.com/users/ebarsoum/orgs",
            "repos_url": "https://api.github.com/users/ebarsoum/repos",
            "events_url": "https://api.github.com/users/ebarsoum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ebarsoum/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-24T20:46:37Z",
        "updated_at": "2019-06-24T20:46:37Z",
        "author_association": "NONE",
        "body": "@tadas-subonis  can you try PyTorch 1.1? ConstantFill was an experimental OP that got replaced with ConstantOfShape.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/505174435/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/505354955",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/1284#issuecomment-505354955",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/1284",
        "id": 505354955,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTM1NDk1NQ==",
        "user": {
            "login": "tadas-subonis",
            "id": 247218,
            "node_id": "MDQ6VXNlcjI0NzIxOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/247218?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tadas-subonis",
            "html_url": "https://github.com/tadas-subonis",
            "followers_url": "https://api.github.com/users/tadas-subonis/followers",
            "following_url": "https://api.github.com/users/tadas-subonis/following{/other_user}",
            "gists_url": "https://api.github.com/users/tadas-subonis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tadas-subonis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tadas-subonis/subscriptions",
            "organizations_url": "https://api.github.com/users/tadas-subonis/orgs",
            "repos_url": "https://api.github.com/users/tadas-subonis/repos",
            "events_url": "https://api.github.com/users/tadas-subonis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tadas-subonis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-25T09:01:01Z",
        "updated_at": "2019-06-25T09:01:01Z",
        "author_association": "NONE",
        "body": "You guys were right - after updating to 1.1.0 and re-exporting the model, it works.\r\n\r\nThanks for the help.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/505354955/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/511088028",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/1284#issuecomment-511088028",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/1284",
        "id": 511088028,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTA4ODAyOA==",
        "user": {
            "login": "LJXLJXLJX",
            "id": 29445795,
            "node_id": "MDQ6VXNlcjI5NDQ1Nzk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/29445795?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LJXLJXLJX",
            "html_url": "https://github.com/LJXLJXLJX",
            "followers_url": "https://api.github.com/users/LJXLJXLJX/followers",
            "following_url": "https://api.github.com/users/LJXLJXLJX/following{/other_user}",
            "gists_url": "https://api.github.com/users/LJXLJXLJX/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LJXLJXLJX/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LJXLJXLJX/subscriptions",
            "organizations_url": "https://api.github.com/users/LJXLJXLJX/orgs",
            "repos_url": "https://api.github.com/users/LJXLJXLJX/repos",
            "events_url": "https://api.github.com/users/LJXLJXLJX/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LJXLJXLJX/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-13T04:40:57Z",
        "updated_at": "2019-07-13T04:40:57Z",
        "author_association": "NONE",
        "body": "@tadas-subonis I am sorry to bother, it seems you were working on crnn. I am working on this but get another error\r\n\r\n> RuntimeError: [ONNXRuntimeError] : 1 : GENERAL ERROR : Load model from crnn.onnx failed:[TypeInferenceError] Attribute expected to have a one-dim tensor\r\n\r\nCould you give me any suggestions? Thank you.\r\n\r\n\r\nFollowed is the graph definition.\r\n\r\n```\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.onnx as onnx\r\nfrom global_config import cfg\r\n\r\n\r\n\r\ndef initConvAndLinear(layer):\r\n    nn.init.xavier_normal_(layer.weight)\r\n    nn.init.constant_(layer.bias, 0.1)\r\n\r\ndef initLstm(layer):\r\n    nn.init.xavier_normal_(layer.all_weights[0][0])\r\n    nn.init.xavier_normal_(layer.all_weights[0][1])\r\n    nn.init.xavier_normal_(layer.all_weights[1][0])\r\n    nn.init.xavier_normal_(layer.all_weights[1][1])\r\n\r\n\r\nclass BidirectionalLSTM(nn.Module):\r\n\r\n    def __init__(self, nIn, nHidden, nOut, init=False):\r\n        super(BidirectionalLSTM, self).__init__()\r\n        self.rnn = nn.LSTM(nIn, nHidden, bidirectional=True)\r\n        if init: initLstm(self.rnn)\r\n        self.embedding = nn.Linear(nHidden * 2, nOut)\r\n        if init: initConvAndLinear(self.embedding)\r\n\r\n    def forward(self, input):\r\n        recurrent, _ = self.rnn(input)\r\n        T, b, h = recurrent.size()\r\n        t_rec = recurrent.view(T * b, h)\r\n\r\n        output = self.embedding(t_rec)  # [T * b, nOut]\r\n        output = output.view(T, b, -1)\r\n\r\n        return output\r\n\r\n\r\nclass Net(nn.Module):\r\n    def __init__(self, init=False):\r\n        super(Net, self).__init__()\r\n        self._CNN(init)\r\n        self._RNN(init)\r\n\r\n    def _CNN(self, init):\r\n        self.cnn = nn.Sequential()\r\n\r\n        relu = nn.LeakyReLU(0.2)\r\n        # assume input is (1,3,32,128)\r\n        # conv1\r\n        conv1 = nn.Conv2d(3, 64, (3, 3), 1, 1)\r\n        if init: initConvAndLinear(conv1)\r\n        self.cnn.add_module('conv1', conv1)\r\n        self.cnn.add_module('relu1', relu)\r\n        # (1,64,32,128)\r\n\r\n        # max_pool1 TODO it may be a good idea to replace maxpool with conv\r\n        max_pool1 = nn.MaxPool2d((2, 2), 2)\r\n        self.cnn.add_module('max_pool1', max_pool1)\r\n        # (1,64,16,64)\r\n\r\n        # conv2\r\n        conv2 = nn.Conv2d(64, 128, (3, 3), 1, 1)\r\n        if init: initConvAndLinear(conv2)\r\n        self.cnn.add_module('conv2', conv2)\r\n        self.cnn.add_module('relu2', relu)\r\n        # (1,128,16,64)\r\n\r\n        # max_pool2\r\n        max_pool2 = nn.MaxPool2d((2, 2), 2)\r\n        self.cnn.add_module('max_pool2', max_pool2)\r\n        # (1,128,8,32)\r\n\r\n        # conv3\r\n        conv3 = nn.Conv2d(128, 256, (3, 3), 1, 1)\r\n        if init: initConvAndLinear(conv3)\r\n        self.cnn.add_module('conv3', conv3)\r\n        self.cnn.add_module('relu3', relu)\r\n        # (1,256,8,32)\r\n\r\n        # conv4\r\n        conv4 = nn.Conv2d(256, 256, (3, 3), 1, 1)\r\n        if init: initConvAndLinear(conv4)\r\n        self.cnn.add_module('conv4', conv4)\r\n        self.cnn.add_module('relu4', relu)\r\n        # (1,256,8,32)\r\n\r\n        # max_pool3\r\n        max_pool3 = nn.MaxPool2d((2, 1), (2, 1))\r\n        self.cnn.add_module('max_pool3', max_pool3)\r\n        # (1,256,4,32)\r\n\r\n        # conv5\r\n        conv5 = nn.Conv2d(256, 512, (3, 3), 1, 1)\r\n        if init: initConvAndLinear(conv5)\r\n        self.cnn.add_module('conv5', conv5)\r\n        self.cnn.add_module('relu5', relu)\r\n        # (1,512,4,32)\r\n\r\n        # batch normalization 1\r\n        bn1 = nn.BatchNorm2d(512)\r\n        self.cnn.add_module('bn1', bn1)\r\n        # (1,512,4,32)\r\n\r\n        # conv6\r\n        conv6 = nn.Conv2d(512, 512, (3, 3), 1, 1)\r\n        if init: initConvAndLinear(conv6)\r\n        self.cnn.add_module('conv6', conv6)\r\n        self.cnn.add_module('relu6', relu)\r\n        # (1,512,4,32)\r\n\r\n        # batch normalization 2\r\n        bn2 = nn.BatchNorm2d(512)\r\n        self.cnn.add_module('bn2', bn2)\r\n        # (1,512,4,32)\r\n\r\n        # max_pool4\r\n        max_pool4 = nn.MaxPool2d((2, 1), (2, 1))\r\n        self.cnn.add_module('max_pool4', max_pool4)\r\n        # (1,512,2,32)\r\n\r\n        # conv7\r\n        conv7 = nn.Conv2d(512, 512, (2, 1), (2, 1), 0)\r\n        if init: initConvAndLinear(conv7)\r\n        self.cnn.add_module('conv7', conv7)\r\n        self.cnn.add_module('relu7', relu)\r\n        # (1,512,1,32)\r\n\r\n    def _RNN(self, init):\r\n        self.rnn = nn.Sequential()\r\n        lstm = BidirectionalLSTM(512, cfg.ARCH.HIDDEN_UNIT, 512, init)\r\n        self.rnn.add_module('lstm1', lstm)\r\n        for i in range(2, cfg.ARCH.LSTM_LAYER_NUM):\r\n            lstm = BidirectionalLSTM(512, cfg.ARCH.HIDDEN_UNIT, 512, init)\r\n            self.rnn.add_module('lstm{0}'.format(i), lstm)\r\n\r\n        lstm = BidirectionalLSTM(512, cfg.ARCH.HIDDEN_UNIT, cfg.ARCH.NUM_CLASS, init)\r\n        self.rnn.add_module('lstm{0}'.format(cfg.ARCH.LSTM_LAYER_NUM), lstm)\r\n\r\n    def forward(self, input):\r\n        feature_map = self.cnn(input)\r\n        feature_sequence = torch.squeeze(feature_map, 2).permute(2, 0, 1)\r\n        output = self.rnn(feature_sequence)\r\n        return output\r\n\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/511088028/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]