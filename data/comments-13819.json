[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1334921311",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1334921311",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1334921311,
        "node_id": "IC_kwDOCVq1mM5PkUhf",
        "user": {
            "login": "vacing",
            "id": 6896966,
            "node_id": "MDQ6VXNlcjY4OTY5NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6896966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vacing",
            "html_url": "https://github.com/vacing",
            "followers_url": "https://api.github.com/users/vacing/followers",
            "following_url": "https://api.github.com/users/vacing/following{/other_user}",
            "gists_url": "https://api.github.com/users/vacing/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vacing/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vacing/subscriptions",
            "organizations_url": "https://api.github.com/users/vacing/orgs",
            "repos_url": "https://api.github.com/users/vacing/repos",
            "events_url": "https://api.github.com/users/vacing/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vacing/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T08:50:25Z",
        "updated_at": "2022-12-05T12:25:40Z",
        "author_association": "NONE",
        "body": "The data format of the model is NCHW, but xnnpack prefers NHWC, it seems there are many transpose ops in profiling file.\r\nDespite transpose ops, the conv op itself is not accelerate as desired([2.3x in tflite](https://blog.tensorflow.org/2020/07/accelerating-tensorflow-lite-xnnpack-integration.html)), it seems only 10% compare to wasm version. \r\n\r\nI noticed that ort team added supports to NHWC ops, does it mean ort tend to support both formats?\r\nHope some advices can be given on how to use xnnpack provider ^^ @skottmckay",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1334921311/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335232367",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1335232367",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1335232367,
        "node_id": "IC_kwDOCVq1mM5Plgdv",
        "user": {
            "login": "wejoncy",
            "id": 9417365,
            "node_id": "MDQ6VXNlcjk0MTczNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9417365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wejoncy",
            "html_url": "https://github.com/wejoncy",
            "followers_url": "https://api.github.com/users/wejoncy/followers",
            "following_url": "https://api.github.com/users/wejoncy/following{/other_user}",
            "gists_url": "https://api.github.com/users/wejoncy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wejoncy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wejoncy/subscriptions",
            "organizations_url": "https://api.github.com/users/wejoncy/orgs",
            "repos_url": "https://api.github.com/users/wejoncy/repos",
            "events_url": "https://api.github.com/users/wejoncy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wejoncy/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T13:23:41Z",
        "updated_at": "2022-12-02T13:28:33Z",
        "author_association": "MEMBER",
        "body": "Hi, \r\nIf you don't mind, could you try to build ORT from source with this [branch](https://github.com/microsoft/onnxruntime/tree/jicwen/refactor_eps) and try again?\r\n\r\nHere is the explanation,\r\nXNNPACK used a separate threadpool, and `intra_op_num_threads` in the provider-options would be taking effect.\r\nThe branch I mentioned is trying to build a bridge between them, xnnpack's threadpool can share the intra_thread_num though, it frees you from offering another 'thread-settings'.\r\n\r\nAs for `kOrtSessionOptionsConfigAllowIntraOpSpinning`, I would suggest turning off it by sessionOptions. Otherwise, the two threadpool inside will content and affect eathother.\r\n\r\nBack to the xnnpack in web, it seems we need to add provider_options support.\r\n\r\nHi @fs-eire Could you please help to take a look on how to turn on multi-threading? ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335232367/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338734253",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1338734253",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1338734253,
        "node_id": "IC_kwDOCVq1mM5Py3at",
        "user": {
            "login": "vacing",
            "id": 6896966,
            "node_id": "MDQ6VXNlcjY4OTY5NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6896966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vacing",
            "html_url": "https://github.com/vacing",
            "followers_url": "https://api.github.com/users/vacing/followers",
            "following_url": "https://api.github.com/users/vacing/following{/other_user}",
            "gists_url": "https://api.github.com/users/vacing/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vacing/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vacing/subscriptions",
            "organizations_url": "https://api.github.com/users/vacing/orgs",
            "repos_url": "https://api.github.com/users/vacing/repos",
            "events_url": "https://api.github.com/users/vacing/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vacing/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T04:29:12Z",
        "updated_at": "2022-12-06T04:30:14Z",
        "author_association": "NONE",
        "body": "> As for `kOrtSessionOptionsConfigAllowIntraOpSpinning`, I would suggest turning off it by sessionOptions. Otherwise, the two threadpool inside will content and affect eathother.\r\n\r\nwhen multi-thread enabled in wasm, ort will turn off session thread poll, and use global thread poll instead, so the options set in session option will not work.\r\n```cpp\r\n#if defined(__EMSCRIPTEN_PTHREADS__)\r\n  RETURN_NULLPTR_IF_ERROR(DisablePerSessionThreads, session_options);\r\n#else\r\n  // must disable thread pool when WebAssembly multi-threads support is disabled.\r\n  RETURN_NULLPTR_IF_ERROR(SetIntraOpNumThreads, session_options, 1);\r\n  RETURN_NULLPTR_IF_ERROR(SetSessionExecutionMode, session_options, ORT_SEQUENTIAL);\r\n#endif\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338734253/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338819890",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1338819890",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1338819890,
        "node_id": "IC_kwDOCVq1mM5PzMUy",
        "user": {
            "login": "fs-eire",
            "id": 7679871,
            "node_id": "MDQ6VXNlcjc2Nzk4NzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7679871?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fs-eire",
            "html_url": "https://github.com/fs-eire",
            "followers_url": "https://api.github.com/users/fs-eire/followers",
            "following_url": "https://api.github.com/users/fs-eire/following{/other_user}",
            "gists_url": "https://api.github.com/users/fs-eire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fs-eire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fs-eire/subscriptions",
            "organizations_url": "https://api.github.com/users/fs-eire/orgs",
            "repos_url": "https://api.github.com/users/fs-eire/repos",
            "events_url": "https://api.github.com/users/fs-eire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fs-eire/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T06:13:12Z",
        "updated_at": "2022-12-06T06:13:12Z",
        "author_association": "MEMBER",
        "body": "> > As for `kOrtSessionOptionsConfigAllowIntraOpSpinning`, I would suggest turning off it by sessionOptions. Otherwise, the two threadpool inside will content and affect eathother.\r\n> \r\n> when multi-thread enabled in wasm, ort will turn off session thread poll, and use global thread poll instead, so the options set in session option will not work.\r\n> \r\n> ```c++\r\n> #if defined(__EMSCRIPTEN_PTHREADS__)\r\n>   RETURN_NULLPTR_IF_ERROR(DisablePerSessionThreads, session_options);\r\n> #else\r\n>   // must disable thread pool when WebAssembly multi-threads support is disabled.\r\n>   RETURN_NULLPTR_IF_ERROR(SetIntraOpNumThreads, session_options, 1);\r\n>   RETURN_NULLPTR_IF_ERROR(SetSessionExecutionMode, session_options, ORT_SEQUENTIAL);\r\n> #endif\r\n> ```\r\n\r\nyes. for ort-web, the global threadpool is used and the per-session threadpool is always disabled. i am curious about whether xnnpack threadpool is created and initialized correctly in wasm.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338819890/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338872753",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1338872753",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1338872753,
        "node_id": "IC_kwDOCVq1mM5PzZOx",
        "user": {
            "login": "wejoncy",
            "id": 9417365,
            "node_id": "MDQ6VXNlcjk0MTczNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9417365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wejoncy",
            "html_url": "https://github.com/wejoncy",
            "followers_url": "https://api.github.com/users/wejoncy/followers",
            "following_url": "https://api.github.com/users/wejoncy/following{/other_user}",
            "gists_url": "https://api.github.com/users/wejoncy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wejoncy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wejoncy/subscriptions",
            "organizations_url": "https://api.github.com/users/wejoncy/orgs",
            "repos_url": "https://api.github.com/users/wejoncy/repos",
            "events_url": "https://api.github.com/users/wejoncy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wejoncy/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T06:55:46Z",
        "updated_at": "2022-12-06T06:55:46Z",
        "author_association": "MEMBER",
        "body": "Just discussd with @fs-eire, there is not a easy way to support muti-threading for XNNPACK EP currently. we will support it in the next step and keep here up-to-date of the latest progress.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338872753/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338885155",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1338885155",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1338885155,
        "node_id": "IC_kwDOCVq1mM5PzcQj",
        "user": {
            "login": "vacing",
            "id": 6896966,
            "node_id": "MDQ6VXNlcjY4OTY5NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6896966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vacing",
            "html_url": "https://github.com/vacing",
            "followers_url": "https://api.github.com/users/vacing/followers",
            "following_url": "https://api.github.com/users/vacing/following{/other_user}",
            "gists_url": "https://api.github.com/users/vacing/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vacing/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vacing/subscriptions",
            "organizations_url": "https://api.github.com/users/vacing/orgs",
            "repos_url": "https://api.github.com/users/vacing/repos",
            "events_url": "https://api.github.com/users/vacing/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vacing/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T07:09:40Z",
        "updated_at": "2022-12-06T07:09:40Z",
        "author_association": "NONE",
        "body": "> for ort-web, the global threadpool is used and the per-session threadpool is always disabled\r\n\r\ncould you give more detail about this, why force using global threadpool in ort-web?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338885155/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338896285",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1338896285",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1338896285,
        "node_id": "IC_kwDOCVq1mM5Pze-d",
        "user": {
            "login": "fs-eire",
            "id": 7679871,
            "node_id": "MDQ6VXNlcjc2Nzk4NzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7679871?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fs-eire",
            "html_url": "https://github.com/fs-eire",
            "followers_url": "https://api.github.com/users/fs-eire/followers",
            "following_url": "https://api.github.com/users/fs-eire/following{/other_user}",
            "gists_url": "https://api.github.com/users/fs-eire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fs-eire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fs-eire/subscriptions",
            "organizations_url": "https://api.github.com/users/fs-eire/orgs",
            "repos_url": "https://api.github.com/users/fs-eire/repos",
            "events_url": "https://api.github.com/users/fs-eire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fs-eire/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T07:21:33Z",
        "updated_at": "2022-12-06T07:21:33Z",
        "author_association": "MEMBER",
        "body": "> > for ort-web, the global threadpool is used and the per-session threadpool is always disabled\r\n> \r\n> could you give more detail about this, why force using global threadpool in ort-web?\r\n\r\nBy default, the CPU threadpool is created when the InferenceSession initialize a model. When we work on the first version of ort-web we tested the webassembly threadpool and found it not working correctly - the reason was because the threadpool is not yet ready when we try to use it, and the solution is to initialize the threadpool earlier - so we create a global threadpool when initialize the OrtEnv.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338896285/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338902851",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1338902851",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1338902851,
        "node_id": "IC_kwDOCVq1mM5PzglD",
        "user": {
            "login": "vacing",
            "id": 6896966,
            "node_id": "MDQ6VXNlcjY4OTY5NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6896966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vacing",
            "html_url": "https://github.com/vacing",
            "followers_url": "https://api.github.com/users/vacing/followers",
            "following_url": "https://api.github.com/users/vacing/following{/other_user}",
            "gists_url": "https://api.github.com/users/vacing/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vacing/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vacing/subscriptions",
            "organizations_url": "https://api.github.com/users/vacing/orgs",
            "repos_url": "https://api.github.com/users/vacing/repos",
            "events_url": "https://api.github.com/users/vacing/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vacing/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T07:30:01Z",
        "updated_at": "2022-12-06T07:56:04Z",
        "author_association": "NONE",
        "body": "> the solution is to initialize the threadpool earlier\r\n\r\ndoes it mean ort-web should reuse global threadpool in xnnpack too or create xnn threadpoll when initialize the OrtEnv? \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338902851/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338910992",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1338910992",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1338910992,
        "node_id": "IC_kwDOCVq1mM5PzikQ",
        "user": {
            "login": "vacing",
            "id": 6896966,
            "node_id": "MDQ6VXNlcjY4OTY5NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6896966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vacing",
            "html_url": "https://github.com/vacing",
            "followers_url": "https://api.github.com/users/vacing/followers",
            "following_url": "https://api.github.com/users/vacing/following{/other_user}",
            "gists_url": "https://api.github.com/users/vacing/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vacing/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vacing/subscriptions",
            "organizations_url": "https://api.github.com/users/vacing/orgs",
            "repos_url": "https://api.github.com/users/vacing/repos",
            "events_url": "https://api.github.com/users/vacing/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vacing/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T07:41:07Z",
        "updated_at": "2022-12-06T07:41:07Z",
        "author_association": "NONE",
        "body": "> we will support it in the next step\r\n\r\nis there a schedule or a plan about this, maybe we can paticipate in fixing this issue if you have more important features to develop",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338910992/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338936421",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1338936421",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1338936421,
        "node_id": "IC_kwDOCVq1mM5Pzoxl",
        "user": {
            "login": "fs-eire",
            "id": 7679871,
            "node_id": "MDQ6VXNlcjc2Nzk4NzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7679871?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fs-eire",
            "html_url": "https://github.com/fs-eire",
            "followers_url": "https://api.github.com/users/fs-eire/followers",
            "following_url": "https://api.github.com/users/fs-eire/following{/other_user}",
            "gists_url": "https://api.github.com/users/fs-eire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fs-eire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fs-eire/subscriptions",
            "organizations_url": "https://api.github.com/users/fs-eire/orgs",
            "repos_url": "https://api.github.com/users/fs-eire/repos",
            "events_url": "https://api.github.com/users/fs-eire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fs-eire/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T08:09:34Z",
        "updated_at": "2022-12-06T08:09:34Z",
        "author_association": "MEMBER",
        "body": "the ort-web team will discuss about this. I consider \"enabling multi-threading xnnpack EP on web\" a whole task, which may include several technical items including this one.\r\n\r\nyour help is definitely welcome and appreciated. the basic idea is:\r\n1. in `onnxruntime/core/providers/xnnpack/xnnpack_execution_provider.cc`:\r\n     - use `#if defined(__EMSCRIPTEN_PTHREADS__)` (this macro is only defined when building multi-thread webassembly) to guard code for per-EP threadpool. For multi-thread webassembly, change the code to use a global threadpool; for other build config we keep the existing behavior\r\n     - extract calling to `pthreadpool_create()` to a global or static member function\r\n3. in `onnxruntime/wasm/api.cc`, function `OrtInit()` implementation:\r\n     - add API call to `SetGlobalSpinControl()` ( the equivalent of `kOrtSessionOptionsConfigAllowIntraOpSpinning` applying to global thread pool\r\n     - call the exposed function above to create a threadpool for xnnpack. should only do this when multi-threading + xnnpack EP is specified.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338936421/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338948045",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13819#issuecomment-1338948045",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13819",
        "id": 1338948045,
        "node_id": "IC_kwDOCVq1mM5PzrnN",
        "user": {
            "login": "vacing",
            "id": 6896966,
            "node_id": "MDQ6VXNlcjY4OTY5NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6896966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vacing",
            "html_url": "https://github.com/vacing",
            "followers_url": "https://api.github.com/users/vacing/followers",
            "following_url": "https://api.github.com/users/vacing/following{/other_user}",
            "gists_url": "https://api.github.com/users/vacing/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vacing/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vacing/subscriptions",
            "organizations_url": "https://api.github.com/users/vacing/orgs",
            "repos_url": "https://api.github.com/users/vacing/repos",
            "events_url": "https://api.github.com/users/vacing/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vacing/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T08:20:22Z",
        "updated_at": "2022-12-06T08:22:21Z",
        "author_association": "NONE",
        "body": "> the ort-web team will discuss about this. I consider \"enabling multi-threading xnnpack EP on web\" a whole task, which may include several technical items including this one.\r\n> \r\n> your help is definitely welcome and appreciated. the basic idea is:\r\n> \r\n> 1. in `onnxruntime/core/providers/xnnpack/xnnpack_execution_provider.cc`:\r\n>    \r\n>    * use `#if defined(__EMSCRIPTEN_PTHREADS__)` (this macro is only defined when building multi-thread webassembly) to guard code for per-EP threadpool. For multi-thread webassembly, change the code to use a global threadpool; for other build config we keep the existing behavior\r\n>    * extract calling to `pthreadpool_create()` to a global or static member function\r\n> 2. in `onnxruntime/wasm/api.cc`, function `OrtInit()` implementation:\r\n>    \r\n>    * add API call to `SetGlobalSpinControl()` ( the equivalent of `kOrtSessionOptionsConfigAllowIntraOpSpinning` applying to global thread pool\r\n>    * call the exposed function above to create a threadpool for xnnpack. should only do this when multi-threading + xnnpack EP is specified.\r\n\r\nAwesome, get it !\r\nBy the way, how could we determine xnnpack multithread works well already, are there any any positive or negtive signs?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338948045/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]