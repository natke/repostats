[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374005507",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14157#issuecomment-1374005507",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14157",
        "id": 1374005507,
        "node_id": "IC_kwDOCVq1mM5R5akD",
        "user": {
            "login": "edgchen1",
            "id": 18449977,
            "node_id": "MDQ6VXNlcjE4NDQ5OTc3",
            "avatar_url": "https://avatars.githubusercontent.com/u/18449977?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/edgchen1",
            "html_url": "https://github.com/edgchen1",
            "followers_url": "https://api.github.com/users/edgchen1/followers",
            "following_url": "https://api.github.com/users/edgchen1/following{/other_user}",
            "gists_url": "https://api.github.com/users/edgchen1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/edgchen1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/edgchen1/subscriptions",
            "organizations_url": "https://api.github.com/users/edgchen1/orgs",
            "repos_url": "https://api.github.com/users/edgchen1/repos",
            "events_url": "https://api.github.com/users/edgchen1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/edgchen1/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-06T18:52:05Z",
        "updated_at": "2023-01-06T18:56:02Z",
        "author_association": "MEMBER",
        "body": "`Session::GetInputNameAllocated()` returns a `std::unique_ptr`.\r\n\r\nhttps://github.com/microsoft/onnxruntime/blob/b353e0b41d588605958b03f9a223d10a2fbeb514/include/onnxruntime/core/session/onnxruntime_cxx_api.h#L269\r\nhttps://github.com/microsoft/onnxruntime/blob/b353e0b41d588605958b03f9a223d10a2fbeb514/include/onnxruntime/core/session/onnxruntime_cxx_api.h#L520\r\n\r\nIn this code, a temporary `std::unique_ptr` is created in the loop but a pointer to its memory is stored in `inputNodeNames`. After that loop iteration the memory will no longer be valid.\r\n\r\n```c++\r\n\tfor (int i = 0; i < inputNodesNum; i++) {\r\n\t\tauto temp_input_name = session->GetInputNameAllocated(i, allocator);\r\n\t\tinputNodeNames.push_back(temp_input_name.get());\r\n\t}\r\n```\r\n\r\nYou could store the result of `GetInputNameAllocated()` (e.g., in a `std::vector<AllocatedStringPtr>`) and ensure that the `AllocatedStringPtr` is in scope while you need to access its data to avoid this issue.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374005507/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374017089",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14157#issuecomment-1374017089",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14157",
        "id": 1374017089,
        "node_id": "IC_kwDOCVq1mM5R5dZB",
        "user": {
            "login": "yuslepukhin",
            "id": 11303988,
            "node_id": "MDQ6VXNlcjExMzAzOTg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11303988?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yuslepukhin",
            "html_url": "https://github.com/yuslepukhin",
            "followers_url": "https://api.github.com/users/yuslepukhin/followers",
            "following_url": "https://api.github.com/users/yuslepukhin/following{/other_user}",
            "gists_url": "https://api.github.com/users/yuslepukhin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yuslepukhin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yuslepukhin/subscriptions",
            "organizations_url": "https://api.github.com/users/yuslepukhin/orgs",
            "repos_url": "https://api.github.com/users/yuslepukhin/repos",
            "events_url": "https://api.github.com/users/yuslepukhin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yuslepukhin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-06T19:04:38Z",
        "updated_at": "2023-01-06T19:07:24Z",
        "author_association": "MEMBER",
        "body": "Yes `temp_input_name` is destroyed on every iteration and it deallocates the name. The code is storing a pointer to a freed memory, that is being reused. The reason why the API was changed is because `GetInput/OutputName()` was leaking the raw pointer, it was never deallocated.\r\n\r\nThe code is also leaking floating point input buffers since CreateTensor does not take ownership of the input buffers.\r\n\r\n`Ort::Session` is also allocated on the heap for some reason unlike other objects.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374017089/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374069798",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14157#issuecomment-1374069798",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14157",
        "id": 1374069798,
        "node_id": "IC_kwDOCVq1mM5R5qQm",
        "user": {
            "login": "UNeedCryDear",
            "id": 52729998,
            "node_id": "MDQ6VXNlcjUyNzI5OTk4",
            "avatar_url": "https://avatars.githubusercontent.com/u/52729998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/UNeedCryDear",
            "html_url": "https://github.com/UNeedCryDear",
            "followers_url": "https://api.github.com/users/UNeedCryDear/followers",
            "following_url": "https://api.github.com/users/UNeedCryDear/following{/other_user}",
            "gists_url": "https://api.github.com/users/UNeedCryDear/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/UNeedCryDear/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/UNeedCryDear/subscriptions",
            "organizations_url": "https://api.github.com/users/UNeedCryDear/orgs",
            "repos_url": "https://api.github.com/users/UNeedCryDear/repos",
            "events_url": "https://api.github.com/users/UNeedCryDear/events{/privacy}",
            "received_events_url": "https://api.github.com/users/UNeedCryDear/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-06T20:04:26Z",
        "updated_at": "2023-01-06T20:04:26Z",
        "author_association": "NONE",
        "body": "@edgchen1 \r\n> You could store the result of `GetInputNameAllocated()` (e.g., in a `std::vector<AllocatedStringPtr>`) and ensure that the `AllocatedStringPtr` is in scope while you need to access its data to avoid this issue.<.br>\r\n\r\nI've tried ```std::vector<AllocatedStringPtr>```, but it's the same problem. It doesn't work after only session.run()  once.\r\nBecause there is only one model, and the input and output names are fixed, I don't want to get the input and output names every time forward model, but I want to get them once when I read the model, which will be used later. \r\n\r\n```c++\r\nstring in_name=\"images\";\r\nstring out_name0=\"output0\";\r\nstring out_name1=\"output1\";\r\ninputNodeNames.push_back(in_name.c_str());\r\noutputNodeNames.push_back(out_name0.c_str());\r\noutputNodeNames.push_back(out_name1.c_str());\r\n```\r\nI can get it correctly in this way now, but once a model is changed, the name may change, which will cause some other problems.\r\nIs there any way to achieve this effectï¼Ÿ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374069798/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374100613",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14157#issuecomment-1374100613",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14157",
        "id": 1374100613,
        "node_id": "IC_kwDOCVq1mM5R5xyF",
        "user": {
            "login": "UNeedCryDear",
            "id": 52729998,
            "node_id": "MDQ6VXNlcjUyNzI5OTk4",
            "avatar_url": "https://avatars.githubusercontent.com/u/52729998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/UNeedCryDear",
            "html_url": "https://github.com/UNeedCryDear",
            "followers_url": "https://api.github.com/users/UNeedCryDear/followers",
            "following_url": "https://api.github.com/users/UNeedCryDear/following{/other_user}",
            "gists_url": "https://api.github.com/users/UNeedCryDear/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/UNeedCryDear/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/UNeedCryDear/subscriptions",
            "organizations_url": "https://api.github.com/users/UNeedCryDear/orgs",
            "repos_url": "https://api.github.com/users/UNeedCryDear/repos",
            "events_url": "https://api.github.com/users/UNeedCryDear/events{/privacy}",
            "received_events_url": "https://api.github.com/users/UNeedCryDear/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-06T20:32:30Z",
        "updated_at": "2023-01-06T20:32:30Z",
        "author_association": "NONE",
        "body": "@yuslepukhin \r\n> Yes `temp_input_name` is destroyed on every iteration and it deallocates the name. The code is storing a pointer to a freed memory, that is being reused. The reason why the API was changed is because `GetInput/OutputName()` was leaking the raw pointer, it was never deallocated.</br>\r\n\r\nSince the amount of data I need to infer is large, I don't want to get the input and output names  again every time before running. Is there any way to achieve it?\r\n\r\n> The code is also leaking floating point input buffers since CreateTensor does not take ownership of the input buffers.</br>\r\n\r\nBecause it is analog data, I forget to delete the   temp pointer of each loop. Is it OK to modify it like this?\r\n``` cv::Mat::zeros()```:Simulate reading a  new picture from the disk; \r\n```c++\r\n...\r\nauto memoryInfo = Ort::MemoryInfo::CreateCpu(OrtAllocatorType::OrtDeviceAllocator, OrtMemType::OrtMemTypeCPUOutput);\r\nsize_t input_tensor_length = 640 * 640 * 3;\r\n\tcv::Size input_size(640, 640);\r\n\tfor (int i = 0; i < 10; i++) {\r\n\t\tcv::Mat img = cv::Mat::zeros(input_size, CV_8UC3);//Simulate reading a  new picture from the disk; img=imread(\"new_img_path\");\r\n\t\tMat blob;\r\n\t\tcv::dnn::blobFromImage(img, blob, 1 / 255.0, input_size, Scalar(0, 0, 0), true, false);\r\n\t\tstd::vector<Ort::Value> input_tensors;\r\n\t\tstd::vector<Ort::Value> output_tensors;\r\n\t\tstd::cout << \"################### befor run:##############\" << endl;\r\n\t\tstd::cout << \"input node name:\" << inputNodeNames[0] << endl;\r\n\t\tstd::cout << \"output0 node name:\" << outputNodeNames[0] << endl;\r\n\t\tstd::cout << \"output1 node name:\" << outputNodeNames[1] << endl;\r\n\t\tinput_tensors.push_back(Ort::Value::CreateTensor<float>(\r\n\t\t\tmemoryInfo, (float*)blob.data, input_tensor_length, inputTensorShape.data(),\r\n\t\t\tinputTensorShape.size()));\r\n\t\toutput_tensors = session->Run(Ort::RunOptions{ nullptr },\r\n\t\t\tinputNodeNames.data(),\r\n\t\t\tinput_tensors.data(),\r\n\t\t\tinputNodeNames.size(),\r\n\t\t\toutputNodeNames.data(),\r\n\t\t\toutputNodeNames.size());\r\n\t\tstd::cout << \"################### after run:##############\" << endl;\r\n\t\tstd::cout << \"input node name:\" << inputNodeNames[0] << endl;\r\n\t\tstd::cout << \"output0 node name:\" << outputNodeNames[0] << endl;\r\n\t\tstd::cout << \"output1 node name:\" << outputNodeNames[1] << endl;\r\n\t}\r\n\r\n```\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374100613/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374233651",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14157#issuecomment-1374233651",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14157",
        "id": 1374233651,
        "node_id": "IC_kwDOCVq1mM5R6SQz",
        "user": {
            "login": "edgchen1",
            "id": 18449977,
            "node_id": "MDQ6VXNlcjE4NDQ5OTc3",
            "avatar_url": "https://avatars.githubusercontent.com/u/18449977?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/edgchen1",
            "html_url": "https://github.com/edgchen1",
            "followers_url": "https://api.github.com/users/edgchen1/followers",
            "following_url": "https://api.github.com/users/edgchen1/following{/other_user}",
            "gists_url": "https://api.github.com/users/edgchen1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/edgchen1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/edgchen1/subscriptions",
            "organizations_url": "https://api.github.com/users/edgchen1/orgs",
            "repos_url": "https://api.github.com/users/edgchen1/repos",
            "events_url": "https://api.github.com/users/edgchen1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/edgchen1/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-06T22:58:05Z",
        "updated_at": "2023-01-06T22:58:05Z",
        "author_association": "MEMBER",
        "body": "> I've tried std::vector<AllocatedStringPtr>, but it's the same problem. It doesn't work after only session.run() once.\r\n\r\nTo clarify, in this approach there is an additional vector.\r\n\r\n```c++\r\n\tstd::vector<const char*> inputNodeNames; //\r\n\tstd::vector<AllocatedStringPtr> inputNodeNameAllocatedStrings; // <-- newly added\r\n\t...\r\n\r\n\tauto inputNodesNum = session->GetInputCount();\r\n\tfor (int i = 0; i < inputNodesNum; i++) {\r\n\t\tauto input_name = session->GetInputNameAllocated(i, allocator);\r\n\t\tinputNodeNameAllocatedStrings.push_back(std::move(input_name));\r\n\t\tinputNodeNames.push_back(inputNodeNameAllocatedStrings.back().get());\r\n\t}\r\n```\r\n\r\nSo the memory pointed to by `inputNodeNames[i]` is owned by `inputNodeNameAllocatedStrings[i]`.\r\n\r\n> Because there is only one model, and the input and output names are fixed, I don't want to get the input and output names every time forward model, but I want to get them once when I read the model, which will be used later.\r\n\r\nYou can do this after loading the model before the call(s) to `Session::Run()`.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374233651/reactions",
            "total_count": 3,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374577786",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14157#issuecomment-1374577786",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14157",
        "id": 1374577786,
        "node_id": "IC_kwDOCVq1mM5R7mR6",
        "user": {
            "login": "UNeedCryDear",
            "id": 52729998,
            "node_id": "MDQ6VXNlcjUyNzI5OTk4",
            "avatar_url": "https://avatars.githubusercontent.com/u/52729998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/UNeedCryDear",
            "html_url": "https://github.com/UNeedCryDear",
            "followers_url": "https://api.github.com/users/UNeedCryDear/followers",
            "following_url": "https://api.github.com/users/UNeedCryDear/following{/other_user}",
            "gists_url": "https://api.github.com/users/UNeedCryDear/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/UNeedCryDear/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/UNeedCryDear/subscriptions",
            "organizations_url": "https://api.github.com/users/UNeedCryDear/orgs",
            "repos_url": "https://api.github.com/users/UNeedCryDear/repos",
            "events_url": "https://api.github.com/users/UNeedCryDear/events{/privacy}",
            "received_events_url": "https://api.github.com/users/UNeedCryDear/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-07T19:07:16Z",
        "updated_at": "2023-01-07T19:07:16Z",
        "author_association": "NONE",
        "body": "@edgchen1 Thanks for your help, it works.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1374577786/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]