[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645019035",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4251#issuecomment-645019035",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4251",
        "id": 645019035,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTAxOTAzNQ==",
        "user": {
            "login": "mrry",
            "id": 192142,
            "node_id": "MDQ6VXNlcjE5MjE0Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/192142?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrry",
            "html_url": "https://github.com/mrry",
            "followers_url": "https://api.github.com/users/mrry/followers",
            "following_url": "https://api.github.com/users/mrry/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrry/subscriptions",
            "organizations_url": "https://api.github.com/users/mrry/orgs",
            "repos_url": "https://api.github.com/users/mrry/repos",
            "events_url": "https://api.github.com/users/mrry/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrry/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-16T21:22:43Z",
        "updated_at": "2020-06-16T21:22:43Z",
        "author_association": "CONTRIBUTOR",
        "body": "I think this is a known issue with the Eigen threadpool implementation used in ORT: it wastes a lot of cycles attempting to steal work items from other threads when there's no work to do.\r\n\r\n@tlh20 has PR #4236 in flight, with several improvements to the threadpool implementation. One of its aims is to waste less time in synchronization, so I'd expect it to have a noticeable improvement for small models like the one in this experiment.\r\n\r\nOne caveat though: Tim's optimizations have been primarily focused on improving end-to-end inference latency and bringing it to parity with an OpenMP-based implementation. Part of that involves more aggressive spinning instead of blocking on the per-thread condvar, so it won't always reduce user-mode time.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645019035/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645023813",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4251#issuecomment-645023813",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4251",
        "id": 645023813,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTAyMzgxMw==",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-16T21:34:04Z",
        "updated_at": "2020-06-16T21:34:04Z",
        "author_association": "MEMBER",
        "body": "@mrry Would it be better if user disable the spinning in the threadpool? ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645023813/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645056679",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4251#issuecomment-645056679",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4251",
        "id": 645056679,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTA1NjY3OQ==",
        "user": {
            "login": "migueldeicaza",
            "id": 36863,
            "node_id": "MDQ6VXNlcjM2ODYz",
            "avatar_url": "https://avatars.githubusercontent.com/u/36863?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/migueldeicaza",
            "html_url": "https://github.com/migueldeicaza",
            "followers_url": "https://api.github.com/users/migueldeicaza/followers",
            "following_url": "https://api.github.com/users/migueldeicaza/following{/other_user}",
            "gists_url": "https://api.github.com/users/migueldeicaza/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/migueldeicaza/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/migueldeicaza/subscriptions",
            "organizations_url": "https://api.github.com/users/migueldeicaza/orgs",
            "repos_url": "https://api.github.com/users/migueldeicaza/repos",
            "events_url": "https://api.github.com/users/migueldeicaza/events{/privacy}",
            "received_events_url": "https://api.github.com/users/migueldeicaza/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-16T23:10:30Z",
        "updated_at": "2020-06-16T23:10:30Z",
        "author_association": "CONTRIBUTOR",
        "body": "If there is too much contention in the work stealing something is probably wrong somewhere else, as the main benefit is precisely to remove the centralized locking.\n\nJoe Duffy covered some details about the .net implementation here: http://joeduffyblog.com/2008/08/11/building-a-custom-thread-pool-series-part-2-a-work-stealing-queue/",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645056679/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645177478",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4251#issuecomment-645177478",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4251",
        "id": 645177478,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTE3NzQ3OA==",
        "user": {
            "login": "mrry",
            "id": 192142,
            "node_id": "MDQ6VXNlcjE5MjE0Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/192142?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrry",
            "html_url": "https://github.com/mrry",
            "followers_url": "https://api.github.com/users/mrry/followers",
            "following_url": "https://api.github.com/users/mrry/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrry/subscriptions",
            "organizations_url": "https://api.github.com/users/mrry/orgs",
            "repos_url": "https://api.github.com/users/mrry/repos",
            "events_url": "https://api.github.com/users/mrry/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrry/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-17T06:24:10Z",
        "updated_at": "2020-06-17T06:24:10Z",
        "author_association": "CONTRIBUTOR",
        "body": "(Caveat: Tim knows this area much better than me, and he's been deep in the implementation recently, so his opinion should carry more weight.)\r\n\r\nIf I'm reading the profiler stack trace correctly, it's showing time spent in one of the atomic loads here, on a victim per-thread queue, rather than a centralized lock:\r\n\r\nhttps://github.com/microsoft/onnxruntime/blob/12367a6b11e96e70112026cb7975f7035c7ad0ed/include/onnxruntime/core/platform/EigenNonBlockingThreadPool.h#L400-L404\r\n\r\nTo Changming's point, it probably make sense to disable spinning in the threadpool if ORT is sharing the core with other runnable processes. The original Eigen threadpool implementation was not optimized for shared settings, so it spins instead of blocking on a condition variable. The spinning duration is arbitrary, as this comment from the original authors admits:\r\n\r\nhttps://github.com/microsoft/onnxruntime/blob/edd5855fb7b7ed9e66c48d6fb2816ea7b4b8e068/include/onnxruntime/core/platform/EigenNonBlockingThreadPool.h#L688-L692\r\n\r\nTo disable spinning, you'd have to create a `SessionOptions` object, set `intra_op_param.allow_spinning` to false, and pass the `SessionOptions` to the `TrainingRunner` constructor. However, I'd expect this to increase the end-to-end walltime for training, due to the extra syscalls. Depending on the size of the operations in that training graph, it might make sense to set the intra-op pool size to 1 (i.e. disable intra-op parallelism altogether).",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645177478/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645282703",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4251#issuecomment-645282703",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4251",
        "id": 645282703,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTI4MjcwMw==",
        "user": {
            "login": "tlh20",
            "id": 66783730,
            "node_id": "MDQ6VXNlcjY2NzgzNzMw",
            "avatar_url": "https://avatars.githubusercontent.com/u/66783730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tlh20",
            "html_url": "https://github.com/tlh20",
            "followers_url": "https://api.github.com/users/tlh20/followers",
            "following_url": "https://api.github.com/users/tlh20/following{/other_user}",
            "gists_url": "https://api.github.com/users/tlh20/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tlh20/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tlh20/subscriptions",
            "organizations_url": "https://api.github.com/users/tlh20/orgs",
            "repos_url": "https://api.github.com/users/tlh20/repos",
            "events_url": "https://api.github.com/users/tlh20/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tlh20/received_events",
            "type": "User",
            "site_admin": true
        },
        "created_at": "2020-06-17T10:08:45Z",
        "updated_at": "2020-06-17T10:09:18Z",
        "author_association": "MEMBER",
        "body": "It would be good to re-run the profiling once we've merged https://github.com/microsoft/onnxruntime/pull/4236.  That changes much of the synchronization around work distribution, and if we still see issues here we should dig into them further.\r\n\r\nRight now, there are two reasons why profiles show a lot of time in the work queue functions:\r\n\r\n- Threads are very quick to block, and this interacts poorly when a workload runs a series of short-duration parallel loops.  If the sequential sections are only a few microseconds long, then this is sufficient for most of the worker threads to decide to block.  By the time the threads are woken again, the short loop is already complete.  That leaves the profile showing a lot of work in the threadpool, and not so much productive work in the operators.\r\n\r\n- Threads block/unblock using a LIFO stack hanging off an EventCount object https://github.com/microsoft/onnxruntime/blob/edd5855fb7b7ed9e66c48d6fb2816ea7b4b8e068/include/onnxruntime/core/platform/EigenNonBlockingThreadPool.h#L194  This stack is great for keeping a small number of threads active when the entire pool is not needed (if a workload only creates work for 2 threads, then it's the same 2 blocking and unblocking all the time).  However, it interacts poorly with the way we distribute work to a random thread in some code paths -- we distribute the work, then unblock a thread, and then the thread has to go and hunt across the pool.\r\n\r\nThe PR makes the synchronization patterns more like those in OpenMP runtime systems, with work being pushed to a specific thread, and that thread woken (if needed).  Work stealing is still used to re-balance work.  That is important when multiple concurrent operators push work into the thread pool, or if a worker thread is pre-empted.\r\n\r\nThe question of whether or not to spin is interesting.  With OpenMP, I have seen implementations where OMP_WAIT_POLICY=ACTIVE will cause all of the worker threads to always spin waiting for work.  We avoid doing that in ORT, both today and with the PR, and have threads spin for a configurable duration prior to blocking on a condition variable.  The aim is for that duration to be long enough to keep threads active over any short gaps between parallel sections, while yielding the CPU when there is less work available.  The CPU load can show as higher with spinning because it enables more threads to contribute to running the parallel sections, as opposed to the actual CPU consumption by the spinning itself.\r\n\r\n[There are some older papers with mathematical analysis of how long this duration should be by framing it as a competition between a fixed algorithm in the scheduler and an \"adversary\" trying to be cunning in distributing work at the worse possible moment for the algorithm to be effective -- let me know if you're interested in reading more.]",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645282703/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645284547",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4251#issuecomment-645284547",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4251",
        "id": 645284547,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTI4NDU0Nw==",
        "user": {
            "login": "tlh20",
            "id": 66783730,
            "node_id": "MDQ6VXNlcjY2NzgzNzMw",
            "avatar_url": "https://avatars.githubusercontent.com/u/66783730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tlh20",
            "html_url": "https://github.com/tlh20",
            "followers_url": "https://api.github.com/users/tlh20/followers",
            "following_url": "https://api.github.com/users/tlh20/following{/other_user}",
            "gists_url": "https://api.github.com/users/tlh20/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tlh20/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tlh20/subscriptions",
            "organizations_url": "https://api.github.com/users/tlh20/orgs",
            "repos_url": "https://api.github.com/users/tlh20/repos",
            "events_url": "https://api.github.com/users/tlh20/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tlh20/received_events",
            "type": "User",
            "site_admin": true
        },
        "created_at": "2020-06-17T10:12:42Z",
        "updated_at": "2020-06-17T10:12:42Z",
        "author_association": "MEMBER",
        "body": "> The original Eigen threadpool implementation was not optimized for shared settings, so it spins instead of blocking on a condition variable\r\n\r\nBTW, if I'm reading the code here correctly, the configuration is unusual.  It controls only the behavior of a single thread, as opposed to a spin-then-wait policy across the pool.  Effectively the last thread to block decides, instead, to spin for a short duration.  It makes the pool more responsive to new work when going from completely-idle to 1-task.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/645284547/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/674512566",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4251#issuecomment-674512566",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4251",
        "id": 674512566,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDUxMjU2Ng==",
        "user": {
            "login": "stale[bot]",
            "id": 26384082,
            "node_id": "MDM6Qm90MjYzODQwODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stale%5Bbot%5D",
            "html_url": "https://github.com/apps/stale",
            "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2020-08-16T11:04:43Z",
        "updated_at": "2020-08-16T11:04:43Z",
        "author_association": "NONE",
        "body": "This issue has been automatically marked as stale due to inactivity and will be closed in 7 days if no further activity occurs. If further support is needed, please provide an update and/or more details.\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/674512566/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/711078540",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4251#issuecomment-711078540",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4251",
        "id": 711078540,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcxMTA3ODU0MA==",
        "user": {
            "login": "stale[bot]",
            "id": 26384082,
            "node_id": "MDM6Qm90MjYzODQwODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stale%5Bbot%5D",
            "html_url": "https://github.com/apps/stale",
            "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2020-10-17T20:48:46Z",
        "updated_at": "2020-10-17T20:48:46Z",
        "author_association": "NONE",
        "body": "This issue has been automatically marked as stale due to inactivity and will be closed in 7 days if no further activity occurs. If further support is needed, please provide an update and/or more details.\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/711078540/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/750857906",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4251#issuecomment-750857906",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4251",
        "id": 750857906,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDg1NzkwNg==",
        "user": {
            "login": "stale[bot]",
            "id": 26384082,
            "node_id": "MDM6Qm90MjYzODQwODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stale%5Bbot%5D",
            "html_url": "https://github.com/apps/stale",
            "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2020-12-24T11:39:21Z",
        "updated_at": "2020-12-24T11:39:21Z",
        "author_association": "NONE",
        "body": "This issue has been automatically closed due to inactivity. Please reactivate if further support is needed.\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/750857906/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]