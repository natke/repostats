[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1542571451",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/15863#issuecomment-1542571451",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/15863",
        "id": 1542571451,
        "node_id": "IC_kwDOCVq1mM5b8cW7",
        "user": {
            "login": "enggRavigupta",
            "id": 121046222,
            "node_id": "U_kgDOBzcEzg",
            "avatar_url": "https://avatars.githubusercontent.com/u/121046222?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/enggRavigupta",
            "html_url": "https://github.com/enggRavigupta",
            "followers_url": "https://api.github.com/users/enggRavigupta/followers",
            "following_url": "https://api.github.com/users/enggRavigupta/following{/other_user}",
            "gists_url": "https://api.github.com/users/enggRavigupta/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/enggRavigupta/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/enggRavigupta/subscriptions",
            "organizations_url": "https://api.github.com/users/enggRavigupta/orgs",
            "repos_url": "https://api.github.com/users/enggRavigupta/repos",
            "events_url": "https://api.github.com/users/enggRavigupta/events{/privacy}",
            "received_events_url": "https://api.github.com/users/enggRavigupta/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-10T17:34:20Z",
        "updated_at": "2023-05-10T17:34:20Z",
        "author_association": "NONE",
        "body": "Can you tell which Tags/branch/commit of ArmNN SDK to use for building onnxruntime with armnn. The branch of onnxruntime is main and commit id is 2735e0d031 \r\n\r\nand to build onnx runtime command is ./build.sh --update --config Release --build --build_wheel   --use_cuda --cuda_home /usr/local/cuda --cudnn_home /usr/lib/aarch64-linux-gnu  --use_armnn",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1542571451/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1570191390",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/15863#issuecomment-1570191390",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/15863",
        "id": 1570191390,
        "node_id": "IC_kwDOCVq1mM5dlzge",
        "user": {
            "login": "maxmarsc",
            "id": 28865168,
            "node_id": "MDQ6VXNlcjI4ODY1MTY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/28865168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmarsc",
            "html_url": "https://github.com/maxmarsc",
            "followers_url": "https://api.github.com/users/maxmarsc/followers",
            "following_url": "https://api.github.com/users/maxmarsc/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmarsc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmarsc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmarsc/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmarsc/orgs",
            "repos_url": "https://api.github.com/users/maxmarsc/repos",
            "events_url": "https://api.github.com/users/maxmarsc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmarsc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-31T13:00:51Z",
        "updated_at": "2023-05-31T13:10:19Z",
        "author_association": "NONE",
        "body": "I have the same issue, and others, when trying to build `onnxruntime` `v1.14.1` for inference only, for aarch64 targets.\r\n\r\nI use the `aarch64-none-linux-gnu-g++ v11.3.rel1` C++ toolchain, with the following CMake toolchain file :\r\n```cmake\r\n# targets\r\nset(CMAKE_SYSTEM_NAME Linux)\r\nset(CMAKE_SYSTEM_PROCESSOR aarch64)\r\nset(triple aarch64-linux-gnu)\r\n\r\n# misc settings\r\nset(CMAKE_TRY_COMPILE_TARGET_TYPE \"STATIC_LIBRARY\")\r\nset(GNU_ROOT \"/usr/local/aarch64-none-linux-gnu\")\r\nset(CMAKE_SYSROOT \"${GNU_ROOT}/aarch64-none-linux-gnu/libc\")\r\n\r\n# find paths\r\nset(CMAKE_FIND_ROOT_PATH \"${GNU_ROOT}\")\r\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)\r\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\r\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\r\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)\r\n\r\n# compiler settings\r\nset(CMAKE_C_COMPILER \"${GNU_ROOT}/bin/aarch64-none-linux-gnu-gcc\" CACHE INTERNAL \"\")\r\nset(CMAKE_CXX_COMPILER \"${GNU_ROOT}/bin/aarch64-none-linux-gnu-g++\" CACHE INTERNAL \"\")\r\n\r\nset(CMAKE_C_COMPILER_TARGET ${triple})\r\nset(CMAKE_CXX_COMPILER_TARGET ${triple})\r\n\r\nset(CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN \"${GNU_ROOT}/lib/gcc\")\r\nset(CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN \"${GNU_ROOT}/lib/gcc\")\r\n\r\n# CPU tuning : the RPI 0 2W uses a Cortex a53\r\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mtune=cortex-a53\" CACHE STRING \"\")\r\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mtune=cortex-a53\" CACHE STRING \"\")\r\n\r\n# Qemu emulation setup\r\nset(CMAKE_CROSSCOMPILING_EMULATOR \"qemu-aarch64-static;-L;${CMAKE_SYSROOT}\" CACHE FILEPATH \"Path to the emulator for the target system.\")\r\n\r\n# Include settings\r\nset(CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES\r\n  ${GNU_ROOT}/aarch64-none-linux-gnu/include/c++/12.2.1\r\n  ${GNU_ROOT}/aarch64-none-linux-gnu/libc/usr/include\r\n  ${GNU_ROOT}/include\r\n  ${GNU_ROOT}/aarch64-none-linux-gnu/include/c++/12.2.1/aarch64-none-linux-gnu\r\n  ${GNU_ROOT}/lib/gcc/aarch64-none-linux-gnu/12.2.1/include\r\n)\r\n\r\nset(CMAKE_C_STANDARD_INCLUDE_DIRECTORIES\r\n  ${GNU_ROOT}/aarch64-none-linux-gnu/libc/usr/include\r\n)\r\n```\r\n\r\nThe build command I use is the following :\r\n```\r\n./build.sh --arm64 --use_armnn --armnn_home <...> --armnn_libs <...> --acl_home <...> --acl_libs <...> --parallel 0 --skip_tests --disable_exceptions --disable_rtti --cmake_extra_defines USE_OPENMP=ON --cmake_extra_defines ONNX_CUSTOM_PROTOC_EXECUTABLE=<...> --cmake_extra_defines CMAKE_TOOLCHAIN_FILE=myToolchain.cmake\r\n```\r\n\r\n---\r\n\r\nHere are all the errors I get from the compilation, including the one mentioned above :\r\n```\r\n[build] [ 38%] Building CXX object CMakeFiles/onnxruntime_test_utils.dir/foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/test/util/test_random_seed.cc.o\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/math/gemm.h:110:53: error: no matching function for call to ‘armnn::INetwork::AddFullyConnectedLayer(armnn::FullyConnectedDescriptor&, armnn::ConstTensor&, armnn::Optional<armnn::ConstTensor>, const char [9])’\r\n[build]   110 |         fc_armnn = myNetwork->AddFullyConnectedLayer(fcDescriptor,\r\n[build]       |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\r\n[build]   111 |                                                      weights,\r\n[build]       |                                                      ~~~~~~~~\r\n[build]   112 |                                                      armnn::Optional<armnn::ConstTensor>(bias),\r\n[build]       |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[build]   113 |                                                      \"fc_armnn\");\r\n[build]       |                                                      ~~~~~~~~~~~\r\n[build] In file included from /foo/bar/build/cmake/armnn/install/include/armnn/ArmNN.hpp:11,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/armnn_common.h:9,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/math/gemm.cc:5:\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:465:24: note: candidate: ‘armnn::IConnectableLayer* armnn::INetwork::AddFullyConnectedLayer(const armnn::FullyConnectedDescriptor&, const char*)’\r\n[build]   465 |     IConnectableLayer* AddFullyConnectedLayer(const FullyConnectedDescriptor& fullyConnectedDescriptor,\r\n[build]       |                        ^~~~~~~~~~~~~~~~~~~~~~\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:465:24: note:   candidate expects 2 arguments, 4 provided\r\n[build] In file included from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/math/gemm.cc:6:\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/math/gemm.h:115:53: error: no matching function for call to ‘armnn::INetwork::AddFullyConnectedLayer(armnn::FullyConnectedDescriptor&, armnn::ConstTensor&, armnn::EmptyOptional, const char [9])’\r\n[build]   115 |         fc_armnn = myNetwork->AddFullyConnectedLayer(fcDescriptor,\r\n[build]       |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\r\n[build]   116 |                                                      weights,\r\n[build]       |                                                      ~~~~~~~~\r\n[build]   117 |                                                      armnn::EmptyOptional(),\r\n[build]       |                                                      ~~~~~~~~~~~~~~~~~~~~~~~\r\n[build]   118 |                                                      \"fc_armnn\");\r\n[build]       |                                                      ~~~~~~~~~~~\r\n[build] In file included from /foo/bar/build/cmake/armnn/install/include/armnn/ArmNN.hpp:11,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/armnn_common.h:9,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/math/gemm.cc:5:\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:465:24: note: candidate: ‘armnn::IConnectableLayer* armnn::INetwork::AddFullyConnectedLayer(const armnn::FullyConnectedDescriptor&, const char*)’\r\n[build]   465 |     IConnectableLayer* AddFullyConnectedLayer(const FullyConnectedDescriptor& fullyConnectedDescriptor,\r\n[build]       |                        ^~~~~~~~~~~~~~~~~~~~~~\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:465:24: note:   candidate expects 2 arguments, 4 provided\r\n[build] [ 38%] Building CXX object _deps/onnx-build/CMakeFiles/onnx.dir/onnx/defs/nn/old.cc.o\r\n[build] [ 38%] Building CXX object _deps/onnx-build/CMakeFiles/onnx.dir/onnx/defs/object_detection/defs.cc.o\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/build/Debug/_deps/onnx-src/onnx/defs/nn/defs.cc: At global scope:\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/build/Debug/_deps/onnx-src/onnx/defs/nn/defs.cc:1773:20: warning: ‘onnx::Dropout_ver13_doc’ defined but not used [-Wunused-variable]\r\n[build]  1773 | static const char* Dropout_ver13_doc = R\"DOC(\r\n[build]       |                    ^~~~~~~~~~~~~~~~~\r\n[build] [ 38%] Building CXX object CMakeFiles/onnx_test_runner_common.dir/foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/test/onnx/testcase_driver.cc.o\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc: In member function ‘onnxruntime::common::Status onnxruntime::armnn_ep::Conv<T>::Compute(onnxruntime::OpKernelContext*) const’:\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:119:6: warning: suggest explicit braces to avoid ambiguous ‘else’ [-Wdangling-else]\r\n[build]   119 |   if (B != nullptr) LOGS_DEFAULT(VERBOSE) << \"B \" << B->Shape().ToString().c_str();\r\n[build]       |      ^\r\n[build] In file included from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:9:\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:122:66: error: cannot convert ‘std::vector<long int>’ to ‘onnxruntime::TensorShapeVector&’ {aka ‘absl::lts_20220623::InlinedVector<long int, 5>&’}\r\n[build]   122 |   ORT_RETURN_IF_ERROR(conv_attrs_.ComputeKernelShape(W->Shape(), kernel_shape));\r\n[build]       |                                                                  ^~~~~~~~~~~~\r\n[build]       |                                                                  |\r\n[build]       |                                                                  std::vector<long int>\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/include/onnxruntime/core/common/common.h:226:21: note: in definition of macro ‘ORT_RETURN_IF_ERROR_SESSIONID’\r\n[build]   226 |     auto _status = (expr);                                                                                             \\\r\n[build]       |                     ^~~~\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:122:3: note: in expansion of macro ‘ORT_RETURN_IF_ERROR’\r\n[build]   122 |   ORT_RETURN_IF_ERROR(conv_attrs_.ComputeKernelShape(W->Shape(), kernel_shape));\r\n[build]       |   ^~~~~~~~~~~~~~~~~~~\r\n[build] In file included from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/cpu/nn/conv.h:7,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.h:7,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:14:\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/cpu/nn/conv_attributes.h:76:81: note:   initializing argument 2 of ‘onnxruntime::common::Status onnxruntime::ConvAttributes::ComputeKernelShape(const onnxruntime::TensorShape&, onnxruntime::TensorShapeVector&, bool) const’\r\n[build]    76 |   Status ComputeKernelShape(const TensorShape& weight_shape, TensorShapeVector& kernel_shape, bool weight_channels_last = false) const {\r\n[build]       |                                                              ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\r\n[build] In file included from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:9:\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:140:35: error: ‘const struct onnxruntime::ConvAttributes’ has no member named ‘InferOutputShape’; did you mean ‘InferPadsAndOutputShape’?\r\n[build]   140 |   ORT_RETURN_IF_ERROR(conv_attrs_.InferOutputShape(input_shape, kernel_shape, strides, dilations, pads, Y_dims));\r\n[build]       |                                   ^~~~~~~~~~~~~~~~\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/include/onnxruntime/core/common/common.h:226:21: note: in definition of macro ‘ORT_RETURN_IF_ERROR_SESSIONID’\r\n[build]   226 |     auto _status = (expr);                                                                                             \\\r\n[build]       |                     ^~~~\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:140:3: note: in expansion of macro ‘ORT_RETURN_IF_ERROR’\r\n[build]   140 |   ORT_RETURN_IF_ERROR(conv_attrs_.InferOutputShape(input_shape, kernel_shape, strides, dilations, pads, Y_dims));\r\n[build]       |   ^~~~~~~~~~~~~~~~~~~\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:161:81: error: could not convert ‘pads’ from ‘onnxruntime::ConvAttributes::ConvPadVector’ {aka ‘absl::lts_20220623::InlinedVector<long int, 10, std::allocator<long int> >’} to ‘std::vector<long int>’\r\n[build]   161 |     armnn::Convolution2dDescriptor convolutionDescriptor = createConvDescriptor(pads, dilations, strides, biasEnabled);\r\n[build]       |                                                                                 ^~~~\r\n[build]       |                                                                                 |\r\n[build]       |                                                                                 onnxruntime::ConvAttributes::ConvPadVector {aka absl::lts_20220623::InlinedVector<long int, 10, std::allocator<long int> >}\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:185:72: error: no matching function for call to ‘armnn::INetwork::AddDepthwiseConvolution2dLayer(armnn::DepthwiseConvolution2dDescriptor&, armnn::ConstTensor&, armnn::Optional<armnn::ConstTensor>, const char [28])’\r\n[build]   185 |           convolution_armnn = myNetwork->AddDepthwiseConvolution2dLayer(depthwiseDescriptor,\r\n[build]       |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\r\n[build]   186 |                                                                         weights,\r\n[build]       |                                                                         ~~~~~~~~\r\n[build]   187 |                                                                         armnn::Optional<armnn::ConstTensor>(bias),\r\n[build]       |                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[build]   188 |                                                                         \"depthwise_convolution_armnn\");\r\n[build]       |                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[build] In file included from /foo/bar/build/cmake/armnn/install/include/armnn/ArmNN.hpp:11,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.h:10,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:14:\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:405:24: note: candidate: ‘armnn::IConnectableLayer* armnn::INetwork::AddDepthwiseConvolution2dLayer(const armnn::DepthwiseConvolution2dDescriptor&, const char*)’\r\n[build]   405 |     IConnectableLayer* AddDepthwiseConvolution2dLayer(const DepthwiseConvolution2dDescriptor& convolution2dDescriptor,\r\n[build]       |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:405:24: note:   candidate expects 2 arguments, 4 provided\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:190:72: error: no matching function for call to ‘armnn::INetwork::AddDepthwiseConvolution2dLayer(armnn::DepthwiseConvolution2dDescriptor&, armnn::ConstTensor&, armnn::EmptyOptional, const char [28])’\r\n[build]   190 |           convolution_armnn = myNetwork->AddDepthwiseConvolution2dLayer(depthwiseDescriptor,\r\n[build]       |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\r\n[build]   191 |                                                                         weights,\r\n[build]       |                                                                         ~~~~~~~~\r\n[build]   192 |                                                                         armnn::EmptyOptional(),\r\n[build]       |                                                                         ~~~~~~~~~~~~~~~~~~~~~~~\r\n[build]   193 |                                                                         \"depthwise_convolution_armnn\");\r\n[build]       |                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[build] In file included from /foo/bar/build/cmake/armnn/install/include/armnn/ArmNN.hpp:11,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.h:10,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:14:\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:405:24: note: candidate: ‘armnn::IConnectableLayer* armnn::INetwork::AddDepthwiseConvolution2dLayer(const armnn::DepthwiseConvolution2dDescriptor&, const char*)’\r\n[build]   405 |     IConnectableLayer* AddDepthwiseConvolution2dLayer(const DepthwiseConvolution2dDescriptor& convolution2dDescriptor,\r\n[build]       |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:405:24: note:   candidate expects 2 arguments, 4 provided\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:209:61: error: no matching function for call to ‘armnn::INetwork::AddConvolution2dLayer(armnn::Convolution2dDescriptor&, armnn::ConstTensor&, armnn::Optional<armnn::ConstTensor>, const char [18])’\r\n[build]   209 |         convolution_armnn = myNetwork->AddConvolution2dLayer(convolutionDescriptor,\r\n[build]       |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\r\n[build]   210 |                                                              weights,\r\n[build]       |                                                              ~~~~~~~~\r\n[build]   211 |                                                              armnn::Optional<armnn::ConstTensor>(bias),\r\n[build]       |                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[build]   212 |                                                              \"convolution_armnn\");\r\n[build]       |                                                              ~~~~~~~~~~~~~~~~~~~~\r\n[build] In file included from /foo/bar/build/cmake/armnn/install/include/armnn/ArmNN.hpp:11,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.h:10,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:14:\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:384:24: note: candidate: ‘armnn::IConnectableLayer* armnn::INetwork::AddConvolution2dLayer(const armnn::Convolution2dDescriptor&, const char*)’\r\n[build]   384 |     IConnectableLayer* AddConvolution2dLayer(const Convolution2dDescriptor& convolution2dDescriptor,\r\n[build]       |                        ^~~~~~~~~~~~~~~~~~~~~\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:384:24: note:   candidate expects 2 arguments, 4 provided\r\n[build] /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:214:61: error: no matching function for call to ‘armnn::INetwork::AddConvolution2dLayer(armnn::Convolution2dDescriptor&, armnn::ConstTensor&, armnn::EmptyOptional, const char [18])’\r\n[build]   214 |         convolution_armnn = myNetwork->AddConvolution2dLayer(convolutionDescriptor,\r\n[build]       |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\r\n[build]   215 |                                                              weights,\r\n[build]       |                                                              ~~~~~~~~\r\n[build]   216 |                                                              armnn::EmptyOptional(),\r\n[build]       |                                                              ~~~~~~~~~~~~~~~~~~~~~~~\r\n[build]   217 |                                                              \"convolution_armnn\");\r\n[build]       |                                                              ~~~~~~~~~~~~~~~~~~~~\r\n[build] In file included from /foo/bar/build/cmake/armnn/install/include/armnn/ArmNN.hpp:11,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.h:10,\r\n[build]                  from /foo/bar/build/source/onnx/onnx-runtime/src/onnx-runtime/onnxruntime/core/providers/armnn/nn/conv.cc:14:\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:384:24: note: candidate: ‘armnn::IConnectableLayer* armnn::INetwork::AddConvolution2dLayer(const armnn::Convolution2dDescriptor&, const char*)’\r\n[build]   384 |     IConnectableLayer* AddConvolution2dLayer(const Convolution2dDescriptor& convolution2dDescriptor,\r\n[build]       |                        ^~~~~~~~~~~~~~~~~~~~~\r\n[build] /foo/bar/build/cmake/armnn/install/include/armnn/INetwork.hpp:384:24: note:   candidate expects 2 arguments, 4 provided\r\n```\r\n\r\nI supposed this is due to the fact that ArmNN support is kinda outdated and that we're supposed to use ArmNN and/or ArmCL 20.02, but they are 3 years old now, and rely on libraries that are 8 years old.\r\n\r\nI'll try to compile with only ACL 20.02, but as far I know, the Eigen build is broken on v1.14.1 with ACL support",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1570191390/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]