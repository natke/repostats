[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/637053257",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-637053257",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 637053257,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzA1MzI1Nw==",
        "user": {
            "login": "pranavsharma",
            "id": 2732907,
            "node_id": "MDQ6VXNlcjI3MzI5MDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2732907?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pranavsharma",
            "html_url": "https://github.com/pranavsharma",
            "followers_url": "https://api.github.com/users/pranavsharma/followers",
            "following_url": "https://api.github.com/users/pranavsharma/following{/other_user}",
            "gists_url": "https://api.github.com/users/pranavsharma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pranavsharma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pranavsharma/subscriptions",
            "organizations_url": "https://api.github.com/users/pranavsharma/orgs",
            "repos_url": "https://api.github.com/users/pranavsharma/repos",
            "events_url": "https://api.github.com/users/pranavsharma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pranavsharma/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-01T19:19:15Z",
        "updated_at": "2020-06-01T19:19:15Z",
        "author_association": "MEMBER",
        "body": "We welcome external contributions. Would you like to create a PR for this? Thx.\r\ncc @RyanUnderhill ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/637053257/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/637751746",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-637751746",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 637751746,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzc1MTc0Ng==",
        "user": {
            "login": "RyanUnderhill",
            "id": 38674843,
            "node_id": "MDQ6VXNlcjM4Njc0ODQz",
            "avatar_url": "https://avatars.githubusercontent.com/u/38674843?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RyanUnderhill",
            "html_url": "https://github.com/RyanUnderhill",
            "followers_url": "https://api.github.com/users/RyanUnderhill/followers",
            "following_url": "https://api.github.com/users/RyanUnderhill/following{/other_user}",
            "gists_url": "https://api.github.com/users/RyanUnderhill/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RyanUnderhill/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RyanUnderhill/subscriptions",
            "organizations_url": "https://api.github.com/users/RyanUnderhill/orgs",
            "repos_url": "https://api.github.com/users/RyanUnderhill/repos",
            "events_url": "https://api.github.com/users/RyanUnderhill/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RyanUnderhill/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-02T19:12:57Z",
        "updated_at": "2020-06-02T19:12:57Z",
        "author_association": "MEMBER",
        "body": "@jgbradley1 I agree! One of the goals of the C++ wrapper was to have zero performance cost to using it, which of course wasn't possible for std::string due to the cost of creating them.\r\n\r\nBut, if this is something every user is going to need to do anyways, it's probably a good idea to have it for convenience. As long as there is a way to let the user know that there is an extra cost for that one.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/637751746/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/637917760",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-637917760",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 637917760,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzkxNzc2MA==",
        "user": {
            "login": "KevinHake",
            "id": 35880456,
            "node_id": "MDQ6VXNlcjM1ODgwNDU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/35880456?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/KevinHake",
            "html_url": "https://github.com/KevinHake",
            "followers_url": "https://api.github.com/users/KevinHake/followers",
            "following_url": "https://api.github.com/users/KevinHake/following{/other_user}",
            "gists_url": "https://api.github.com/users/KevinHake/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/KevinHake/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/KevinHake/subscriptions",
            "organizations_url": "https://api.github.com/users/KevinHake/orgs",
            "repos_url": "https://api.github.com/users/KevinHake/repos",
            "events_url": "https://api.github.com/users/KevinHake/events{/privacy}",
            "received_events_url": "https://api.github.com/users/KevinHake/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-03T02:38:10Z",
        "updated_at": "2020-06-03T02:38:10Z",
        "author_association": "NONE",
        "body": "I'd use std::vector inputs instead of 'buffer, buffersize' inputs for Ort::Session::Run and other calls with buffers if it were available. Don't need to get rid of the old interface, it can be overloaded.\r\n\r\nAlso, imho \"Ort::RunOptions{nullptr}\" is not an improvement over \"NULL\" in the C interface. In places it is common to leave an option empty, we could use default arguments to avoid the clutter.\r\n\r\nI'm confused why I have to ask the session for input name with Ort::Session::GetInputName and then provide it back to the same session object when I call Ort::Session::Run... but maybe that's a general API thing, and not a C++ improvement (and perhaps my limited understanding of the ONNX architecture).\r\nSpeaking of names, with both input and output node names, I am not sure why those wouldn't be set as part of Session setup, and not be arguments to the Run method. Unless I'm confused (well I am) I think unless you modify the session, you would want to use the same names every time you call Run?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/637917760/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/637921534",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-637921534",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 637921534,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzkyMTUzNA==",
        "user": {
            "login": "KevinHake",
            "id": 35880456,
            "node_id": "MDQ6VXNlcjM1ODgwNDU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/35880456?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/KevinHake",
            "html_url": "https://github.com/KevinHake",
            "followers_url": "https://api.github.com/users/KevinHake/followers",
            "following_url": "https://api.github.com/users/KevinHake/following{/other_user}",
            "gists_url": "https://api.github.com/users/KevinHake/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/KevinHake/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/KevinHake/subscriptions",
            "organizations_url": "https://api.github.com/users/KevinHake/orgs",
            "repos_url": "https://api.github.com/users/KevinHake/repos",
            "events_url": "https://api.github.com/users/KevinHake/events{/privacy}",
            "received_events_url": "https://api.github.com/users/KevinHake/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-03T02:52:13Z",
        "updated_at": "2020-06-03T02:52:13Z",
        "author_association": "NONE",
        "body": "along the same lines as for input and output node names, for input_node_dims I'm not clear why if the Session (in a roundabout way) knows what they are, why it is an input to Ort::Session::Run",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/637921534/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/637925222",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-637925222",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 637925222,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzkyNTIyMg==",
        "user": {
            "login": "KevinHake",
            "id": 35880456,
            "node_id": "MDQ6VXNlcjM1ODgwNDU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/35880456?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/KevinHake",
            "html_url": "https://github.com/KevinHake",
            "followers_url": "https://api.github.com/users/KevinHake/followers",
            "following_url": "https://api.github.com/users/KevinHake/following{/other_user}",
            "gists_url": "https://api.github.com/users/KevinHake/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/KevinHake/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/KevinHake/subscriptions",
            "organizations_url": "https://api.github.com/users/KevinHake/orgs",
            "repos_url": "https://api.github.com/users/KevinHake/repos",
            "events_url": "https://api.github.com/users/KevinHake/events{/privacy}",
            "received_events_url": "https://api.github.com/users/KevinHake/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-03T03:06:48Z",
        "updated_at": "2020-06-03T03:06:48Z",
        "author_association": "NONE",
        "body": "For Ort::Session::Run, for me it's a common (i.e. the only) case that both my input and output node counts are 1. It would be cool if the APIs were overloaded so in this simplified case I didn't have to provide arrays (or vectors) of length 1 as input or receive my output as an array (or vector) of length 1.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/637925222/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638029092",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-638029092",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 638029092,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzODAyOTA5Mg==",
        "user": {
            "login": "jgbradley1",
            "id": 654554,
            "node_id": "MDQ6VXNlcjY1NDU1NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/654554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jgbradley1",
            "html_url": "https://github.com/jgbradley1",
            "followers_url": "https://api.github.com/users/jgbradley1/followers",
            "following_url": "https://api.github.com/users/jgbradley1/following{/other_user}",
            "gists_url": "https://api.github.com/users/jgbradley1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jgbradley1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jgbradley1/subscriptions",
            "organizations_url": "https://api.github.com/users/jgbradley1/orgs",
            "repos_url": "https://api.github.com/users/jgbradley1/repos",
            "events_url": "https://api.github.com/users/jgbradley1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jgbradley1/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-03T07:57:03Z",
        "updated_at": "2020-06-03T20:04:07Z",
        "author_association": "MEMBER",
        "body": "Agree with @KevinHake . My suggestion then would be to leave the current interface alone for backwards compatibility and add new overloaded functions (starting with Ort::Session::Run).\r\n\r\nA few implementation choices include\r\n1. Allow `Run()` to accept `std::vector<string>` as input for some arguments.\r\n2. `Run()` could also be generalized further with templates to allow for any container by passing in begin/end iterators. This would make the arguments list to `Run()` more verbose but simpler (less verbose) overloaded versions of the function could be written afterwards (for example, removing the need to pass in buffersize).\r\n\r\nI would propose that these changes (if accepted) be placed under an experimental namespace (maybe `Ort::session::experimental`) to give the community time to refine them and to not give any expectation that the API changes will stick around long-term. Similar to what GCC did with the `filesystem` library.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638029092/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638300058",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-638300058",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 638300058,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzODMwMDA1OA==",
        "user": {
            "login": "Craigacp",
            "id": 729696,
            "node_id": "MDQ6VXNlcjcyOTY5Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/729696?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Craigacp",
            "html_url": "https://github.com/Craigacp",
            "followers_url": "https://api.github.com/users/Craigacp/followers",
            "following_url": "https://api.github.com/users/Craigacp/following{/other_user}",
            "gists_url": "https://api.github.com/users/Craigacp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Craigacp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Craigacp/subscriptions",
            "organizations_url": "https://api.github.com/users/Craigacp/orgs",
            "repos_url": "https://api.github.com/users/Craigacp/repos",
            "events_url": "https://api.github.com/users/Craigacp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Craigacp/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-03T16:13:10Z",
        "updated_at": "2020-06-03T16:14:59Z",
        "author_association": "CONTRIBUTOR",
        "body": "You could want different outputs from a given model based on the inputs, which is why it's controllable to choose what outputs are returned. I agree in practice it's not that likely to be useful, but it could be. For the input names there are situations where it would be useful to only compute part of a graph, by providing some of the inputs and requesting some of the outputs, but at the moment the runtime doesn't support providing a subset of the inputs, see https://github.com/microsoft/onnxruntime/issues/3128 and https://github.com/microsoft/onnxruntime/issues/2878.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638300058/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638409077",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-638409077",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 638409077,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQwOTA3Nw==",
        "user": {
            "login": "KevinHake",
            "id": 35880456,
            "node_id": "MDQ6VXNlcjM1ODgwNDU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/35880456?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/KevinHake",
            "html_url": "https://github.com/KevinHake",
            "followers_url": "https://api.github.com/users/KevinHake/followers",
            "following_url": "https://api.github.com/users/KevinHake/following{/other_user}",
            "gists_url": "https://api.github.com/users/KevinHake/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/KevinHake/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/KevinHake/subscriptions",
            "organizations_url": "https://api.github.com/users/KevinHake/orgs",
            "repos_url": "https://api.github.com/users/KevinHake/repos",
            "events_url": "https://api.github.com/users/KevinHake/events{/privacy}",
            "received_events_url": "https://api.github.com/users/KevinHake/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-03T19:21:05Z",
        "updated_at": "2020-06-03T19:21:05Z",
        "author_association": "NONE",
        "body": "@Craigacp thanks for the info! So sounds like definitely it's viable to have an overloaded Run that takes in only an input tensor, the rest of the boilerplate goes away for that common case.\n\nI'm also curious - isn't it also a common case that the session knows ahead of time the dimensions the input tensor should be? I'm thinking it could be useful if Run supported a simple vector input, and internally it could create a proper tensor object if needed, instead of constructing one manually with Ort::Value::Tensor before calling Run.\n\nAnd in the partial input case, if I'm understanding correctly, we could add a method to the session object to create a properly dimensioned tensor given the input name, instead of using the input name to get dimensions, creating a tensor with those, then calling Run with the name and tensor. Or again, just have a regular vector input along with input name to ascertain dimensions (I prefer this to needing to call Ort::Value::CreateTensor). Personally, my philosophy is never to implement a public interface for functionality that doesn't exist yet, so probably that should be part of #3128/#2878.\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638409077/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638423899",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-638423899",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 638423899,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQyMzg5OQ==",
        "user": {
            "login": "Craigacp",
            "id": 729696,
            "node_id": "MDQ6VXNlcjcyOTY5Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/729696?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Craigacp",
            "html_url": "https://github.com/Craigacp",
            "followers_url": "https://api.github.com/users/Craigacp/followers",
            "following_url": "https://api.github.com/users/Craigacp/following{/other_user}",
            "gists_url": "https://api.github.com/users/Craigacp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Craigacp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Craigacp/subscriptions",
            "organizations_url": "https://api.github.com/users/Craigacp/orgs",
            "repos_url": "https://api.github.com/users/Craigacp/repos",
            "events_url": "https://api.github.com/users/Craigacp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Craigacp/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-03T19:47:37Z",
        "updated_at": "2020-06-03T19:49:04Z",
        "author_association": "CONTRIBUTOR",
        "body": "A lot of onnx models have an unbound first dimension in their input tensor so they accept arbitrary size batches, so the reshape logic would be a little more complex as it would have to check the input is a multiple of the bound dimensions. At that point it's probably better to have the user make the tensor themselves rather than have more magic.\r\n\r\nI wrote the Java API, so that's my view on what a good OO API is wrapped around the existing C API. I'm not too familiar with C++ idioms as the last C++ project I wrote was many years ago.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638423899/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638447685",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-638447685",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 638447685,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQ0NzY4NQ==",
        "user": {
            "login": "jgbradley1",
            "id": 654554,
            "node_id": "MDQ6VXNlcjY1NDU1NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/654554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jgbradley1",
            "html_url": "https://github.com/jgbradley1",
            "followers_url": "https://api.github.com/users/jgbradley1/followers",
            "following_url": "https://api.github.com/users/jgbradley1/following{/other_user}",
            "gists_url": "https://api.github.com/users/jgbradley1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jgbradley1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jgbradley1/subscriptions",
            "organizations_url": "https://api.github.com/users/jgbradley1/orgs",
            "repos_url": "https://api.github.com/users/jgbradley1/repos",
            "events_url": "https://api.github.com/users/jgbradley1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jgbradley1/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-03T20:36:10Z",
        "updated_at": "2020-06-03T20:41:26Z",
        "author_association": "MEMBER",
        "body": "@KevinHake one red flag I believe we should keep in mind is overloaded functions that don't match the API in other languages. For example, I like how OpenCV has designed their API so that the Python and C++ implementation are nearly the same. It becomes second nature then to port code over from other languages (i.e. moving code from research to production).\r\n\r\nI'm beginning to think that parts of the current C+++ API might be too low-level for the general intended purpose (to run inference on onnx models). This proposal for overloaded functions could lead to a new _enhanced_ C++ API (which would come at a small memory cost due to decisions like using strings), that simplifies away most of the mundane argument passing that doesn't make sense.\r\n\r\nFor a majority of computer vision models, only one input node and one output node is desired and most of the arguments passed to `Run()` become tedious and messy to declare. Perhaps defining default arguments that automatically assume all input nodes will be used and all output nodes will be used makes the most sense. A lot of other frameworks make this assumption implicitly already.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638447685/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638463069",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-638463069",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 638463069,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQ2MzA2OQ==",
        "user": {
            "login": "KevinHake",
            "id": 35880456,
            "node_id": "MDQ6VXNlcjM1ODgwNDU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/35880456?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/KevinHake",
            "html_url": "https://github.com/KevinHake",
            "followers_url": "https://api.github.com/users/KevinHake/followers",
            "following_url": "https://api.github.com/users/KevinHake/following{/other_user}",
            "gists_url": "https://api.github.com/users/KevinHake/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/KevinHake/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/KevinHake/subscriptions",
            "organizations_url": "https://api.github.com/users/KevinHake/orgs",
            "repos_url": "https://api.github.com/users/KevinHake/repos",
            "events_url": "https://api.github.com/users/KevinHake/events{/privacy}",
            "received_events_url": "https://api.github.com/users/KevinHake/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-03T21:10:01Z",
        "updated_at": "2020-06-03T21:10:01Z",
        "author_association": "NONE",
        "body": "@jgbradley1 agreed. Some of my comments above might better be addressed in the architecture as a whole (i.e. all the apis), not just C++, like being able to ask the session for a tensor based on input name instead of asking for dimensions, or allowing a regular array to be input to Run and having the API just use the session info to do its thing. I suppose you're right, those structural changes that could be done in all the APIs don't really belong in a PR that's more about taking advantage of C++-specific features.\n\nSo primarily I would say adding a default arg for null arguments and allowing vector inputs for buffers would be a good clear PR.\n\nImprovements more general to all languages we can open separate issues/PRs for\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638463069/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/664398065",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-664398065",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 664398065,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDM5ODA2NQ==",
        "user": {
            "login": "CJCombrink",
            "id": 1647870,
            "node_id": "MDQ6VXNlcjE2NDc4NzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1647870?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CJCombrink",
            "html_url": "https://github.com/CJCombrink",
            "followers_url": "https://api.github.com/users/CJCombrink/followers",
            "following_url": "https://api.github.com/users/CJCombrink/following{/other_user}",
            "gists_url": "https://api.github.com/users/CJCombrink/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CJCombrink/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CJCombrink/subscriptions",
            "organizations_url": "https://api.github.com/users/CJCombrink/orgs",
            "repos_url": "https://api.github.com/users/CJCombrink/repos",
            "events_url": "https://api.github.com/users/CJCombrink/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CJCombrink/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-27T13:31:13Z",
        "updated_at": "2020-07-27T13:31:13Z",
        "author_association": "NONE",
        "body": "Although I support this, I think there is a missed opportunity here.\r\n\r\nFrom my perspective, I would much rather prefer an C++ API that resembles the Windows ML API more closely. \r\nWhen I started looking at ONNX Runtime, I started with the Windows ML C++/WinRT API due to its availability in my project.\r\nNow I am porting my existing code to the C++ API (evaluation for cross platform future), but was disappointed with the C-ness of the API, and the vastly different approaches. \r\n\r\nThe Windows ML API is very modern C++ OO oriented, and I think this ONNX Runtime C++ API can benefit a lot from being common. Naturally without the C++/WinRT aspects, but only pure C++, and I think there is a good mapping from the C++/WinRT API to pure C++. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/664398065/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/703198078",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-703198078",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 703198078,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzE5ODA3OA==",
        "user": {
            "login": "stale[bot]",
            "id": 26384082,
            "node_id": "MDM6Qm90MjYzODQwODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stale%5Bbot%5D",
            "html_url": "https://github.com/apps/stale",
            "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2020-10-04T03:56:05Z",
        "updated_at": "2020-10-04T03:56:05Z",
        "author_association": "NONE",
        "body": "This issue has been automatically marked as stale due to inactivity and will be closed in 7 days if no further activity occurs. If further support is needed, please provide an update and/or more details.\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/703198078/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/706691977",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-706691977",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 706691977,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjY5MTk3Nw==",
        "user": {
            "login": "stale[bot]",
            "id": 26384082,
            "node_id": "MDM6Qm90MjYzODQwODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stale%5Bbot%5D",
            "html_url": "https://github.com/apps/stale",
            "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2020-10-11T11:41:26Z",
        "updated_at": "2020-10-11T11:41:26Z",
        "author_association": "NONE",
        "body": "This issue has been automatically closed due to inactivity. Please reactivate if further support is needed.\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/706691977/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1405882825",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-1405882825",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 1405882825,
        "node_id": "IC_kwDOCVq1mM5TzBHJ",
        "user": {
            "login": "patrikhuber",
            "id": 4967343,
            "node_id": "MDQ6VXNlcjQ5NjczNDM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4967343?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/patrikhuber",
            "html_url": "https://github.com/patrikhuber",
            "followers_url": "https://api.github.com/users/patrikhuber/followers",
            "following_url": "https://api.github.com/users/patrikhuber/following{/other_user}",
            "gists_url": "https://api.github.com/users/patrikhuber/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/patrikhuber/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/patrikhuber/subscriptions",
            "organizations_url": "https://api.github.com/users/patrikhuber/orgs",
            "repos_url": "https://api.github.com/users/patrikhuber/repos",
            "events_url": "https://api.github.com/users/patrikhuber/events{/privacy}",
            "received_events_url": "https://api.github.com/users/patrikhuber/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-27T01:07:52Z",
        "updated_at": "2023-01-27T01:11:28Z",
        "author_association": "NONE",
        "body": "I would say this is far from resolved. I just looked at some options of running onnx models in C++, had a look at the onnxruntime \"C++\" API (I put that in quotes deliberately), and I'll be staying away from it if I can. Modern C++ APIs can be simple, beautiful and easy to use, and there's really no reason anymore in 2023 that it has to be so hard and convoluted. It's possible to write a modern C++ API in such a way that it's not more difficult to use than it would be in Python.\r\n\r\nTo be honest, I don't find the Windows ML C++/WinRT API much better and I'd apply the same comment to it - but then again it looks like I might be spoiled by true modern C++ APIs. I hope someone comes up with an ONNX runtime at some point in the future using true modern C++ that makes ONNX models as easy to use in C++ as it is in Python.\r\n\r\n(As an example, this https://github.com/Dobiasd/frugally-deep/ is a very nicely designed modern C++ library to run inference on Keras models in C++ (CPU-only though)).",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1405882825/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1405948315",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4094#issuecomment-1405948315",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4094",
        "id": 1405948315,
        "node_id": "IC_kwDOCVq1mM5TzRGb",
        "user": {
            "login": "RyanUnderhill",
            "id": 38674843,
            "node_id": "MDQ6VXNlcjM4Njc0ODQz",
            "avatar_url": "https://avatars.githubusercontent.com/u/38674843?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RyanUnderhill",
            "html_url": "https://github.com/RyanUnderhill",
            "followers_url": "https://api.github.com/users/RyanUnderhill/followers",
            "following_url": "https://api.github.com/users/RyanUnderhill/following{/other_user}",
            "gists_url": "https://api.github.com/users/RyanUnderhill/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RyanUnderhill/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RyanUnderhill/subscriptions",
            "organizations_url": "https://api.github.com/users/RyanUnderhill/orgs",
            "repos_url": "https://api.github.com/users/RyanUnderhill/repos",
            "events_url": "https://api.github.com/users/RyanUnderhill/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RyanUnderhill/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-27T02:41:30Z",
        "updated_at": "2023-01-27T02:41:30Z",
        "author_association": "MEMBER",
        "body": "@patrikhuber It's good to hear your feedback on this, I have been experimenting with a new simpler C++ API, here's a PR of it so far:\r\n\r\nhttps://github.com/microsoft/onnxruntime/pull/13725\r\n\r\nIt describes the goals in it, but if you have any feedback please let me know.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1405948315/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]