[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1228734043",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1228734043",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1228734043,
        "node_id": "IC_kwDOCVq1mM5JPP5b",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-26T17:12:08Z",
        "updated_at": "2022-08-26T17:13:43Z",
        "author_association": "MEMBER",
        "body": "The usage is not supported. Generally speaking, please do not call any ORT function before the main function is started, or after the main function is returned. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1228734043/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1228737022",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1228737022",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1228737022,
        "node_id": "IC_kwDOCVq1mM5JPQn-",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-26T17:15:41Z",
        "updated_at": "2022-08-26T17:15:41Z",
        "author_association": "MEMBER",
        "body": "> blindly uses its pointer without checking for nullptr which leads to the null dereference crash.\r\n\r\nEven if the pointer is not nullptr, it doesn't mean it is still valid. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1228737022/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1229023093",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1229023093",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1229023093,
        "node_id": "IC_kwDOCVq1mM5JQWd1",
        "user": {
            "login": "diablodale",
            "id": 679350,
            "node_id": "MDQ6VXNlcjY3OTM1MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/679350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/diablodale",
            "html_url": "https://github.com/diablodale",
            "followers_url": "https://api.github.com/users/diablodale/followers",
            "following_url": "https://api.github.com/users/diablodale/following{/other_user}",
            "gists_url": "https://api.github.com/users/diablodale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/diablodale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/diablodale/subscriptions",
            "organizations_url": "https://api.github.com/users/diablodale/orgs",
            "repos_url": "https://api.github.com/users/diablodale/repos",
            "events_url": "https://api.github.com/users/diablodale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/diablodale/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-26T22:49:56Z",
        "updated_at": "2022-08-26T22:49:56Z",
        "author_association": "CONTRIBUTOR",
        "body": "@snnn, I recommend we discuss in this open source project rather than your one-sided conversation approach.\r\nWill you do that?\r\n\r\nFor future readers, a few things errant in @snnn posts above.\r\n\r\n* the OP code is not a global. It is a (private) static class var and does not necessarily imply it is a \"global\". Depending on the compiler it could be compile-time or dynamic-initialized when the translation using of that class is loaded.\r\n* Any value could be forced into these wrappers around pointers like Env. It is non-sensical to use that in any discussion as in normal use the value is either nullptr or another wrapper class like Env which is r-value moved into the problematic var.\r\n\r\n\r\nEnv is not the only problem class with this bug. I suspect many/all of the other classes that use the macro have this same bug.\r\nI can easily see `Ort::Session` will also crash. Any of the below classes which allow initialization with {nullptr} will have this bug.\r\n```\r\nORT_DEFINE_RELEASE(Allocator);\r\nORT_DEFINE_RELEASE(MemoryInfo);\r\nORT_DEFINE_RELEASE(CustomOpDomain);\r\nORT_DEFINE_RELEASE(Env);\r\nORT_DEFINE_RELEASE(RunOptions);\r\nORT_DEFINE_RELEASE(Session);\r\nORT_DEFINE_RELEASE(SessionOptions);\r\nORT_DEFINE_RELEASE(TensorTypeAndShapeInfo);\r\nORT_DEFINE_RELEASE(SequenceTypeInfo);\r\nORT_DEFINE_RELEASE(MapTypeInfo);\r\nORT_DEFINE_RELEASE(TypeInfo);\r\nORT_DEFINE_RELEASE(Value);\r\nORT_DEFINE_RELEASE(ModelMetadata);\r\nORT_DEFINE_RELEASE(ThreadingOptions);\r\nORT_DEFINE_RELEASE(IoBinding);\r\nORT_DEFINE_RELEASE(ArenaCfg);\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1229023093/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1242898800",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1242898800",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1242898800,
        "node_id": "IC_kwDOCVq1mM5KFSFw",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-11T06:39:18Z",
        "updated_at": "2022-09-11T06:39:18Z",
        "author_association": "MEMBER",
        "body": "A C++ destructor should not throw exceptions. So, even you know GetApi() is null, what you can do except crashing the process? As you already set the ORT_API_MANUAL_INIT to manually initialize the GetApi() ptr, then you should check if the initialization was  successfully or not before calling any ORT APIs. If ORT failed to initialize, you would not be able to create any ORT object, then you would not need to destruct any such object as well. So it won't enter a state that GetApi() returns NULL when you destruct OrtEnv . ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1242898800/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1242899127",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1242899127",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1242899127,
        "node_id": "IC_kwDOCVq1mM5KFSK3",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-11T06:42:30Z",
        "updated_at": "2022-09-11T06:42:30Z",
        "author_association": "MEMBER",
        "body": "I expect Ort::Global<void>::api_ is correctly initialized to a non-null value before any onnxruntime API(other than GetApi() itself) is called.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1242899127/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1242899396",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1242899396",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1242899396,
        "node_id": "IC_kwDOCVq1mM5KFSPE",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-11T06:45:03Z",
        "updated_at": "2022-09-11T06:45:03Z",
        "author_association": "MEMBER",
        "body": "When you tell me you have code like:\r\n```\r\nstatic inline Ort::Env onnx_env{nullptr}; \r\n```\r\nAnd the app crashes on exit due to nullptr derefence. I suspect the destructor of Ort::Env was not called before \"main\" function is returned.  You will need code like:\r\nhttps://github.com/microsoft/onnxruntime/blob/main/onnxruntime/test/unittest_main/test_main.cc#L55\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1242899396/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1247832107",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1247832107",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1247832107,
        "node_id": "IC_kwDOCVq1mM5KYGgr",
        "user": {
            "login": "diablodale",
            "id": 679350,
            "node_id": "MDQ6VXNlcjY3OTM1MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/679350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/diablodale",
            "html_url": "https://github.com/diablodale",
            "followers_url": "https://api.github.com/users/diablodale/followers",
            "following_url": "https://api.github.com/users/diablodale/following{/other_user}",
            "gists_url": "https://api.github.com/users/diablodale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/diablodale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/diablodale/subscriptions",
            "organizations_url": "https://api.github.com/users/diablodale/orgs",
            "repos_url": "https://api.github.com/users/diablodale/repos",
            "events_url": "https://api.github.com/users/diablodale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/diablodale/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-15T09:24:40Z",
        "updated_at": "2022-09-15T09:24:40Z",
        "author_association": "CONTRIBUTOR",
        "body": "onnx c++/c headers need to check for nullptr. Use `if (theptr) release(theptr)` instead of today's blind `release(theptr)`. I discuss this in my OP.\r\n\r\n> So, even you know GetApi() is null, what you can do except crashing the process?\r\nDon't crash. Test and release only if it is non-null. This is SOP for even the most core functions like `free()`\r\n\r\nAs we know, the env is singular...only one. I forget but when I isolated this bug, I think deep down the env is a singleton or something similar. When classes/struct are defined in the app, having a single env as a static member of a class, singleton, etc. is a common approach. Naturally, you know about the static initialization fiasco...and its partner the static deinitialization fiasco. The orders of init and deinit are not guaranteed across translation units and in general you CAN NOT base rules no things like `main()`.\r\n\r\nWho writes code with `main()`? Today we write DLLs and event loops and more complex applications. Making a rule based on `main()` is doomed to fail in anything but the most basic applications. 😁 and in the very link you provide me is a `//TODO: Fix the C API issue` and `//If we don't do this, it will crash` which identifies that...yes...the API is currently broken. The solutions I provide above can address many of them.\r\n\r\nTest for non-null...then release. Don't do it blindly.\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1247832107/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1255478525",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1255478525",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1255478525,
        "node_id": "IC_kwDOCVq1mM5K1RT9",
        "user": {
            "login": "diablodale",
            "id": 679350,
            "node_id": "MDQ6VXNlcjY3OTM1MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/679350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/diablodale",
            "html_url": "https://github.com/diablodale",
            "followers_url": "https://api.github.com/users/diablodale/followers",
            "following_url": "https://api.github.com/users/diablodale/following{/other_user}",
            "gists_url": "https://api.github.com/users/diablodale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/diablodale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/diablodale/subscriptions",
            "organizations_url": "https://api.github.com/users/diablodale/orgs",
            "repos_url": "https://api.github.com/users/diablodale/repos",
            "events_url": "https://api.github.com/users/diablodale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/diablodale/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-22T19:49:47Z",
        "updated_at": "2022-09-22T19:49:47Z",
        "author_association": "CONTRIBUTOR",
        "body": "I've worked around this issue in my local private build by changing the `ORT_DEFINE_RELEASE(NAME)` macro to be `inline void OrtRelease(Ort##NAME* ptr) { if (&GetApi()) GetApi().Release##NAME(ptr); }`. I am testing this change; no new issues and it fixes the crash on app exit.\r\n\r\nAbove you write \"A C++ destructor should not throw exceptions\". I agree with this approach. The C++ language and compilers don't require destructors to not throw. Instead, the core cpp team have guidelines https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c36-a-destructor-must-not-fail and  https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c37-make-destructors-noexcept strongly advising to not throw in destructors.\r\n\r\nYet, the existing onnxruntime codebase at v1.12.1 does not comply with that rule. This is one of the pervasive exception issues I reported in #12338. As example, the destructor `~Ort::Env` throws...\r\n\r\n1. `Ort::Env` is `struct Env : Base<OrtEnv>`\r\n2. `Base::~Base() { OrtRelease(p_); }`\r\n3. that release is macro `ORT_DEFINE_RELEASE(Env)` that expands to `inline void OrtRelease(OrtEnv* ptr) { GetApi().ReleaseEnv(ptr); }`\r\n4. the API `ReleaseEnv` is `OrtEnv::Release(value);`\r\n5. and finally `void OrtEnv::Release(OrtEnv* env_ptr)` can throw in either the `OrtMutex::lock()` or `ORT_ENFORCE()`\r\n\r\nThe existing onnxruntime throws in its many destructors while also not checking for a null `GetApi()` as it traverses down the callstack to get the specific release implementation needed for the destructors.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1255478525/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1334894090",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1334894090",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1334894090,
        "node_id": "IC_kwDOCVq1mM5PkN4K",
        "user": {
            "login": "deischi",
            "id": 308504,
            "node_id": "MDQ6VXNlcjMwODUwNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/308504?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/deischi",
            "html_url": "https://github.com/deischi",
            "followers_url": "https://api.github.com/users/deischi/followers",
            "following_url": "https://api.github.com/users/deischi/following{/other_user}",
            "gists_url": "https://api.github.com/users/deischi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/deischi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deischi/subscriptions",
            "organizations_url": "https://api.github.com/users/deischi/orgs",
            "repos_url": "https://api.github.com/users/deischi/repos",
            "events_url": "https://api.github.com/users/deischi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/deischi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T08:18:01Z",
        "updated_at": "2022-12-02T08:18:01Z",
        "author_association": "NONE",
        "body": "I am experiencing basically the same crash on \"unused\" `Ort::Session session {nullptr}` objects.\r\nI would suggest to check for `ptr != nullptr` first as `GetApi()` semantics might change in the future, e.g to do an automatic intiailizsation.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1334894090/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335277542",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1335277542",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1335277542,
        "node_id": "IC_kwDOCVq1mM5Plrfm",
        "user": {
            "login": "diablodale",
            "id": 679350,
            "node_id": "MDQ6VXNlcjY3OTM1MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/679350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/diablodale",
            "html_url": "https://github.com/diablodale",
            "followers_url": "https://api.github.com/users/diablodale/followers",
            "following_url": "https://api.github.com/users/diablodale/following{/other_user}",
            "gists_url": "https://api.github.com/users/diablodale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/diablodale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/diablodale/subscriptions",
            "organizations_url": "https://api.github.com/users/diablodale/orgs",
            "repos_url": "https://api.github.com/users/diablodale/repos",
            "events_url": "https://api.github.com/users/diablodale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/diablodale/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T14:05:50Z",
        "updated_at": "2022-12-02T14:05:50Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hi @deischi. The API signature for `GetApi()` is fixed and published. It returns a `const OrtApi&` and therefore I can write the protective code as I suggest. The ORT codebase by default auto-initializes and subject to Static Initialization Order Fiasco. It is only with `ORT_API_MANUAL_INIT` is becomes manual. Anything can change in a future breaking ORT change. The protective code would need to adapt at that time.\r\n\r\nSeparately, you are inquiring into the test for `ptr` passed into a release. I think that protective code should be part of a deeper API. Not at this `ORT_DEFINE_RELEASE` macro. Why? Because C and other C++ code can have the same ptr=null scenario when they call the deeper APIs. For example, the test case `trainer.cc` or java wrapper `ai_onnxruntime_OrtEnvironment.c` call `api->ReleaseEnv() directly`. If you follow the codebase for Env, all the codepaths reach the below...\r\n\r\nhttps://github.com/microsoft/onnxruntime/blob/a0b470bc35cb2df26d3dc8c75c5261f92e8cf586/onnxruntime/core/session/ort_env.cc#L85-L95\r\n\r\nThere you can see it already includes the check for an Env ptr != null.\r\n\r\nFor Session, the pattern continues and calls the function `ReleaseSession()`. I think it is implemented here\r\n\r\nhttps://github.com/microsoft/onnxruntime/blob/a0b470bc35cb2df26d3dc8c75c5261f92e8cf586/onnxruntime/core/session/onnxruntime_c_api.cc#L2673\r\n\r\nhttps://github.com/microsoft/onnxruntime/blob/a0b470bc35cb2df26d3dc8c75c5261f92e8cf586/onnxruntime/core/session/onnxruntime_c_api.cc#L1232-L1235\r\n\r\nOnly four classes use that macro. Others like Env have their own custom releases. It's an easy fix to add the ptr!=null test to that macro. The other ~12 classes need each their releases found and protective code added.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335277542/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335311477",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1335311477",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1335311477,
        "node_id": "IC_kwDOCVq1mM5Plzx1",
        "user": {
            "login": "diablodale",
            "id": 679350,
            "node_id": "MDQ6VXNlcjY3OTM1MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/679350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/diablodale",
            "html_url": "https://github.com/diablodale",
            "followers_url": "https://api.github.com/users/diablodale/followers",
            "following_url": "https://api.github.com/users/diablodale/following{/other_user}",
            "gists_url": "https://api.github.com/users/diablodale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/diablodale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/diablodale/subscriptions",
            "organizations_url": "https://api.github.com/users/diablodale/orgs",
            "repos_url": "https://api.github.com/users/diablodale/repos",
            "events_url": "https://api.github.com/users/diablodale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/diablodale/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T14:26:07Z",
        "updated_at": "2022-12-02T14:26:41Z",
        "author_association": "CONTRIBUTOR",
        "body": "oh haha, as I looked more into that `DEFINE_RELEASE_ORT_OBJECT_FUNCTION` macro, the C++ standard comes into play. We could add a nullptr check to that macro and be done for those 4 classes. Otherwise, we run into todays behavior. The C++ standard leaves it to the compiler implementation to choose to call the deleter function when `delete` is given a nullptr. So Gnu might call it while MSVC might not. So Ort has to handle both scenarios. Any standard library deleters must accept and noop such a nullptr. But customer deleters...like Ort has for `InferenceSession` have to code (or not) what happens. It is `virtual ~InferenceSession()` which somewhat complicates. The base virtual deleter doesn't check for nullptr and blindly uses its member variables assuming they exist...which they wouldn't if `this` was nullptr.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335311477/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335459037",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1335459037",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1335459037,
        "node_id": "IC_kwDOCVq1mM5PmXzd",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T15:56:53Z",
        "updated_at": "2022-12-02T15:56:53Z",
        "author_association": "MEMBER",
        "body": "delete nullptr; is always valid. I haven't seen a case that it would crash. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335459037/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335476415",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1335476415",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1335476415,
        "node_id": "IC_kwDOCVq1mM5PmcC_",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T16:07:03Z",
        "updated_at": "2022-12-02T16:07:03Z",
        "author_association": "MEMBER",
        "body": "> I am experiencing basically the same crash on \"unused\" `Ort::Session session {nullptr}` objects. I would suggest to check for `ptr != nullptr` first as `GetApi()` semantics might change in the future, e.g to do an automatic intiailizsation.\r\n\r\nWithout more information I can't tell what went wrong, but I highly suspect your application was calling ONNX Runtime functions after your main function (or DLLMain) has returned.  Crashes on exit are usually object life cycle issues. Adding a nulltpr check there wouldn't really solve the issue. It could somehow mask the underlaying problem, make the error harder to debug,  but the application might still have use-after-free errors, though they don't necessarily cause a crash. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335476415/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335490294",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1335490294",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1335490294,
        "node_id": "IC_kwDOCVq1mM5Pmfb2",
        "user": {
            "login": "diablodale",
            "id": 679350,
            "node_id": "MDQ6VXNlcjY3OTM1MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/679350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/diablodale",
            "html_url": "https://github.com/diablodale",
            "followers_url": "https://api.github.com/users/diablodale/followers",
            "following_url": "https://api.github.com/users/diablodale/following{/other_user}",
            "gists_url": "https://api.github.com/users/diablodale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/diablodale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/diablodale/subscriptions",
            "organizations_url": "https://api.github.com/users/diablodale/orgs",
            "repos_url": "https://api.github.com/users/diablodale/repos",
            "events_url": "https://api.github.com/users/diablodale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/diablodale/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T16:14:43Z",
        "updated_at": "2022-12-02T16:14:43Z",
        "author_association": "CONTRIBUTOR",
        "body": "> delete nullptr; is always valid. I haven't seen a case that it would crash.\r\n\r\nFalse.\r\nAnd to repeat again as I wrote, it is undefined by C++ spec and the implementer of the deleting function is responsible for handling. Please google this topic for detailed C++ spec and discussions on this.\r\n\r\nSTL and default deleters handle nullptr being passed to the deleters. But custom ones like I discussed DO NOT.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1335490294/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338144524",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1338144524",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1338144524,
        "node_id": "IC_kwDOCVq1mM5PwncM",
        "user": {
            "login": "diablodale",
            "id": 679350,
            "node_id": "MDQ6VXNlcjY3OTM1MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/679350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/diablodale",
            "html_url": "https://github.com/diablodale",
            "followers_url": "https://api.github.com/users/diablodale/followers",
            "following_url": "https://api.github.com/users/diablodale/following{/other_user}",
            "gists_url": "https://api.github.com/users/diablodale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/diablodale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/diablodale/subscriptions",
            "organizations_url": "https://api.github.com/users/diablodale/orgs",
            "repos_url": "https://api.github.com/users/diablodale/repos",
            "events_url": "https://api.github.com/users/diablodale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/diablodale/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-05T20:49:52Z",
        "updated_at": "2022-12-05T20:49:52Z",
        "author_association": "CONTRIBUTOR",
        "body": "@deischi, can you create a tiny repro of the crash you experience? I'm soon to submit a PR to fix some of the issues and want to be sure that your case is covered",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338144524/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338866360",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1338866360",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1338866360,
        "node_id": "IC_kwDOCVq1mM5PzXq4",
        "user": {
            "login": "deischi",
            "id": 308504,
            "node_id": "MDQ6VXNlcjMwODUwNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/308504?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/deischi",
            "html_url": "https://github.com/deischi",
            "followers_url": "https://api.github.com/users/deischi/followers",
            "following_url": "https://api.github.com/users/deischi/following{/other_user}",
            "gists_url": "https://api.github.com/users/deischi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/deischi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deischi/subscriptions",
            "organizations_url": "https://api.github.com/users/deischi/orgs",
            "repos_url": "https://api.github.com/users/deischi/repos",
            "events_url": "https://api.github.com/users/deischi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/deischi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T06:46:40Z",
        "updated_at": "2022-12-06T06:46:40Z",
        "author_association": "NONE",
        "body": "Thanks Dale. I have created a very reduced example at https://github.com/deischi/OrtReleaseCrash",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1338866360/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1339505516",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1339505516",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1339505516,
        "node_id": "IC_kwDOCVq1mM5P1zts",
        "user": {
            "login": "diablodale",
            "id": 679350,
            "node_id": "MDQ6VXNlcjY3OTM1MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/679350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/diablodale",
            "html_url": "https://github.com/diablodale",
            "followers_url": "https://api.github.com/users/diablodale/followers",
            "following_url": "https://api.github.com/users/diablodale/following{/other_user}",
            "gists_url": "https://api.github.com/users/diablodale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/diablodale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/diablodale/subscriptions",
            "organizations_url": "https://api.github.com/users/diablodale/orgs",
            "repos_url": "https://api.github.com/users/diablodale/repos",
            "events_url": "https://api.github.com/users/diablodale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/diablodale/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T14:54:28Z",
        "updated_at": "2022-12-06T14:55:08Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks :-) Yes, that crash scenario my PR will address. I've been running my fix for 2+ months with no problems.\r\nThe fix is trivial. Yet, it touches a core and frequently used path so I look forward to its broader testing in the CI here and peer review.\r\n\r\nI'm not adding code to check for null in the deeper functions I found in https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1335277542 as these paths don't address either of our crash scenarios. Instead, that pathway crash could be caused by implementations of `operator delete` by external allocators (e.g. mimalloc) or directly on class (e.g. `GraphProto::operator delete()`. The C++ spec promises its `operator delete` will ignore NULL. I checked mimalloc and it with `mi_free()` also ignores NULL. Given this is an edge case, rather unexpected behavior hidden deep in the c++ spec, and not either of our crash scenarios...I see no reason to add a null check on this pathway.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1339505516/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1339748170",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/12736#issuecomment-1339748170",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/12736",
        "id": 1339748170,
        "node_id": "IC_kwDOCVq1mM5P2u9K",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T17:47:09Z",
        "updated_at": "2022-12-06T17:47:09Z",
        "author_association": "MEMBER",
        "body": "@edgchen1 @yuslepukhin @pranavsharma  would you please take a look at the [sample](https://github.com/deischi/OrtReleaseCrash) and let us know what you think.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1339748170/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]