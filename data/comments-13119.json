[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1259146010",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13119#issuecomment-1259146010",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13119",
        "id": 1259146010,
        "node_id": "IC_kwDOCVq1mM5LDQsa",
        "user": {
            "login": "diablodale",
            "id": 679350,
            "node_id": "MDQ6VXNlcjY3OTM1MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/679350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/diablodale",
            "html_url": "https://github.com/diablodale",
            "followers_url": "https://api.github.com/users/diablodale/followers",
            "following_url": "https://api.github.com/users/diablodale/following{/other_user}",
            "gists_url": "https://api.github.com/users/diablodale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/diablodale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/diablodale/subscriptions",
            "organizations_url": "https://api.github.com/users/diablodale/orgs",
            "repos_url": "https://api.github.com/users/diablodale/repos",
            "events_url": "https://api.github.com/users/diablodale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/diablodale/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-27T08:11:58Z",
        "updated_at": "2022-09-27T08:11:58Z",
        "author_association": "CONTRIBUTOR",
        "body": "In my local build of onnxruntime, I did the following to achieve 64-bit align of DML output tensor data. This will demonstrate the codepaths and start our discussion on how this can be generalized for everyone.\r\n\r\n`BucketizedBufferAllocator.cpp` I like this change for everyone as it will use the Default's os-specific aligners\r\n```c++\r\nvoid* CPUAllocator::Alloc(size_t size)\r\n{\r\n    return onnxruntime::AllocatorDefaultAlloc(size);\r\n}\r\n\r\nvoid CPUAllocator::Free(void* p)\r\n{\r\n    return onnxruntime::AllocatorDefaultFree(p);\r\n}\r\n```\r\n\r\n`framework/allocator.cc` is a unproven tweak to prevent repeated calls to `MlasGetPreferredBufferAlignment()` that is not always a compile-time constant. Add `static` in two places for std and mimalloc\r\n```c++\r\nvoid* AllocatorDefaultAlloc(size_t size) {\r\n  static const size_t alignment = MlasGetPreferredBufferAlignment();\r\n  ...\r\n```\r\n\r\nFinally for my amd64 capable machine, which onnxruntime code defines as `MLAS_TARGET_AMD64` I need to change `MlasGetPreferredBufferAlignment()` to always return 64. I changed `onnxruntime/core/mlas/lib/mlasi.h` to `#define MLAS_DEFAULT_PREFERRED_BUFFER_ALIGNMENT 64`. Then the initialization and later call to `GetMlasPlatform().PreferredBufferAlignment` will return that 64.\r\n\r\nThough for my private build, I later changed `AllocatorDefaultAlloc()` to have a hardcoded 64 to eliminate unneeded codepaths.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1259146010/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1260091117",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13119#issuecomment-1260091117",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13119",
        "id": 1260091117,
        "node_id": "IC_kwDOCVq1mM5LG3bt",
        "user": {
            "login": "fdwr",
            "id": 1809166,
            "node_id": "MDQ6VXNlcjE4MDkxNjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1809166?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fdwr",
            "html_url": "https://github.com/fdwr",
            "followers_url": "https://api.github.com/users/fdwr/followers",
            "following_url": "https://api.github.com/users/fdwr/following{/other_user}",
            "gists_url": "https://api.github.com/users/fdwr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fdwr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fdwr/subscriptions",
            "organizations_url": "https://api.github.com/users/fdwr/orgs",
            "repos_url": "https://api.github.com/users/fdwr/repos",
            "events_url": "https://api.github.com/users/fdwr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fdwr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-27T21:50:28Z",
        "updated_at": "2022-10-14T19:33:48Z",
        "author_association": "MEMBER",
        "body": "diablodale: To make our CPU-side allocation consistent with the default CPU EP allocator, we can just forward `Dml::CPUAllocator` to [AllocatorDefaultAlloc](https://github.com/microsoft/onnxruntime/blame/main/onnxruntime/core/framework/allocator.cc#L74) like you suggest to return a larger alignment (32 or 64 byte).\r\n\r\nFor any changes to core ORT (like framework/allocator.cc or mlasi.h) or potentially even the ORT API, we'd want input from someone on ORT core.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1260091117/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1279094124",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13119#issuecomment-1279094124",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13119",
        "id": 1279094124,
        "node_id": "IC_kwDOCVq1mM5MPW1s",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-14T14:34:32Z",
        "updated_at": "2022-10-14T14:34:32Z",
        "author_association": "MEMBER",
        "body": "@yuslepukhin @pranavsharma , what do you think?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1279094124/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]