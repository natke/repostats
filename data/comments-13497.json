[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1305960361",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13497#issuecomment-1305960361",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13497",
        "id": 1305960361,
        "node_id": "IC_kwDOCVq1mM5N11-p",
        "user": {
            "login": "jywu-msft",
            "id": 43355415,
            "node_id": "MDQ6VXNlcjQzMzU1NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/43355415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jywu-msft",
            "html_url": "https://github.com/jywu-msft",
            "followers_url": "https://api.github.com/users/jywu-msft/followers",
            "following_url": "https://api.github.com/users/jywu-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/jywu-msft/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jywu-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jywu-msft/subscriptions",
            "organizations_url": "https://api.github.com/users/jywu-msft/orgs",
            "repos_url": "https://api.github.com/users/jywu-msft/repos",
            "events_url": "https://api.github.com/users/jywu-msft/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jywu-msft/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-07T17:38:00Z",
        "updated_at": "2022-11-07T17:38:00Z",
        "author_association": "MEMBER",
        "body": "the ONNX spec does seem a bit vague. I think in ORT, we assume if the spec uses the same type variable name, we enforce they are the same type. \r\nYou mentioned this is regression compared to before? Can you pinpoint the specific ORT version where this didn't fail?\r\nAs far as I can tell, the check has been there since the beginning. \r\n+@jcwchen @pranavsharma for their view on the ONNX spec and how we should be handling in ORT.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1305960361/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1306165137",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/13497#issuecomment-1306165137",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/13497",
        "id": 1306165137,
        "node_id": "IC_kwDOCVq1mM5N2n-R",
        "user": {
            "login": "jcwchen",
            "id": 14194980,
            "node_id": "MDQ6VXNlcjE0MTk0OTgw",
            "avatar_url": "https://avatars.githubusercontent.com/u/14194980?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcwchen",
            "html_url": "https://github.com/jcwchen",
            "followers_url": "https://api.github.com/users/jcwchen/followers",
            "following_url": "https://api.github.com/users/jcwchen/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcwchen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcwchen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcwchen/subscriptions",
            "organizations_url": "https://api.github.com/users/jcwchen/orgs",
            "repos_url": "https://api.github.com/users/jcwchen/repos",
            "events_url": "https://api.github.com/users/jcwchen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcwchen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-07T20:44:30Z",
        "updated_at": "2022-11-07T20:44:30Z",
        "author_association": "MEMBER",
        "body": "Thank you for providing the model to repro. Actually from ONNX shape inference's perspective, this is not a valid case either. The types for the same variable name should be consistent. See the code:\r\n```\r\nimport onnx\r\nmodel = onnx.load(\"conformer-autocast.onnx\")\r\nonnx.checker.check_model(model, full_check=True)\r\ninferred = onnx.shape_inference.infer_shapes(model, check_type=True)\r\n# throw: InferenceError: [ShapeInferenceError] (op_type:Slice, node name: Slice_64): axes has inconsistent type tensor(int64)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1306165137/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]