[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1440663074",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1440663074",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1440663074,
        "node_id": "IC_kwDOCVq1mM5V3sYi",
        "user": {
            "login": "natke",
            "id": 3302433,
            "node_id": "MDQ6VXNlcjMzMDI0MzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3302433?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/natke",
            "html_url": "https://github.com/natke",
            "followers_url": "https://api.github.com/users/natke/followers",
            "following_url": "https://api.github.com/users/natke/following{/other_user}",
            "gists_url": "https://api.github.com/users/natke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/natke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/natke/subscriptions",
            "organizations_url": "https://api.github.com/users/natke/orgs",
            "repos_url": "https://api.github.com/users/natke/repos",
            "events_url": "https://api.github.com/users/natke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/natke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-22T19:20:29Z",
        "updated_at": "2023-02-22T19:20:29Z",
        "author_association": "MEMBER",
        "body": "Thank you for the detailed repro steps @ivanrhsosa. We will look into the issue",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1440663074/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1440757789",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1440757789",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1440757789,
        "node_id": "IC_kwDOCVq1mM5V4Dgd",
        "user": {
            "login": "YUNQIUGUO",
            "id": 35738743,
            "node_id": "MDQ6VXNlcjM1NzM4NzQz",
            "avatar_url": "https://avatars.githubusercontent.com/u/35738743?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/YUNQIUGUO",
            "html_url": "https://github.com/YUNQIUGUO",
            "followers_url": "https://api.github.com/users/YUNQIUGUO/followers",
            "following_url": "https://api.github.com/users/YUNQIUGUO/following{/other_user}",
            "gists_url": "https://api.github.com/users/YUNQIUGUO/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/YUNQIUGUO/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/YUNQIUGUO/subscriptions",
            "organizations_url": "https://api.github.com/users/YUNQIUGUO/orgs",
            "repos_url": "https://api.github.com/users/YUNQIUGUO/repos",
            "events_url": "https://api.github.com/users/YUNQIUGUO/events{/privacy}",
            "received_events_url": "https://api.github.com/users/YUNQIUGUO/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-22T20:30:52Z",
        "updated_at": "2023-02-22T20:31:59Z",
        "author_association": "MEMBER",
        "body": "Hi,\r\n\r\nAFAIK, onnxruntime js/react_native tensortypetoTypedArray supports BigInt64Array type.\r\n\r\nhttps://github.com/microsoft/onnxruntime/blob/f76ff8c5586b305c3f19ebb47d2d3dd315f9b4d9/js/react_native/lib/backend.ts#L32-L33\r\n\r\nand there is a check for if https://github.com/microsoft/onnxruntime/blob/f76ff8c5586b305c3f19ebb47d2d3dd315f9b4d9/js/common/lib/tensor-impl.ts#L14-L15 the bigInt64Array type is available from react native side.\r\n\r\nFor your case, most possibly it's that React Native uses JScore as javascript engine, which does not support BigInt natively but  latest iOS’s JSC might have BigInt but Android doesn’t AFAIK.\r\n\r\nNot an expert in react_native or javascript field, correct me if I am wrong.\r\n\r\nFound these as a workaround - implement a simple polyfill for using BigInt in RN, not sure if it's helpful \r\n\r\n`if (typeof BigInt === 'undefined') {\r\n    global.BigInt = require('big-integer');\r\n}` \r\n\r\nhttps://www.npmjs.com/package/big-integer",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1440757789/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1440798768",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1440798768",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1440798768,
        "node_id": "IC_kwDOCVq1mM5V4Ngw",
        "user": {
            "login": "ivanrhsosa",
            "id": 81785692,
            "node_id": "MDQ6VXNlcjgxNzg1Njky",
            "avatar_url": "https://avatars.githubusercontent.com/u/81785692?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ivanrhsosa",
            "html_url": "https://github.com/ivanrhsosa",
            "followers_url": "https://api.github.com/users/ivanrhsosa/followers",
            "following_url": "https://api.github.com/users/ivanrhsosa/following{/other_user}",
            "gists_url": "https://api.github.com/users/ivanrhsosa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ivanrhsosa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ivanrhsosa/subscriptions",
            "organizations_url": "https://api.github.com/users/ivanrhsosa/orgs",
            "repos_url": "https://api.github.com/users/ivanrhsosa/repos",
            "events_url": "https://api.github.com/users/ivanrhsosa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ivanrhsosa/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-22T21:08:33Z",
        "updated_at": "2023-02-22T21:38:44Z",
        "author_association": "NONE",
        "body": "Hi @YUNQIUGUO, I tried the BigInt polyfill before summiting this issue and couldn't fix the BigInt64Array error. \r\nI am going to try again this workaround and I will report here the result. Thanks",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1440798768/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1440986814",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1440986814",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1440986814,
        "node_id": "IC_kwDOCVq1mM5V47a-",
        "user": {
            "login": "ivanrhsosa",
            "id": 81785692,
            "node_id": "MDQ6VXNlcjgxNzg1Njky",
            "avatar_url": "https://avatars.githubusercontent.com/u/81785692?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ivanrhsosa",
            "html_url": "https://github.com/ivanrhsosa",
            "followers_url": "https://api.github.com/users/ivanrhsosa/followers",
            "following_url": "https://api.github.com/users/ivanrhsosa/following{/other_user}",
            "gists_url": "https://api.github.com/users/ivanrhsosa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ivanrhsosa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ivanrhsosa/subscriptions",
            "organizations_url": "https://api.github.com/users/ivanrhsosa/orgs",
            "repos_url": "https://api.github.com/users/ivanrhsosa/repos",
            "events_url": "https://api.github.com/users/ivanrhsosa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ivanrhsosa/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-22T23:17:45Z",
        "updated_at": "2023-02-22T23:18:14Z",
        "author_association": "NONE",
        "body": "I added the big-integer library: \"big-integer\": \"^1.6.51\"\r\n\r\nand added the polyfill at the beginning of each function:\r\n\r\n`if (typeof BigInt64Array === 'undefined') {\r\n      global.BigInt64Array = require('big-integer')\r\n    }`\r\n\r\nI can now pass the BigInt64Array error but I am getting the following error: \"o is not a valid digit in base 0\"\r\n\r\n<img width=\"383\" alt=\"Screen Shot 2023-02-22 at 5 54 23 PM\" src=\"https://user-images.githubusercontent.com/81785692/220782895-d2a81385-307a-4b1f-9cd3-2d6fd837efa1.png\">\r\n\r\nI updated the repo (main branch) to replicate the new error.\r\nThanks",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1440986814/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1449133016",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1449133016",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1449133016,
        "node_id": "IC_kwDOCVq1mM5WYAPY",
        "user": {
            "login": "YUNQIUGUO",
            "id": 35738743,
            "node_id": "MDQ6VXNlcjM1NzM4NzQz",
            "avatar_url": "https://avatars.githubusercontent.com/u/35738743?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/YUNQIUGUO",
            "html_url": "https://github.com/YUNQIUGUO",
            "followers_url": "https://api.github.com/users/YUNQIUGUO/followers",
            "following_url": "https://api.github.com/users/YUNQIUGUO/following{/other_user}",
            "gists_url": "https://api.github.com/users/YUNQIUGUO/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/YUNQIUGUO/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/YUNQIUGUO/subscriptions",
            "organizations_url": "https://api.github.com/users/YUNQIUGUO/orgs",
            "repos_url": "https://api.github.com/users/YUNQIUGUO/repos",
            "events_url": "https://api.github.com/users/YUNQIUGUO/events{/privacy}",
            "received_events_url": "https://api.github.com/users/YUNQIUGUO/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-01T00:31:39Z",
        "updated_at": "2023-03-01T00:31:39Z",
        "author_association": "MEMBER",
        "body": "hi, @fs-eire any idea on this?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1449133016/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1449932666",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1449932666",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1449932666,
        "node_id": "IC_kwDOCVq1mM5WbDd6",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-01T11:22:24Z",
        "updated_at": "2023-03-01T11:29:53Z",
        "author_association": "MEMBER",
        "body": "Wild-assed guess, but could something be off in how it's trying to construct the BigInt64Array for the `base` to be 0. We do that here:\r\n\r\nhttps://github.com/microsoft/onnxruntime/blob/f76ff8c5586b305c3f19ebb47d2d3dd315f9b4d9/js/react_native/lib/backend.ts#L141\r\n\r\nOf those values, it seems possible that the offset would be 0, which coincides with the 'base' argument of the plain bigInt constructor\r\n\r\nhttps://www.npmjs.com/package/big-integer\r\n> bigInt(number, [base], [alphabet], [caseSensitive])\r\n\r\nI couldn't find a 'BigInt64Array' in the big-integer npm so I'm not sure if the constructor we're trying to use that takes an existing buffer is supported or not.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array\r\n\r\nAnd this alternative BigInt library chose not to attempt supporting BigInt64Array: https://github.com/GoogleChromeLabs/jsbi/issues/4#issuecomment-1065345514",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1449932666/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1450376176",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1450376176",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1450376176,
        "node_id": "IC_kwDOCVq1mM5Wcvvw",
        "user": {
            "login": "ivanrhsosa",
            "id": 81785692,
            "node_id": "MDQ6VXNlcjgxNzg1Njky",
            "avatar_url": "https://avatars.githubusercontent.com/u/81785692?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ivanrhsosa",
            "html_url": "https://github.com/ivanrhsosa",
            "followers_url": "https://api.github.com/users/ivanrhsosa/followers",
            "following_url": "https://api.github.com/users/ivanrhsosa/following{/other_user}",
            "gists_url": "https://api.github.com/users/ivanrhsosa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ivanrhsosa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ivanrhsosa/subscriptions",
            "organizations_url": "https://api.github.com/users/ivanrhsosa/orgs",
            "repos_url": "https://api.github.com/users/ivanrhsosa/repos",
            "events_url": "https://api.github.com/users/ivanrhsosa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ivanrhsosa/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-01T15:49:31Z",
        "updated_at": "2023-03-01T15:49:31Z",
        "author_association": "NONE",
        "body": "Thanks @skottmckay \r\nI agree that the big-integer library is not giving BigInt64Array full support to the android environment. I am going to try to find other libraries to test. Thanks",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1450376176/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1451013069",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1451013069",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1451013069,
        "node_id": "IC_kwDOCVq1mM5WfLPN",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-01T23:15:50Z",
        "updated_at": "2023-03-01T23:15:50Z",
        "author_association": "MEMBER",
        "body": "@fs-eire would jsbi DataView be an option for int64/uint64 support when the typed array isn't available?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1451013069/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1452862410",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1452862410",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1452862410,
        "node_id": "IC_kwDOCVq1mM5WmOvK",
        "user": {
            "login": "fs-eire",
            "id": 7679871,
            "node_id": "MDQ6VXNlcjc2Nzk4NzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7679871?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fs-eire",
            "html_url": "https://github.com/fs-eire",
            "followers_url": "https://api.github.com/users/fs-eire/followers",
            "following_url": "https://api.github.com/users/fs-eire/following{/other_user}",
            "gists_url": "https://api.github.com/users/fs-eire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fs-eire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fs-eire/subscriptions",
            "organizations_url": "https://api.github.com/users/fs-eire/orgs",
            "repos_url": "https://api.github.com/users/fs-eire/repos",
            "events_url": "https://api.github.com/users/fs-eire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fs-eire/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-03T02:28:33Z",
        "updated_at": "2023-03-03T02:28:33Z",
        "author_association": "MEMBER",
        "body": "I think the problem is that in this context, BigInt64Array is used for model input/output as a part of ORT JS API. If the JavaScript engine does not support `BigInt64Array`, a common practice is to use a polyfill. From the discussion above, it seems no existing polyfill for `BigInt64Array` is available now.\r\n\r\nThere are 2 solutions for now:\r\n1. write a simplified polyfill for `BigInt64Array` based on jsbi or big-integer. We use very few properties of it so it could be easier than we thought.\r\n2. modify the model to connect input/output with a `Cast` operator for int32<-->int64 to avoid using bigint.\r\n\r\n\r\nhttps://retyui.github.io/react-native-compat-table/\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1452862410/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1452868709",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1452868709",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1452868709,
        "node_id": "IC_kwDOCVq1mM5WmQRl",
        "user": {
            "login": "fs-eire",
            "id": 7679871,
            "node_id": "MDQ6VXNlcjc2Nzk4NzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7679871?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fs-eire",
            "html_url": "https://github.com/fs-eire",
            "followers_url": "https://api.github.com/users/fs-eire/followers",
            "following_url": "https://api.github.com/users/fs-eire/following{/other_user}",
            "gists_url": "https://api.github.com/users/fs-eire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fs-eire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fs-eire/subscriptions",
            "organizations_url": "https://api.github.com/users/fs-eire/orgs",
            "repos_url": "https://api.github.com/users/fs-eire/repos",
            "events_url": "https://api.github.com/users/fs-eire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fs-eire/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-03T02:33:51Z",
        "updated_at": "2023-03-03T02:33:51Z",
        "author_association": "MEMBER",
        "body": "> @fs-eire would jsbi DataView be an option for int64/uint64 support when the typed array isn't available?\r\n\r\nPolyfill is a technic that works in a way to leverage the dynamic language feature of JavaScript to add object to global while being able to avoid modify the project source code. So as the discussion mentioned [here](https://github.com/GoogleChromeLabs/jsbi/issues/4#issuecomment-1065345514), there is no technical blocker to make a polyfill of `BigInt64Array` to make it work with onnxruntime-react-native through ORT JS API (`Proxy` is supported in Hermes). It's just not going to be a part of ORT JS API.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1452868709/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1452986176",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1452986176",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1452986176,
        "node_id": "IC_kwDOCVq1mM5Wms9A",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-03T05:13:12Z",
        "updated_at": "2023-03-03T05:13:12Z",
        "author_association": "MEMBER",
        "body": "@fs-eire Doesn't it need to be part of the ORT JS API, because if not it seems like on Android it can't handle int64 input/output? That would be a significant issue given language models use int64 for input/output. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1452986176/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1453347006",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1453347006",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1453347006,
        "node_id": "IC_kwDOCVq1mM5WoFC-",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-03T10:55:05Z",
        "updated_at": "2023-03-03T10:55:05Z",
        "author_association": "MEMBER",
        "body": "I don't know if this is the best approach and I'm completely new to typescript so most likely there are better ways to do things, but wondering if we can use these types as the fallback if BigInt64Array isn't available. Maybe we can use declaration merging to add it to SupportedTypedArrayConstructors.\r\n\r\nIt largely works although I'm having an issue creating a valid DataView from a Buffer (the data in Buffer.buffer is correct but seems completely different from what a DataView returns) but is unrelated to the changes.\r\n\r\n```typescript\r\nconst JSBI = require('jsbi');\r\ntype OrtBigInt = typeof JSBI.BigInt;\r\n\r\n// https://github.com/microsoft/TypeScript/blob/b19cfc03f2cdd3b21bdec2ea1367732ef2bce937/src/lib/es2020.bigint.d.ts#L125\r\ndeclare var OrtBigInt64Array: OrtBigInt64ArrayConstructor;\r\n\r\n// https://github.com/microsoft/TypeScript/blob/b19cfc03f2cdd3b21bdec2ea1367732ef2bce937/src/lib/es2020.bigint.d.ts#L131\r\ninterface OrtBigInt64Array {\r\n    /** The size in bytes of each element in the array. */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /** The ArrayBuffer instance referenced by the array. */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /** The length in bytes of the array. */\r\n    readonly byteLength: number;\r\n\r\n    /** The offset in bytes of the array. */\r\n    readonly byteOffset: number;\r\n\r\n    /** The length of the array. */\r\n    readonly length: number;\r\n\r\n    // TODO: Do we need any other methods like `fill`? \r\n\r\n    /** Converts the array to a string by using the current locale. */\r\n    toLocaleString(): string;\r\n\r\n    /** Returns a string representation of the array. */\r\n    toString(): string;\r\n\r\n    // /** Returns the primitive value of the specified object. */\r\n    // valueOf(): BigUint64Array;\r\n\r\n    // /** Yields each value in the array. */\r\n    // values(): IterableIterator<OrtBigInt>;\r\n\r\n    // [Symbol.iterator](): IterableIterator<OrtBigInt>;\r\n\r\n    readonly [Symbol.toStringTag]: \"OrtBigInt64Array\";\r\n\r\n    [index: number]: OrtBigInt;\r\n\r\n}\r\n\r\n// https://github.com/microsoft/TypeScript/blob/b19cfc03f2cdd3b21bdec2ea1367732ef2bce937/src/lib/es2020.bigint.d.ts#L372\r\nexport interface OrtBigInt64ArrayConstructor {\r\n    readonly prototype: OrtBigInt64Array;\r\n    new(length?: number): OrtBigInt64Array;\r\n    // new(array: Iterable<BigInt>): OrtBigInt64Array; Not sure if we need this or how to determine the buffer size required upfront\r\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): OrtBigInt64Array;\r\n\r\n    /** The size in bytes of each element in the array. */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n        * Returns a new array from a set of elements.\r\n        * @param items A set of elements to include in the new array object.\r\n        */\r\n    of(...items: OrtBigInt[]): OrtBigInt64Array;\r\n\r\n    /**\r\n        * Creates an array from an array-like or iterable object.\r\n        * @param arrayLike An array-like or iterable object to convert to an array.\r\n        * @param mapfn A mapping function to call on every element of the array.\r\n        * @param thisArg Value of 'this' used to invoke the mapfn.\r\n        */\r\n    from(arrayLike: ArrayLike<OrtBigInt>): OrtBigInt64Array;\r\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => OrtBigInt, thisArg?: any): OrtBigInt64Array;\r\n}\r\n\r\nexport class OrtBigInt64ArrayImpl implements OrtBigInt64Array {\r\n    buffer: ArrayBuffer;\r\n    byteLength: number;\r\n    byteOffset: number;\r\n    length: number;\r\n    readonly BYTES_PER_ELEMENT = 8;\r\n    private view: DataView;\r\n\r\n    // readonly prototype: OrtBigInt64Array;\r\n    readonly [Symbol.toStringTag]: \"OrtBigInt64Array\";\r\n    static readonly littleEndian: boolean = true; // TODO: Determine correct value.\r\n\r\n    [n: number]: OrtBigInt;\r\n    toString(): string { return \"Not implemented\"; }\r\n    toLocaleString(): string { return \"Not implemented\"; }\r\n\r\n    public constructor(length?: number);\r\n    // constructor(array: Iterable<BigInt>): OrtBigInt64Array;\r\n    public constructor(buffer: ArrayBuffer, byteOffset?: number, length?: number);\r\n    public constructor(...args: any[]) {\r\n        if (args.length == 0) {\r\n            throw new Error(\"Creating an empty array is not supported. \" +\r\n                \"Please create an array of a fixed size and set elements individually.\")\r\n        }\r\n\r\n        if (args.length == 1 && typeof args[0] == 'number') {\r\n            this.length = args[0];\r\n            this.byteLength = this.length * this.BYTES_PER_ELEMENT;\r\n            this.buffer = new ArrayBuffer(this.byteLength);\r\n            this.byteOffset = 0;\r\n        }\r\n        else {\r\n            this.buffer = args[0] as ArrayBuffer;\r\n\r\n            const offset = args[1] as number;\r\n            this.byteOffset = offset ? offset : 0;\r\n\r\n            const length = args[2] as number;\r\n            this.length = length ? length : this.buffer.byteLength / this.BYTES_PER_ELEMENT;\r\n            this.byteLength = this.length * this.BYTES_PER_ELEMENT;\r\n        }\r\n\r\n        this.view = new DataView(this.buffer, this.byteOffset, this.byteLength);\r\n\r\n        // add a Proxy so [] can be used to access the array.\r\n        // this isn't ideal as the index is converted from number to string when calling the proxy and back again\r\n        // to do the lookup. not sure if there's a better way though\r\n        return new Proxy(this, {\r\n            get: function (target, key): OrtBigInt {\r\n                if (key in target) {\r\n                    return target[key];\r\n                }\r\n\r\n                if (typeof key == 'string')\r\n                    return target.get(Number(key));\r\n                else\r\n                    throw new Error(\"Expected number for index.\");\r\n            },\r\n            set: function (target, key, value) {\r\n                if (key in target) {\r\n                    return target[key] = value;\r\n                }\r\n\r\n                if (typeof key == 'string')\r\n                    return target.set(Number(key), value);\r\n                else\r\n                    throw new Error(\"Expected number for index.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    set(index: number, value: OrtBigInt) {\r\n        if (index >= this.length) {\r\n            throw new Error(`Invalid index ${index} for length ${this.length}`);\r\n        }\r\n\r\n        JSBI.DataViewSetBigInt64(this.view, index * this.BYTES_PER_ELEMENT, value, OrtBigInt64ArrayImpl.littleEndian);\r\n\r\n        return true;\r\n    }\r\n\r\n    get(index: number): OrtBigInt {\r\n        if (index >= this.length) {\r\n            throw new Error(`Invalid index ${index} for length ${this.length}`);\r\n        }\r\n\r\n        return JSBI.DataViewGetBigInt64(this.view, index, OrtBigInt64ArrayImpl.littleEndian);\r\n    }\r\n\r\n    of(...items: OrtBigInt[]): OrtBigInt64Array {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n\r\n\r\n    from(arrayLike: ArrayLike<OrtBigInt>): OrtBigInt64Array;\r\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => OrtBigInt, thisArg?: any): OrtBigInt64Array;\r\n    from<U>(arrayLike: unknown, mapfnArg?: unknown, thisArg?: any): OrtBigInt64Array {\r\n        const array = arrayLike as ArrayLike<U>\r\n        var i64Array = new OrtBigInt64Array(array.length);\r\n\r\n        var mapfn = mapfnArg ? (mapfnArg as (v: U, k: number) => OrtBigInt) : null;\r\n\r\n        for (let i = 0; i < i64Array.length; i++) {\r\n            var value = arrayLike[i];\r\n\r\n            if (mapfn) {\r\n                value = (thisArg ? thisArg.mapfn(value, 0) : mapfn(value, 0));\r\n            }\r\n            if (!(value instanceof BigInt)) {\r\n                throw new Error(`Invalid value of type ${typeof value}`);\r\n            }\r\n\r\n            i64Array[i] = value as OrtBigInt;\r\n        }\r\n\r\n        return i64Array;\r\n    }\r\n}\r\n```\r\n\r\nDataView buffer issue in case there's something obvious.\r\n\r\nBuffer created from base64 encoded int64 data. First value is int64 max so all but one bit in the first 8 bytes being set is correct\r\n\r\n<img width=\"303\" alt=\"image\" src=\"https://user-images.githubusercontent.com/979079/222702049-c4de4bce-55b0-4e0e-a941-6acadf14e903.png\">\r\n\r\nSomething is off when I create even an Int8Array from that. Not clear to me how the first 7 bytes with all bits set end up as 92 and 0's.\r\n\r\n<img width=\"635\" alt=\"image\" src=\"https://user-images.githubusercontent.com/979079/222702291-7e9ca5e5-aed7-4a22-b842-74959cda7277.png\">\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1453347006/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1454312247",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1454312247",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1454312247,
        "node_id": "IC_kwDOCVq1mM5Wrws3",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-04T01:04:24Z",
        "updated_at": "2023-03-04T01:04:24Z",
        "author_association": "MEMBER",
        "body": "@ivanrhsosa is BigInt available? If so we can possible lift some of the implementation logic from the JSBI DataView to read/write the correct bits to the underlying buffer, and use the 'real' BigInt instead of JSBI.BigInt in OrtBigInt64Array to simplify further. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1454312247/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1454904035",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1454904035",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1454904035,
        "node_id": "IC_kwDOCVq1mM5WuBLj",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-04T22:14:21Z",
        "updated_at": "2023-03-04T23:09:26Z",
        "author_association": "MEMBER",
        "body": "Working version of the basic BigInt64Array with `from` below. I _think_ that's all the ORT javascript layer requires. FWIW The error I was seeing was due to weirdness in how Buffer.from works. It decodes the base64 string to the end of the underlying ArrayBuffer so passing in the offset from Buffer is required. I'm sure there's a good reason but it's really not intuitive behaviour.\r\n\r\nAssuming this is a reasonable approach what is the best way to enable this? A shim (OrtBigInt/OrtBigInt64Array) seems slightly more user friendly/consistent given BigInt isn't polyfillable (as per https://www.npmjs.com/package/jsbi) but would be a breaking change to switch to that and I assume this problem goes away over the next few years at which point the shim is unnecessary overhead. \r\n\r\nAlternatively can we use it as a fallback if BigInt/BigInt64Array isn't available? User code would need to be aware of the two sets of types though and the limitations of this version but maybe that's ok as it's maybe a cut-and-paste of some helpers to abstract away whether the FSBI based version is being used.\r\n\r\nI think we would be able to use this type in NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP as a drop in replacement for BigInt64Array but those are currently internal types. \r\n\r\nNot sure how to update the TensorConstructor interface though. Maybe that can be done at a higher level.\r\n\r\n@fs-eire thoughts? \r\n\r\n```typescript\r\nconst JSBI = require('jsbi');\r\ntype OrtBigInt = typeof JSBI.BigInt;\r\n\r\n// https://github.com/microsoft/TypeScript/blob/b19cfc03f2cdd3b21bdec2ea1367732ef2bce937/src/lib/es2020.bigint.d.ts#L131\r\nexport interface OrtBigInt64Array {\r\n    /** The size in bytes of each element in the array. */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /** The ArrayBuffer instance referenced by the array. */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /** The length in bytes of the array. */\r\n    readonly byteLength: number;\r\n\r\n    /** The offset in bytes of the array. */\r\n    readonly byteOffset: number;\r\n\r\n    /** The length of the array. */\r\n    readonly length: number;\r\n\r\n    // TODO: Do we need any other methods like `fill`? \r\n\r\n    /** Converts the array to a string by using the current locale. */\r\n    toLocaleString(): string;\r\n\r\n    /** Returns a string representation of the array. */\r\n    toString(): string;\r\n\r\n    readonly [Symbol.toStringTag]: \"OrtBigInt64Array\";\r\n\r\n    [index: number]: OrtBigInt;\r\n}\r\n\r\n// https://github.com/microsoft/TypeScript/blob/b19cfc03f2cdd3b21bdec2ea1367732ef2bce937/src/lib/es2020.bigint.d.ts#L372\r\nexport interface OrtBigInt64ArrayConstructor {\r\n    readonly prototype: OrtBigInt64Array;\r\n    new(length?: number): OrtBigInt64Array;\r\n    // new(array: Iterable<BigInt>): OrtBigInt64Array; Not sure if we need this or how to determine the buffer size required upfront\r\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): OrtBigInt64Array;\r\n\r\n    /** The size in bytes of each element in the array. */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n        * Creates an array from an array-like or iterable object.\r\n        * @param arrayLike An array-like or iterable object to convert to an array.\r\n        * @param mapfn A mapping function to call on every element of the array.\r\n        * @param thisArg Value of 'this' used to invoke the mapfn.\r\n        */\r\n    from(arrayLike: ArrayLike<OrtBigInt>): OrtBigInt64Array;\r\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => OrtBigInt, thisArg?: any): OrtBigInt64Array;\r\n}\r\n\r\n// https://github.com/microsoft/TypeScript/blob/b19cfc03f2cdd3b21bdec2ea1367732ef2bce937/src/lib/es2020.bigint.d.ts#L397\r\ndeclare var OrtBigInt64Array: OrtBigInt64ArrayConstructor;\r\n\r\nexport class OrtBigInt64ArrayImpl implements OrtBigInt64Array {\r\n    buffer: ArrayBuffer;\r\n    byteLength: number;\r\n    byteOffset: number;\r\n    length: number;\r\n    readonly BYTES_PER_ELEMENT = 8;\r\n    private view: DataView;\r\n\r\n    // readonly prototype: OrtBigInt64Array;\r\n    readonly [Symbol.toStringTag]: \"OrtBigInt64Array\";\r\n    static readonly littleEndian: boolean = true; // TODO: Determine correct value.\r\n\r\n    [n: number]: OrtBigInt;\r\n    toString(): string { return \"Not implemented\"; }\r\n    toLocaleString(): string { return \"Not implemented\"; }\r\n\r\n    public constructor(length?: number);\r\n    // constructor(array: Iterable<BigInt>): OrtBigInt64Array;\r\n    public constructor(buffer: ArrayBuffer, byteOffset?: number, length?: number);\r\n    public constructor(...args: any[]) {\r\n        if (args.length == 0) {\r\n            throw new Error(\"Creating an empty array is not supported. \" +\r\n                \"Please create an array of a fixed size and set elements individually.\")\r\n        }\r\n\r\n        if (args.length == 1 && typeof args[0] == 'number') {\r\n            this.length = args[0];\r\n            this.byteLength = this.length * this.BYTES_PER_ELEMENT;\r\n            this.buffer = new ArrayBuffer(this.byteLength);\r\n            this.byteOffset = 0;\r\n        }\r\n        else {\r\n            this.buffer = args[0] as ArrayBufferLike;\r\n\r\n            const offset = args[1] as number;\r\n            this.byteOffset = offset ? offset : 0;\r\n\r\n            const length = args[2] as number;\r\n            this.length = length ? length : this.buffer.byteLength / this.BYTES_PER_ELEMENT;\r\n            this.byteLength = this.length * this.BYTES_PER_ELEMENT;\r\n        }\r\n\r\n        this.view = new DataView(this.buffer, this.byteOffset, this.byteLength);\r\n\r\n        // add a Proxy so [] can be used to access the array.\r\n        // this isn't ideal as the index is converted from number to string when calling the proxy and back again\r\n        // to do the lookup. not sure if there's a better way though\r\n        return new Proxy(this, {\r\n            get: function (target, key): OrtBigInt {\r\n                if (key in target) {\r\n                    return target[key];\r\n                }\r\n\r\n                if (typeof key == 'string')\r\n                    return target.get(Number(key));\r\n                else\r\n                    throw new Error(\"Expected number for index.\");\r\n            },\r\n            set: function (target, key, value) {\r\n                if (key in target) {\r\n                    return target[key] = value;\r\n                }\r\n\r\n                if (typeof key == 'string')\r\n                    return target.set(Number(key), value);\r\n                else\r\n                    throw new Error(\"Expected number for index.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    set(index: number, value: OrtBigInt) {\r\n        if (index >= this.length) {\r\n            throw new Error(`Invalid index ${index} for length ${this.length}`);\r\n        }\r\n\r\n        JSBI.DataViewSetBigInt64(this.view, index * this.BYTES_PER_ELEMENT, value, OrtBigInt64ArrayImpl.littleEndian);\r\n\r\n        return true;\r\n    }\r\n\r\n    get(index: number): OrtBigInt {\r\n        if (index >= this.length) {\r\n            throw new Error(`Invalid index ${index} for length ${this.length}`);\r\n        }\r\n\r\n        return JSBI.DataViewGetBigInt64(this.view, index * this.BYTES_PER_ELEMENT, OrtBigInt64ArrayImpl.littleEndian);\r\n    }\r\n\r\n    from(arrayLike: ArrayLike<OrtBigInt>): OrtBigInt64Array;\r\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => OrtBigInt, thisArg?: any): OrtBigInt64Array;\r\n    from<U>(arrayLike: unknown, mapfnArg?: unknown, thisArg?: any): OrtBigInt64Array {\r\n        const array = arrayLike as ArrayLike<U>\r\n        var i64Array = new OrtBigInt64Array(array.length);\r\n\r\n        var mapfn = mapfnArg ? (mapfnArg as (v: U, k: number) => OrtBigInt) : null;\r\n\r\n        for (let i = 0; i < i64Array.length; i++) {\r\n            var value = arrayLike[i];\r\n\r\n            if (mapfn) {\r\n                value = (thisArg ? thisArg.mapfn(value, 0) : mapfn(value, 0));\r\n            }\r\n            if (!(value instanceof BigInt)) {\r\n                throw new Error(`Invalid value of type ${typeof value}`);\r\n            }\r\n\r\n            i64Array[i] = value as OrtBigInt;\r\n        }\r\n\r\n        return i64Array;\r\n    }\r\n}\r\n```\r\n\r\n\r\n ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1454904035/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455141615",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1455141615",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1455141615,
        "node_id": "IC_kwDOCVq1mM5Wu7Lv",
        "user": {
            "login": "ivanrhsosa",
            "id": 81785692,
            "node_id": "MDQ6VXNlcjgxNzg1Njky",
            "avatar_url": "https://avatars.githubusercontent.com/u/81785692?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ivanrhsosa",
            "html_url": "https://github.com/ivanrhsosa",
            "followers_url": "https://api.github.com/users/ivanrhsosa/followers",
            "following_url": "https://api.github.com/users/ivanrhsosa/following{/other_user}",
            "gists_url": "https://api.github.com/users/ivanrhsosa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ivanrhsosa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ivanrhsosa/subscriptions",
            "organizations_url": "https://api.github.com/users/ivanrhsosa/orgs",
            "repos_url": "https://api.github.com/users/ivanrhsosa/repos",
            "events_url": "https://api.github.com/users/ivanrhsosa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ivanrhsosa/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-05T16:41:14Z",
        "updated_at": "2023-03-05T16:41:14Z",
        "author_association": "NONE",
        "body": "> @ivanrhsosa is BigInt available? If so we can possible lift some of the implementation logic from the JSBI DataView to read/write the correct bits to the underlying buffer, and use the 'real' BigInt instead of JSBI.BigInt in OrtBigInt64Array to simplify further.\r\n\r\n@skottmckay -->  BigInt and BigInt64Array are not available on android. I am using the polyfill below to make them available but when trying to use them they don't behave properly. \r\n\r\n`if (typeof BigInt === 'undefined') { global.BigInt = require('big-integer'); }` \r\n\r\nFor example: I added the following code to test both BigInt and BigInt64Array behaviour on iOS and android(with big-integer polyfill):\r\n\r\n`const alsoHuge = BigInt(9007199254740991)\r\n  console.log('alsoHuge: ', alsoHuge); // 9007199254740991n      \r\n\r\n  const x = new BigInt64Array([21n, 31n]);\r\n  console.log('x: ', x[1]); // 31n`\r\n  \r\n  iOS (expected behaviour) \r\n<img width=\"204\" alt=\"Screenshot 2023-03-05 at 11 16 19 AM\" src=\"https://user-images.githubusercontent.com/81785692/222972776-9b5e269d-7081-4aad-8641-57f1a778c116.png\">\r\n\r\nandroid (BigInt wrong result)\r\n<img width=\"306\" alt=\"Screenshot 2023-03-05 at 11 31 08 AM\" src=\"https://user-images.githubusercontent.com/81785692/222973260-f8d561f8-c59d-47c0-a288-b975abbadd8c.png\">\r\n\r\nandroid (error when creating BigInt64Array)\r\n<img width=\"365\" alt=\"Screenshot 2023-03-05 at 11 25 58 AM\" src=\"https://user-images.githubusercontent.com/81785692/222972915-a94123d2-4dca-41dd-bce7-fcfe1e36f7be.png\">\r\n\r\nso, the polyfill bypasses the initial error \"can't find variable: BigInt64Array\" but cannot add the type expected behaviour. \r\n  \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455141615/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455242891",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1455242891",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1455242891,
        "node_id": "IC_kwDOCVq1mM5WvT6L",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-05T23:26:25Z",
        "updated_at": "2023-03-05T23:26:25Z",
        "author_association": "MEMBER",
        "body": "@ivanrhsosa thanks for clarifying that it's not just the array types that are not available by default.\r\n\r\nTaking a step back, another option might be to enable a compatibility mode where we use int32/uint32 types at the javascript level for onnx 'int64' and 'uint64' types, and do the conversion to int64/uint64 bytes internally when talking to ORT. Not sure any models require more than 32-bits for input/output as typically those are index numbers.\r\n\r\nIf BigInt wasn't available, the user could explicitly enable this mode. We'd replace usage of bigint/BigInt64Array/BigUint64Array with number/Int32Array/Uint32Array in the Tensor type maps, and at the send/receive layer if the type was 'int64' or 'uint64' we'd add/remove bytes when serializing/deserializing. That limits new code to that de/serialization logic and means the user doesn't have to be aware of any custom types for BigInt. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455242891/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455705533",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1455705533",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1455705533,
        "node_id": "IC_kwDOCVq1mM5WxE29",
        "user": {
            "login": "fs-eire",
            "id": 7679871,
            "node_id": "MDQ6VXNlcjc2Nzk4NzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7679871?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fs-eire",
            "html_url": "https://github.com/fs-eire",
            "followers_url": "https://api.github.com/users/fs-eire/followers",
            "following_url": "https://api.github.com/users/fs-eire/following{/other_user}",
            "gists_url": "https://api.github.com/users/fs-eire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fs-eire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fs-eire/subscriptions",
            "organizations_url": "https://api.github.com/users/fs-eire/orgs",
            "repos_url": "https://api.github.com/users/fs-eire/repos",
            "events_url": "https://api.github.com/users/fs-eire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fs-eire/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-06T08:36:08Z",
        "updated_at": "2023-03-06T08:39:42Z",
        "author_association": "MEMBER",
        "body": "The following simple polyfill code implements `BigInt64Array.from(arr)` and `BigInt64Array.prototype.at(index)`, which are the basic ways to construct input and get data from output, using `JSBI`:\r\n\r\n```js\r\n'use strict';\r\n\r\nconst JSBI = require('jsbi').default;\r\n\r\nconst __global__ = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : global;\r\n\r\nif (typeof __global__.BigInt64Array === 'undefined') {\r\n    const BYTES_PER_ELEMENT = 8;\r\n    const _polyfill_int64array = __global__.BigInt64Array = function (arg0, arg1, arg2) {\r\n        if (!new.target) {\r\n            throw new TypeError('Constructor BigInt64Array requires \\'new\\'');\r\n        }\r\n\r\n        this.byteOffset = 0;\r\n        this.byteLength = 0;\r\n        this.length = 0;\r\n\r\n        if (typeof arg0 === 'undefined') {\r\n            this.buffer = new ArrayBuffer(0);\r\n        } else if (Number.isSafeInteger(arg0)) {\r\n            this.length = arg0;\r\n            this.byteLength = this.length * BYTES_PER_ELEMENT;\r\n            this.buffer = new ArrayBuffer(byteLength);\r\n        } else if (arg0 instanceof ArrayBuffer || (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\r\n            this.buffer = arg0;\r\n            if (typeof arg1 === 'number') {\r\n                this.byteOffset = arg1;\r\n\r\n                if (typeof arg2 === 'number') {\r\n                    this.length = arg2;\r\n                    this.byteLength = this.length * BYTES_PER_ELEMENT;\r\n                } else {\r\n                    this.byteLength = this.buffer.byteLength - this.byteOffset;\r\n                    this.length = this.byteLength / BYTES_PER_ELEMENT;\r\n                }\r\n            } else {\r\n                this.byteLength = this.buffer.byteLength;\r\n                this.length = this.byteLength / BYTES_PER_ELEMENT;\r\n            }\r\n        }\r\n    }\r\n\r\n    Object.defineProperty(_polyfill_int64array, \"BYTES_PER_ELEMENT\", {value: BYTES_PER_ELEMENT});\r\n\r\n    _polyfill_int64array.from = function(arr) {\r\n        if (!Array.isArray(arr)) {\r\n            throw new TypeError('\\'BigInt64Array.from()\\' only accept a number array as parameter.')\r\n        }\r\n\r\n        const buffer = new ArrayBuffer(arr.length * BYTES_PER_ELEMENT);\r\n        const dv = new DataView(buffer);\r\n        for (let i = 0 ; i < arr.length; i++) {\r\n            JSBI.DataViewSetBigInt64(dv, i * BYTES_PER_ELEMENT, JSBI.BigInt(arr[i]), true);\r\n        }\r\n        return new _polyfill_int64array(buffer);\r\n    }\r\n\r\n    _polyfill_int64array.prototype.at = function(idx) {\r\n        if (idx < this.length) {\r\n            idx += this.length;\r\n        }\r\n\r\n        if (idx < 0 || idx >= this.length) {\r\n            throw RangeError('index out of range');\r\n        }\r\n\r\n        return JSBI.DataViewGetBigInt64(new DataView(this.buffer, this.byteOffset, this.byteLength), idx * BYTES_PER_ELEMENT, true);\r\n    }\r\n}\r\n```\r\n\r\nIt should work with onnxruntime-common with this PR: #14921",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455705533/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455722351",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1455722351",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1455722351,
        "node_id": "IC_kwDOCVq1mM5WxI9v",
        "user": {
            "login": "fs-eire",
            "id": 7679871,
            "node_id": "MDQ6VXNlcjc2Nzk4NzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7679871?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fs-eire",
            "html_url": "https://github.com/fs-eire",
            "followers_url": "https://api.github.com/users/fs-eire/followers",
            "following_url": "https://api.github.com/users/fs-eire/following{/other_user}",
            "gists_url": "https://api.github.com/users/fs-eire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fs-eire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fs-eire/subscriptions",
            "organizations_url": "https://api.github.com/users/fs-eire/orgs",
            "repos_url": "https://api.github.com/users/fs-eire/repos",
            "events_url": "https://api.github.com/users/fs-eire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fs-eire/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-06T08:50:35Z",
        "updated_at": "2023-03-06T08:50:35Z",
        "author_association": "MEMBER",
        "body": "> Working version of the basic BigInt64Array with `from` below. I _think_ that's all the ORT javascript layer requires. FWIW The error I was seeing was due to weirdness in how Buffer.from works. It decodes the base64 string to the end of the underlying ArrayBuffer so passing in the offset from Buffer is required. I'm sure there's a good reason but it's really not intuitive behaviour.\r\n> \r\n> Assuming this is a reasonable approach what is the best way to enable this? A shim (OrtBigInt/OrtBigInt64Array) seems slightly more user friendly/consistent given BigInt isn't polyfillable (as per https://www.npmjs.com/package/jsbi) but would be a breaking change to switch to that and I assume this problem goes away over the next few years at which point the shim is unnecessary overhead.\r\n> \r\n> Alternatively can we use it as a fallback if BigInt/BigInt64Array isn't available? User code would need to be aware of the two sets of types though and the limitations of this version but maybe that's ok as it's maybe a cut-and-paste of some helpers to abstract away whether the FSBI based version is being used.\r\n> \r\n> I think we would be able to use this type in NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP as a drop in replacement for BigInt64Array but those are currently internal types.\r\n> \r\n> Not sure how to update the TensorConstructor interface though. Maybe that can be done at a higher level.\r\n> \r\n> @fs-eire thoughts?\r\n> \r\n> ```ts\r\n> const JSBI = require('jsbi');\r\n> type OrtBigInt = typeof JSBI.BigInt;\r\n> \r\n> // https://github.com/microsoft/TypeScript/blob/b19cfc03f2cdd3b21bdec2ea1367732ef2bce937/src/lib/es2020.bigint.d.ts#L131\r\n> export interface OrtBigInt64Array {\r\n>     /** The size in bytes of each element in the array. */\r\n>     readonly BYTES_PER_ELEMENT: number;\r\n> \r\n>     /** The ArrayBuffer instance referenced by the array. */\r\n>     readonly buffer: ArrayBufferLike;\r\n> \r\n>     /** The length in bytes of the array. */\r\n>     readonly byteLength: number;\r\n> \r\n>     /** The offset in bytes of the array. */\r\n>     readonly byteOffset: number;\r\n> \r\n>     /** The length of the array. */\r\n>     readonly length: number;\r\n> \r\n>     // TODO: Do we need any other methods like `fill`? \r\n> \r\n>     /** Converts the array to a string by using the current locale. */\r\n>     toLocaleString(): string;\r\n> \r\n>     /** Returns a string representation of the array. */\r\n>     toString(): string;\r\n> \r\n>     readonly [Symbol.toStringTag]: \"OrtBigInt64Array\";\r\n> \r\n>     [index: number]: OrtBigInt;\r\n> }\r\n> \r\n> // https://github.com/microsoft/TypeScript/blob/b19cfc03f2cdd3b21bdec2ea1367732ef2bce937/src/lib/es2020.bigint.d.ts#L372\r\n> export interface OrtBigInt64ArrayConstructor {\r\n>     readonly prototype: OrtBigInt64Array;\r\n>     new(length?: number): OrtBigInt64Array;\r\n>     // new(array: Iterable<BigInt>): OrtBigInt64Array; Not sure if we need this or how to determine the buffer size required upfront\r\n>     new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): OrtBigInt64Array;\r\n> \r\n>     /** The size in bytes of each element in the array. */\r\n>     readonly BYTES_PER_ELEMENT: number;\r\n> \r\n>     /**\r\n>         * Creates an array from an array-like or iterable object.\r\n>         * @param arrayLike An array-like or iterable object to convert to an array.\r\n>         * @param mapfn A mapping function to call on every element of the array.\r\n>         * @param thisArg Value of 'this' used to invoke the mapfn.\r\n>         */\r\n>     from(arrayLike: ArrayLike<OrtBigInt>): OrtBigInt64Array;\r\n>     from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => OrtBigInt, thisArg?: any): OrtBigInt64Array;\r\n> }\r\n> \r\n> // https://github.com/microsoft/TypeScript/blob/b19cfc03f2cdd3b21bdec2ea1367732ef2bce937/src/lib/es2020.bigint.d.ts#L397\r\n> declare var OrtBigInt64Array: OrtBigInt64ArrayConstructor;\r\n> \r\n> export class OrtBigInt64ArrayImpl implements OrtBigInt64Array {\r\n>     buffer: ArrayBuffer;\r\n>     byteLength: number;\r\n>     byteOffset: number;\r\n>     length: number;\r\n>     readonly BYTES_PER_ELEMENT = 8;\r\n>     private view: DataView;\r\n> \r\n>     // readonly prototype: OrtBigInt64Array;\r\n>     readonly [Symbol.toStringTag]: \"OrtBigInt64Array\";\r\n>     static readonly littleEndian: boolean = true; // TODO: Determine correct value.\r\n> \r\n>     [n: number]: OrtBigInt;\r\n>     toString(): string { return \"Not implemented\"; }\r\n>     toLocaleString(): string { return \"Not implemented\"; }\r\n> \r\n>     public constructor(length?: number);\r\n>     // constructor(array: Iterable<BigInt>): OrtBigInt64Array;\r\n>     public constructor(buffer: ArrayBuffer, byteOffset?: number, length?: number);\r\n>     public constructor(...args: any[]) {\r\n>         if (args.length == 0) {\r\n>             throw new Error(\"Creating an empty array is not supported. \" +\r\n>                 \"Please create an array of a fixed size and set elements individually.\")\r\n>         }\r\n> \r\n>         if (args.length == 1 && typeof args[0] == 'number') {\r\n>             this.length = args[0];\r\n>             this.byteLength = this.length * this.BYTES_PER_ELEMENT;\r\n>             this.buffer = new ArrayBuffer(this.byteLength);\r\n>             this.byteOffset = 0;\r\n>         }\r\n>         else {\r\n>             this.buffer = args[0] as ArrayBufferLike;\r\n> \r\n>             const offset = args[1] as number;\r\n>             this.byteOffset = offset ? offset : 0;\r\n> \r\n>             const length = args[2] as number;\r\n>             this.length = length ? length : this.buffer.byteLength / this.BYTES_PER_ELEMENT;\r\n>             this.byteLength = this.length * this.BYTES_PER_ELEMENT;\r\n>         }\r\n> \r\n>         this.view = new DataView(this.buffer, this.byteOffset, this.byteLength);\r\n> \r\n>         // add a Proxy so [] can be used to access the array.\r\n>         // this isn't ideal as the index is converted from number to string when calling the proxy and back again\r\n>         // to do the lookup. not sure if there's a better way though\r\n>         return new Proxy(this, {\r\n>             get: function (target, key): OrtBigInt {\r\n>                 if (key in target) {\r\n>                     return target[key];\r\n>                 }\r\n> \r\n>                 if (typeof key == 'string')\r\n>                     return target.get(Number(key));\r\n>                 else\r\n>                     throw new Error(\"Expected number for index.\");\r\n>             },\r\n>             set: function (target, key, value) {\r\n>                 if (key in target) {\r\n>                     return target[key] = value;\r\n>                 }\r\n> \r\n>                 if (typeof key == 'string')\r\n>                     return target.set(Number(key), value);\r\n>                 else\r\n>                     throw new Error(\"Expected number for index.\");\r\n>             }\r\n>         });\r\n>     }\r\n> \r\n>     set(index: number, value: OrtBigInt) {\r\n>         if (index >= this.length) {\r\n>             throw new Error(`Invalid index ${index} for length ${this.length}`);\r\n>         }\r\n> \r\n>         JSBI.DataViewSetBigInt64(this.view, index * this.BYTES_PER_ELEMENT, value, OrtBigInt64ArrayImpl.littleEndian);\r\n> \r\n>         return true;\r\n>     }\r\n> \r\n>     get(index: number): OrtBigInt {\r\n>         if (index >= this.length) {\r\n>             throw new Error(`Invalid index ${index} for length ${this.length}`);\r\n>         }\r\n> \r\n>         return JSBI.DataViewGetBigInt64(this.view, index * this.BYTES_PER_ELEMENT, OrtBigInt64ArrayImpl.littleEndian);\r\n>     }\r\n> \r\n>     from(arrayLike: ArrayLike<OrtBigInt>): OrtBigInt64Array;\r\n>     from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => OrtBigInt, thisArg?: any): OrtBigInt64Array;\r\n>     from<U>(arrayLike: unknown, mapfnArg?: unknown, thisArg?: any): OrtBigInt64Array {\r\n>         const array = arrayLike as ArrayLike<U>\r\n>         var i64Array = new OrtBigInt64Array(array.length);\r\n> \r\n>         var mapfn = mapfnArg ? (mapfnArg as (v: U, k: number) => OrtBigInt) : null;\r\n> \r\n>         for (let i = 0; i < i64Array.length; i++) {\r\n>             var value = arrayLike[i];\r\n> \r\n>             if (mapfn) {\r\n>                 value = (thisArg ? thisArg.mapfn(value, 0) : mapfn(value, 0));\r\n>             }\r\n>             if (!(value instanceof BigInt)) {\r\n>                 throw new Error(`Invalid value of type ${typeof value}`);\r\n>             }\r\n> \r\n>             i64Array[i] = value as OrtBigInt;\r\n>         }\r\n> \r\n>         return i64Array;\r\n>     }\r\n> }\r\n> ```\r\n\r\nThe implementation is good but I don't think to introduce a new type `OrtBigInt64Array` is a good idea. This code may have a better implementation compared to my implementation of the polyfill above, but we don't need a new type. A lot of JS libraries like core-js and all major bundlers are working perfectly with polyfill.\r\n\r\nReasons are a lot: user code and library code no need to modify; binary size is smaller; the VM may perform native optimizations on builtin types which user defined class may not benefit.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455722351/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455735903",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1455735903",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1455735903,
        "node_id": "IC_kwDOCVq1mM5WxMRf",
        "user": {
            "login": "fs-eire",
            "id": 7679871,
            "node_id": "MDQ6VXNlcjc2Nzk4NzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7679871?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fs-eire",
            "html_url": "https://github.com/fs-eire",
            "followers_url": "https://api.github.com/users/fs-eire/followers",
            "following_url": "https://api.github.com/users/fs-eire/following{/other_user}",
            "gists_url": "https://api.github.com/users/fs-eire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fs-eire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fs-eire/subscriptions",
            "organizations_url": "https://api.github.com/users/fs-eire/orgs",
            "repos_url": "https://api.github.com/users/fs-eire/repos",
            "events_url": "https://api.github.com/users/fs-eire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fs-eire/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-06T09:00:34Z",
        "updated_at": "2023-03-06T09:02:23Z",
        "author_association": "MEMBER",
        "body": "the reason why BigInt is not polyfill-able is because it introduces new language syntax (eg. `let a = 100n;`), which need JS engine support. However, think about the following code:\r\n\r\n```js\r\nconst arrA = [1,2,3];\r\nconst bigintArr = BigInt64Array.from(arrA);\r\n\r\nfor (const val of bigintArr) {\r\n   console.log(val.toString());\r\n}\r\n```\r\n\r\nBy polyfill `BigInt64Array`, it is totally possible. \r\n\r\nMost int64/uint64 tensors when used in ONNX models as input/output are used as index, tensor shape or axis. **For those usage, there is no requirement to calculate bigint directly.** They usually range inside range from 0 to 2^32 so it's safe to use `number` to represent their values at most places in JavaScript code. So polyfilling `BigInt64Array` is a way to resolve the requirement in a more elegant way.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455735903/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455992625",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1455992625",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1455992625,
        "node_id": "IC_kwDOCVq1mM5WyK8x",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-06T11:51:29Z",
        "updated_at": "2023-03-06T11:51:29Z",
        "author_association": "MEMBER",
        "body": "@fs-eire I have about 2 days of TypeScript experience so happy to go with whatever the recommended approach is. Was mainly trying to figure out what was possible. If we can avoid new types that's great, as long as it doesn't obfuscate additional requirements on the user. e.g. if you have to use FSBI to use the values in the array, pretending the polyfilled BigInt64Array is the same as the 'real' version is going to be confusing as it hides that requirement. \r\n\r\nWhat does usage look like? Converting a buffer to a polyfilled BigInt64Array gets an array to the user, but what is required to actually read the values given the BigInt type is also not available? JSBI.toNumber?\r\n\r\nSame question for feeds. Language models involve passing in index numbers so what would the user code look life for creating the Tensor wrapping the polyfilled BigInt64Array and populating it? \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1455992625/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1456228667",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14770#issuecomment-1456228667",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14770",
        "id": 1456228667,
        "node_id": "IC_kwDOCVq1mM5WzEk7",
        "user": {
            "login": "ivanrhsosa",
            "id": 81785692,
            "node_id": "MDQ6VXNlcjgxNzg1Njky",
            "avatar_url": "https://avatars.githubusercontent.com/u/81785692?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ivanrhsosa",
            "html_url": "https://github.com/ivanrhsosa",
            "followers_url": "https://api.github.com/users/ivanrhsosa/followers",
            "following_url": "https://api.github.com/users/ivanrhsosa/following{/other_user}",
            "gists_url": "https://api.github.com/users/ivanrhsosa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ivanrhsosa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ivanrhsosa/subscriptions",
            "organizations_url": "https://api.github.com/users/ivanrhsosa/orgs",
            "repos_url": "https://api.github.com/users/ivanrhsosa/repos",
            "events_url": "https://api.github.com/users/ivanrhsosa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ivanrhsosa/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-06T14:22:12Z",
        "updated_at": "2023-03-06T14:26:49Z",
        "author_association": "NONE",
        "body": "> \r\n\r\nThanks @fs-eire, I added the polyfill polyfill code that implements `BigInt64Array.from(arr)` and `BigInt64Array.prototype.at(index)` using `JSBI`. This polyfill solves the problem with BigInt64Array on android. Now I have the same model inference results in iOS and android:\r\n\r\niOS:\r\n![Screenshot 2023-03-06 at 9 14 52 AM](https://user-images.githubusercontent.com/81785692/223135688-bae55a30-ace1-40b3-8018-f6c3549f6092.png)\r\n\r\nandroid:\r\n<img width=\"373\" alt=\"Screenshot 2023-03-06 at 8 52 33 AM\" src=\"https://user-images.githubusercontent.com/81785692/223129965-28be5e72-c786-4ef4-a46c-b27d1aa7af18.png\">\r\n\r\nUpdated repo with the new polyfill:\r\nhttps://github.com/ivanrhsosa/sample-onnx\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1456228667/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]