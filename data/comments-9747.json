[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/969199808",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-969199808",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 969199808,
        "node_id": "IC_kwDOCVq1mM45xNDA",
        "user": {
            "login": "yuslepukhin",
            "id": 11303988,
            "node_id": "MDQ6VXNlcjExMzAzOTg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11303988?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yuslepukhin",
            "html_url": "https://github.com/yuslepukhin",
            "followers_url": "https://api.github.com/users/yuslepukhin/followers",
            "following_url": "https://api.github.com/users/yuslepukhin/following{/other_user}",
            "gists_url": "https://api.github.com/users/yuslepukhin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yuslepukhin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yuslepukhin/subscriptions",
            "organizations_url": "https://api.github.com/users/yuslepukhin/orgs",
            "repos_url": "https://api.github.com/users/yuslepukhin/repos",
            "events_url": "https://api.github.com/users/yuslepukhin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yuslepukhin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-15T18:33:28Z",
        "updated_at": "2021-11-15T18:33:28Z",
        "author_association": "MEMBER",
        "body": "CPU provider is always on the list and serves as a fallback for ops that may not be supported by the target providers.\r\nYou just need to make sure that the executable that loads ORT can find all the libraries. In this case, it is obvious that NVIDIA libraries are either not installed or not in the LD_LIBRARY_PATH. Either way, the system loader can not find it. We do not distribute NVIDIA libraries.\r\n[This page can be helpful](https://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html#:~:text=On%20Linux%20systems%2C%20this%20loader%20is%20named%20%2Flib%2Fld-linux.so.X,be%20searched%20is%20stored%20in%20the%20file%20%2Fetc%2Fld.so.conf.)",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/969199808/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/969208489",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-969208489",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 969208489,
        "node_id": "IC_kwDOCVq1mM45xPKp",
        "user": {
            "login": "hariharans29",
            "id": 9969784,
            "node_id": "MDQ6VXNlcjk5Njk3ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9969784?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hariharans29",
            "html_url": "https://github.com/hariharans29",
            "followers_url": "https://api.github.com/users/hariharans29/followers",
            "following_url": "https://api.github.com/users/hariharans29/following{/other_user}",
            "gists_url": "https://api.github.com/users/hariharans29/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hariharans29/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hariharans29/subscriptions",
            "organizations_url": "https://api.github.com/users/hariharans29/orgs",
            "repos_url": "https://api.github.com/users/hariharans29/repos",
            "events_url": "https://api.github.com/users/hariharans29/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hariharans29/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-15T18:44:56Z",
        "updated_at": "2021-11-15T18:44:56Z",
        "author_association": "MEMBER",
        "body": "Starting v1.9, ORT's Python GPU package is capable of running on non-GPU machines in addition to machines with GPUs.  Also, in Python there is an \"implicit\" registration of EPs (i.e.) the CUDA EP is registered by default in the GPU package. So, when the CUDA EP fails to load, this is a taken as the binary trying to run on a non-GPU machine and hence this behavior. Obviously, there is some ambiguity here as the user's intent is not taken into consideration. Does the user expect to be using the CUDA EP and is the CUDA EP failing to load because of missing Nvidia libs (in which case the user might expect that the session just not load successfully) or does the user expect that loading the CUDA EP is going to fail because there are no GPUs and hence the fallback to CPU is acceptable ? \r\n\r\nStarting ORT v1.10, the users are expected to [explicitly register the EPs in Python](https://github.com/microsoft/onnxruntime/pull/9712) they would like to use for their session. Perhaps now, the intent will be clear enough if we see the CUDA EP as part of the provider list to be used for the session (no implicit registration of EPs will ensure that the CUDA EP won't show up in the provider list unless the user provided it). If we see the CUDA EP as part of the provider list AND the CUDA EP fails to load, we could make the session construction error-out (just like the TensorRT and OpenVINO EPs). Does this sound like a good plan ?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/969208489/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/970062757",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-970062757",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 970062757,
        "node_id": "IC_kwDOCVq1mM450ful",
        "user": {
            "login": "schneider-mathias",
            "id": 7561726,
            "node_id": "MDQ6VXNlcjc1NjE3MjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7561726?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/schneider-mathias",
            "html_url": "https://github.com/schneider-mathias",
            "followers_url": "https://api.github.com/users/schneider-mathias/followers",
            "following_url": "https://api.github.com/users/schneider-mathias/following{/other_user}",
            "gists_url": "https://api.github.com/users/schneider-mathias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/schneider-mathias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/schneider-mathias/subscriptions",
            "organizations_url": "https://api.github.com/users/schneider-mathias/orgs",
            "repos_url": "https://api.github.com/users/schneider-mathias/repos",
            "events_url": "https://api.github.com/users/schneider-mathias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/schneider-mathias/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-16T09:03:52Z",
        "updated_at": "2021-11-16T09:03:52Z",
        "author_association": "NONE",
        "body": "@hariharans29 \"_...session construction error-out (just like the TensorRT and OpenVINO EPs)_\" - currently the behaviour results in a segfault, wouldn't it be beneficial/an option to soften this by raising an exception on Python-side? That might imply to implement a more robust lazy loading of the EP libs and forwarding an error indicator to the Python binding and I'm not sure if this might feasible.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/970062757/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/970537645",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-970537645",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 970537645,
        "node_id": "IC_kwDOCVq1mM452Tqt",
        "user": {
            "login": "hariharans29",
            "id": 9969784,
            "node_id": "MDQ6VXNlcjk5Njk3ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9969784?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hariharans29",
            "html_url": "https://github.com/hariharans29",
            "followers_url": "https://api.github.com/users/hariharans29/followers",
            "following_url": "https://api.github.com/users/hariharans29/following{/other_user}",
            "gists_url": "https://api.github.com/users/hariharans29/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hariharans29/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hariharans29/subscriptions",
            "organizations_url": "https://api.github.com/users/hariharans29/orgs",
            "repos_url": "https://api.github.com/users/hariharans29/repos",
            "events_url": "https://api.github.com/users/hariharans29/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hariharans29/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-16T18:16:08Z",
        "updated_at": "2021-11-16T18:16:22Z",
        "author_association": "MEMBER",
        "body": "> @hariharans29 \"_...session construction error-out (just like the TensorRT and OpenVINO EPs)_\" - currently the behaviour results in a segfault, wouldn't it be beneficial/an option to soften this by raising an exception on Python-side? That might imply to implement a more robust lazy loading of the EP libs and forwarding an error indicator to the Python binding and I'm not sure if this might feasible.\r\n\r\nFor the TensorRT/OpenVINO enhancement request, tagging @jywu-msft \r\n\r\nFor CUDA: @RyanUnderhill is planning to take a look when he has a chance \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/970537645/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/970539791",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-970539791",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 970539791,
        "node_id": "IC_kwDOCVq1mM452UMP",
        "user": {
            "login": "jywu-msft",
            "id": 43355415,
            "node_id": "MDQ6VXNlcjQzMzU1NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/43355415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jywu-msft",
            "html_url": "https://github.com/jywu-msft",
            "followers_url": "https://api.github.com/users/jywu-msft/followers",
            "following_url": "https://api.github.com/users/jywu-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/jywu-msft/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jywu-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jywu-msft/subscriptions",
            "organizations_url": "https://api.github.com/users/jywu-msft/orgs",
            "repos_url": "https://api.github.com/users/jywu-msft/repos",
            "events_url": "https://api.github.com/users/jywu-msft/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jywu-msft/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-16T18:18:51Z",
        "updated_at": "2021-11-16T18:18:51Z",
        "author_association": "MEMBER",
        "body": "other customers are already building TensorRT EP and OpenVINO EP together so it's not clear what issue you are encountering.\r\nwhich version of onnxruntime are you building. you do need to match onnxruntime version with the tensorrt/openvino version it supports. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/970539791/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/970581900",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-970581900",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 970581900,
        "node_id": "IC_kwDOCVq1mM452eeM",
        "user": {
            "login": "schneider-mathias",
            "id": 7561726,
            "node_id": "MDQ6VXNlcjc1NjE3MjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7561726?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/schneider-mathias",
            "html_url": "https://github.com/schneider-mathias",
            "followers_url": "https://api.github.com/users/schneider-mathias/followers",
            "following_url": "https://api.github.com/users/schneider-mathias/following{/other_user}",
            "gists_url": "https://api.github.com/users/schneider-mathias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/schneider-mathias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/schneider-mathias/subscriptions",
            "organizations_url": "https://api.github.com/users/schneider-mathias/orgs",
            "repos_url": "https://api.github.com/users/schneider-mathias/repos",
            "events_url": "https://api.github.com/users/schneider-mathias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/schneider-mathias/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-16T19:06:06Z",
        "updated_at": "2021-11-16T19:06:06Z",
        "author_association": "NONE",
        "body": "> other customers are already building TensorRT EP and OpenVINO EP together so it's not clear what issue you are encountering. which version of onnxruntime are you building. you do need to match onnxruntime version with the tensorrt/openvino version it supports.\r\n\r\nWe do the same and highly appreciate the dynamic loading of EP dependencies (introduced in 1.8.0), so that we do not have to compile different ORT flavors. What we are asking for is actually a consistent behavior when certain EP dependcies are not available. As mentioned by @paradigmn, missing CUDA currently resolves in a fallback with a warning message, whereas TensorRT and OpenVINO provider are causing segfaults that cannot be handled in the Python applications. Whereas latter (OpenVINO) is definitely a more user caused issue (often caused by forgetting to activate the OpenVINO environment), TensorRT can have the following implication: building only one ORT now for all our different edge devices (mainly NVIDIA Jetson family, Raspberry PI 4, Coral Dev Board) and deploy it via Docker, TensorRT and CUDA libs are mounted by the NVIDIA Docker runtime (which I think is now directly integrated to Docker). Accordingly, on devices that are lacking GPU, Cuda EP is valid and works (internally falling back to CPU), whereas TensorRT exits with the segfault -> inconsistency?. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/970581900/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/970771457",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-970771457",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 970771457,
        "node_id": "IC_kwDOCVq1mM453MwB",
        "user": {
            "login": "jywu-msft",
            "id": 43355415,
            "node_id": "MDQ6VXNlcjQzMzU1NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/43355415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jywu-msft",
            "html_url": "https://github.com/jywu-msft",
            "followers_url": "https://api.github.com/users/jywu-msft/followers",
            "following_url": "https://api.github.com/users/jywu-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/jywu-msft/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jywu-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jywu-msft/subscriptions",
            "organizations_url": "https://api.github.com/users/jywu-msft/orgs",
            "repos_url": "https://api.github.com/users/jywu-msft/repos",
            "events_url": "https://api.github.com/users/jywu-msft/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jywu-msft/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-16T22:56:00Z",
        "updated_at": "2021-11-16T22:56:00Z",
        "author_association": "MEMBER",
        "body": "thanks for the valuable feedback. agreed that we shouldn't have segfaults at all in the runtime and we should look into fixing that. +@chilo-ms to look into that for TensorRT.\r\n\r\nbtw, on the topic of fallback behavior, would fallback behavior for incorrect OpenVINO environment be desirable? How does one distinguish between an inactivated openvino environment vs deployment target that doesn't support OpenVINO devices?\r\ni.e. if we fallback to cpu, the inference would silently succeed vs the desired result of running inference on an Intel VPU?\r\nsince we are enforcing explicit provider registrations starting ORT 1.10, if the user specifies they want to use a particular EP, should we treat it as failure/invalid param if it doesn't work?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/970771457/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/972677639",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-972677639",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 972677639,
        "node_id": "IC_kwDOCVq1mM45-eIH",
        "user": {
            "login": "paradigmn",
            "id": 18099075,
            "node_id": "MDQ6VXNlcjE4MDk5MDc1",
            "avatar_url": "https://avatars.githubusercontent.com/u/18099075?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/paradigmn",
            "html_url": "https://github.com/paradigmn",
            "followers_url": "https://api.github.com/users/paradigmn/followers",
            "following_url": "https://api.github.com/users/paradigmn/following{/other_user}",
            "gists_url": "https://api.github.com/users/paradigmn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/paradigmn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/paradigmn/subscriptions",
            "organizations_url": "https://api.github.com/users/paradigmn/orgs",
            "repos_url": "https://api.github.com/users/paradigmn/repos",
            "events_url": "https://api.github.com/users/paradigmn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/paradigmn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-18T09:17:18Z",
        "updated_at": "2021-11-18T09:17:18Z",
        "author_association": "CONTRIBUTOR",
        "body": "We tested the behavior for different configurations on a Raspberry Pi 4 with an additional Intel Movidius VPU stick. Depending on the situation, four different outcomes are possible (success, fallback, exception and segfault). The matter of a fallback could be deemed acceptable since `sess.get_providers()` can be used to evaluated if the desired provider was loaded successfully or not. As already stated the segfault behavior should be avoided. It is a bit peculiar that both exceptions and fallbacks can occur in case of a provider error. This should probably be unified (either one or the other).\r\n\r\n| Provider List           | Scenario                            | Behavior         | Note                 |\r\n|-------------------------|-------------------------------------|------------------|----------------------|\r\n| CUDA, OpenVINO, CPU     | VPU plugged in, ENV initialized     | Fallback         | CUDA lib warning     |\r\n| TensorRT, OpenVINO, CPU | VPU plugged in, ENV initialized     | Segfault         | TensorRT lib missing |\r\n| OpenVINO, CPU           | VPU not plugged in, ENV initialized | Python Exception | NC_ERROR             |\r\n| OpenVINO, CPU           | VPU plugged in, ENV not initialized | Segfault         | OpenVINO lib missing |",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/972677639/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/973636128",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-973636128",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 973636128,
        "node_id": "IC_kwDOCVq1mM46CIIg",
        "user": {
            "login": "jywu-msft",
            "id": 43355415,
            "node_id": "MDQ6VXNlcjQzMzU1NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/43355415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jywu-msft",
            "html_url": "https://github.com/jywu-msft",
            "followers_url": "https://api.github.com/users/jywu-msft/followers",
            "following_url": "https://api.github.com/users/jywu-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/jywu-msft/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jywu-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jywu-msft/subscriptions",
            "organizations_url": "https://api.github.com/users/jywu-msft/orgs",
            "repos_url": "https://api.github.com/users/jywu-msft/repos",
            "events_url": "https://api.github.com/users/jywu-msft/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jywu-msft/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-19T01:09:07Z",
        "updated_at": "2021-11-19T01:09:19Z",
        "author_association": "MEMBER",
        "body": "thanks. @chilo-ms has been investigating and identified the source of the segfault behavior. we will update it to be consistent with the CUDA EP behavior.  ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/973636128/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981862777",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-981862777",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 981862777,
        "node_id": "IC_kwDOCVq1mM46hgl5",
        "user": {
            "login": "askhade",
            "id": 6475296,
            "node_id": "MDQ6VXNlcjY0NzUyOTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6475296?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/askhade",
            "html_url": "https://github.com/askhade",
            "followers_url": "https://api.github.com/users/askhade/followers",
            "following_url": "https://api.github.com/users/askhade/following{/other_user}",
            "gists_url": "https://api.github.com/users/askhade/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/askhade/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/askhade/subscriptions",
            "organizations_url": "https://api.github.com/users/askhade/orgs",
            "repos_url": "https://api.github.com/users/askhade/repos",
            "events_url": "https://api.github.com/users/askhade/events{/privacy}",
            "received_events_url": "https://api.github.com/users/askhade/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T17:40:14Z",
        "updated_at": "2021-11-29T17:40:14Z",
        "author_association": "MEMBER",
        "body": "Closing this issue now since the PR has been merged. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981862777/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981876160",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-981876160",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 981876160,
        "node_id": "IC_kwDOCVq1mM46hj3A",
        "user": {
            "login": "hariharans29",
            "id": 9969784,
            "node_id": "MDQ6VXNlcjk5Njk3ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9969784?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hariharans29",
            "html_url": "https://github.com/hariharans29",
            "followers_url": "https://api.github.com/users/hariharans29/followers",
            "following_url": "https://api.github.com/users/hariharans29/following{/other_user}",
            "gists_url": "https://api.github.com/users/hariharans29/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hariharans29/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hariharans29/subscriptions",
            "organizations_url": "https://api.github.com/users/hariharans29/orgs",
            "repos_url": "https://api.github.com/users/hariharans29/repos",
            "events_url": "https://api.github.com/users/hariharans29/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hariharans29/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T17:57:49Z",
        "updated_at": "2021-11-29T17:57:49Z",
        "author_association": "MEMBER",
        "body": "I think the issue with the CUDA EP still exists (and that is why the issue was left open). IIRC @RyanUnderhill planned to add some logic in python to error out if the CUDA EP wasn't loaded and the user added it to the provider list.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981876160/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981880236",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-981880236",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 981880236,
        "node_id": "IC_kwDOCVq1mM46hk2s",
        "user": {
            "login": "jywu-msft",
            "id": 43355415,
            "node_id": "MDQ6VXNlcjQzMzU1NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/43355415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jywu-msft",
            "html_url": "https://github.com/jywu-msft",
            "followers_url": "https://api.github.com/users/jywu-msft/followers",
            "following_url": "https://api.github.com/users/jywu-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/jywu-msft/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jywu-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jywu-msft/subscriptions",
            "organizations_url": "https://api.github.com/users/jywu-msft/orgs",
            "repos_url": "https://api.github.com/users/jywu-msft/repos",
            "events_url": "https://api.github.com/users/jywu-msft/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jywu-msft/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T18:02:58Z",
        "updated_at": "2021-11-29T18:02:58Z",
        "author_association": "MEMBER",
        "body": "> I think the issue with the CUDA EP still exists (and that is why the issue was left open). IIRC @RyanUnderhill planned to add some logic in python to error out if the CUDA EP wasn't loaded and the user added it to the provider list.\r\n\r\nthe issue was addressed with recent PR's.  \r\nhttps://github.com/microsoft/onnxruntime/pull/9814  addresses the segfaults reported and adds warning messages\r\nhttps://github.com/microsoft/onnxruntime/pull/9872  adds additional warning messages to cover all paths.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981880236/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981885236",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-981885236",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 981885236,
        "node_id": "IC_kwDOCVq1mM46hmE0",
        "user": {
            "login": "hariharans29",
            "id": 9969784,
            "node_id": "MDQ6VXNlcjk5Njk3ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9969784?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hariharans29",
            "html_url": "https://github.com/hariharans29",
            "followers_url": "https://api.github.com/users/hariharans29/followers",
            "following_url": "https://api.github.com/users/hariharans29/following{/other_user}",
            "gists_url": "https://api.github.com/users/hariharans29/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hariharans29/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hariharans29/subscriptions",
            "organizations_url": "https://api.github.com/users/hariharans29/orgs",
            "repos_url": "https://api.github.com/users/hariharans29/repos",
            "events_url": "https://api.github.com/users/hariharans29/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hariharans29/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T18:08:44Z",
        "updated_at": "2021-11-29T18:08:44Z",
        "author_association": "MEMBER",
        "body": "> > I think the issue with the CUDA EP still exists (and that is why the issue was left open). IIRC @RyanUnderhill planned to add some logic in python to error out if the CUDA EP wasn't loaded and the user added it to the provider list.\r\n> \r\n> the issue was addressed with recent PR's. #9814 addresses the segfaults reported and adds warning messages #9872 adds additional warning messages to cover all paths.\r\n\r\nThanks , I had seen these PRs. I was still wondering if erroring out (as opposed to emitting a warning and then falling back to CPU) might have been an option considering that the user now needs to explicitly provide the EP of interest in the provider list (making the intent much clearer from from previous releases). But we can address this is the future (if need be).  ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981885236/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981897206",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-981897206",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 981897206,
        "node_id": "IC_kwDOCVq1mM46ho_2",
        "user": {
            "login": "jywu-msft",
            "id": 43355415,
            "node_id": "MDQ6VXNlcjQzMzU1NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/43355415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jywu-msft",
            "html_url": "https://github.com/jywu-msft",
            "followers_url": "https://api.github.com/users/jywu-msft/followers",
            "following_url": "https://api.github.com/users/jywu-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/jywu-msft/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jywu-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jywu-msft/subscriptions",
            "organizations_url": "https://api.github.com/users/jywu-msft/orgs",
            "repos_url": "https://api.github.com/users/jywu-msft/repos",
            "events_url": "https://api.github.com/users/jywu-msft/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jywu-msft/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T18:23:44Z",
        "updated_at": "2021-11-29T18:23:44Z",
        "author_association": "MEMBER",
        "body": "> > > I think the issue with the CUDA EP still exists (and that is why the issue was left open). IIRC @RyanUnderhill planned to add some logic in python to error out if the CUDA EP wasn't loaded and the user added it to the provider list.\r\n> > \r\n> > \r\n> > the issue was addressed with recent PR's. #9814 addresses the segfaults reported and adds warning messages #9872 adds additional warning messages to cover all paths.\r\n> \r\n> Thanks , I had seen these PRs. I was still wondering if erroring out (as opposed to emitting a warning and then falling back to CPU) might have been an option considering that the user now needs to explicitly provide the EP of interest in the provider list (making the intent much clearer from from previous releases). But we can address this is the future (if need be).\r\n\r\nyes, for now we made OPENVINO and TensorRT consistent with the CUDA behavior.\r\nbut what you suggest is something I had been thinking about as well.\r\ninstead of warning, we can throw exception rather than warn/fall back. but we also want to make it consistent across all language bindings. do you know what happens for other bindings currently?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981897206/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981950325",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-981950325",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 981950325,
        "node_id": "IC_kwDOCVq1mM46h191",
        "user": {
            "login": "hariharans29",
            "id": 9969784,
            "node_id": "MDQ6VXNlcjk5Njk3ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9969784?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hariharans29",
            "html_url": "https://github.com/hariharans29",
            "followers_url": "https://api.github.com/users/hariharans29/followers",
            "following_url": "https://api.github.com/users/hariharans29/following{/other_user}",
            "gists_url": "https://api.github.com/users/hariharans29/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hariharans29/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hariharans29/subscriptions",
            "organizations_url": "https://api.github.com/users/hariharans29/orgs",
            "repos_url": "https://api.github.com/users/hariharans29/repos",
            "events_url": "https://api.github.com/users/hariharans29/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hariharans29/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T19:33:44Z",
        "updated_at": "2021-11-29T19:33:44Z",
        "author_association": "MEMBER",
        "body": "> > > > I think the issue with the CUDA EP still exists (and that is why the issue was left open). IIRC @RyanUnderhill planned to add some logic in python to error out if the CUDA EP wasn't loaded and the user added it to the provider list.\r\n> > > \r\n> > > \r\n> > > the issue was addressed with recent PR's. #9814 addresses the segfaults reported and adds warning messages #9872 adds additional warning messages to cover all paths.\r\n> > \r\n> > \r\n> > Thanks , I had seen these PRs. I was still wondering if erroring out (as opposed to emitting a warning and then falling back to CPU) might have been an option considering that the user now needs to explicitly provide the EP of interest in the provider list (making the intent much clearer from from previous releases). But we can address this is the future (if need be).\r\n> \r\n> yes, for now we made OPENVINO and TensorRT consistent with the CUDA behavior. but what you suggest is something I had been thinking about as well. instead of warning, we can throw exception rather than warn/fall back. but we also want to make it consistent across all language bindings. do you know what happens for other bindings currently?\r\n\r\nThat is a good point about keeping it consistent across language bindings. Atleast for the C API, it does look like we throw if we aren't able to load the CUDA EP - https://github.com/microsoft/onnxruntime/blob/6284cbe833bc47eb90ed4082ff2ae015b8e5c004/onnxruntime/core/session/provider_bridge_ort.cc#L1303",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/981950325/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/983014701",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/9747#issuecomment-983014701",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/9747",
        "id": 983014701,
        "node_id": "IC_kwDOCVq1mM46l50t",
        "user": {
            "login": "jywu-msft",
            "id": 43355415,
            "node_id": "MDQ6VXNlcjQzMzU1NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/43355415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jywu-msft",
            "html_url": "https://github.com/jywu-msft",
            "followers_url": "https://api.github.com/users/jywu-msft/followers",
            "following_url": "https://api.github.com/users/jywu-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/jywu-msft/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jywu-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jywu-msft/subscriptions",
            "organizations_url": "https://api.github.com/users/jywu-msft/orgs",
            "repos_url": "https://api.github.com/users/jywu-msft/repos",
            "events_url": "https://api.github.com/users/jywu-msft/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jywu-msft/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-30T20:58:34Z",
        "updated_at": "2021-11-30T20:58:34Z",
        "author_association": "MEMBER",
        "body": "> > > > > I think the issue with the CUDA EP still exists (and that is why the issue was left open). IIRC @RyanUnderhill planned to add some logic in python to error out if the CUDA EP wasn't loaded and the user added it to the provider list.\r\n> > > > \r\n> > > > \r\n> > > > the issue was addressed with recent PR's. #9814 addresses the segfaults reported and adds warning messages #9872 adds additional warning messages to cover all paths.\r\n> > > \r\n> > > \r\n> > > Thanks , I had seen these PRs. I was still wondering if erroring out (as opposed to emitting a warning and then falling back to CPU) might have been an option considering that the user now needs to explicitly provide the EP of interest in the provider list (making the intent much clearer from from previous releases). But we can address this is the future (if need be).\r\n> > \r\n> > \r\n> > yes, for now we made OPENVINO and TensorRT consistent with the CUDA behavior. but what you suggest is something I had been thinking about as well. instead of warning, we can throw exception rather than warn/fall back. but we also want to make it consistent across all language bindings. do you know what happens for other bindings currently?\r\n> \r\n> That is a good point about keeping it consistent across language bindings. Atleast for the C API, it does look like we throw if we aren't able to load the CUDA EP -\r\n> \r\n> https://github.com/microsoft/onnxruntime/blob/6284cbe833bc47eb90ed4082ff2ae015b8e5c004/onnxruntime/core/session/provider_bridge_ort.cc#L1303\r\n\r\nthanks. will make a note to check other language bindings and behavior for TensorRT and OpenVINO EP's as well.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/983014701/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]