[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1473311414",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/15079#issuecomment-1473311414",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/15079",
        "id": 1473311414,
        "node_id": "IC_kwDOCVq1mM5X0PK2",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-17T07:49:30Z",
        "updated_at": "2023-03-17T07:49:30Z",
        "author_association": "MEMBER",
        "body": "Do you have a production use case that cannot be satisfied by the existing types and requires the API to be expanded?\r\n\r\nThere are many places where we implement a subset of the spec due to things being rarely or never used. The implementation/testing/maintenance/binary size cost of doing so is not worth it, at least not until we no longer have to pay developers to do their jobs. \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1473311414/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1486792035",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/15079#issuecomment-1486792035",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/15079",
        "id": 1486792035,
        "node_id": "IC_kwDOCVq1mM5YnqVj",
        "user": {
            "login": "cbourjau",
            "id": 3288058,
            "node_id": "MDQ6VXNlcjMyODgwNTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3288058?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cbourjau",
            "html_url": "https://github.com/cbourjau",
            "followers_url": "https://api.github.com/users/cbourjau/followers",
            "following_url": "https://api.github.com/users/cbourjau/following{/other_user}",
            "gists_url": "https://api.github.com/users/cbourjau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cbourjau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cbourjau/subscriptions",
            "organizations_url": "https://api.github.com/users/cbourjau/orgs",
            "repos_url": "https://api.github.com/users/cbourjau/repos",
            "events_url": "https://api.github.com/users/cbourjau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cbourjau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-28T12:24:41Z",
        "updated_at": "2023-03-28T12:24:41Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for your reply!\r\n\r\nPlease let me explain my motivation for creating this issue. I have experienced the opposite cost calculation in the past with onnxruntime: While developing a model or custom operator I found some functionality (surprisingly) missing. Having to open a PR against onnxruntime and waiting for the next release in those cases tanks productivity and makes the development process around the onnxruntime unpredictable. This PR aims to smothen the development process in the future by providing a more complete API.\r\n\r\nThat said, adding APIs which are not usable due to some other blockers would not make sense and on closer inspection that may apply to some of the above apis. Below are a few comments/use cases about the different functions:\r\n\r\n- `KernelInfoGetAttribute_graph` and `KernelInfoGetAttributeArray_graph`\r\nA use case would be a specialized control flow operator. That said, I'm afraid there is not much one can do with a `Graph` through the C-API at this point. \r\n- `KernelInfoGetAttribute_sparse_tensor`\r\nSparse tensors are already (partially?) supported in the current C-API (e.g. [GetSparseTensorValues](https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/onnxruntime_c_api.h#L3118)). Sparse tensors have many use cases which equally apply to custom operators. \r\n- `KernelInfoGetAttribute_type_proto` and `KernelInfoGetAttributeArray_type_proto`\r\nSame issue as with graphs. There is currently no way to do anything meaningful with a `TypeProto` object given the current C-API.\r\n- `KernelInfoGetAttributeArray_string`\r\nPossible use case: A custom `LabelEncoder` which works on more output types.\r\n- `KernelInfoGetAttributeArray_tensor` and `KernelInfoGetAttributeArray_sparse_tensors`\r\nPossible use case: A custom operator similar to `LabelEncoder` which allows mapping to tensor values. This can be useful if a downstream operator requires different weights based on a user-provided \"label\". \r\n- `KernelInfoGetAttribute_undefined`\r\nI must admit that the use-case of an `undefined` attribute is a bit unclear to me. \r\n\r\nAll in all, I think there reasonable utility in adding `KernelInfoGetAttribute_sparse_tensor`, `KernelInfoGetAttributeArray_string`, `KernelInfoGetAttributeArray_tensor`, `KernelInfoGetAttributeArray_sparse_tensors`. Does that sound reasonable, @skottmckay ?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1486792035/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]