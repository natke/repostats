[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1383333673",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14185#issuecomment-1383333673",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14185",
        "id": 1383333673,
        "node_id": "IC_kwDOCVq1mM5Sc_8p",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-16T01:30:05Z",
        "updated_at": "2023-01-16T01:30:05Z",
        "author_association": "MEMBER",
        "body": "Did you call `eval()` on the pytorch model to set it to inferencing mode before exporting? \r\n\r\nhttps://pytorch.org/tutorials/beginner/saving_loading_models.html?highlight=eval\r\n> Remember that you must call model.eval() to set dropout and batch normalization layers to evaluation mode before running inference.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1383333673/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1383450794",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14185#issuecomment-1383450794",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14185",
        "id": 1383450794,
        "node_id": "IC_kwDOCVq1mM5Sdciq",
        "user": {
            "login": "ArtyZe",
            "id": 32027268,
            "node_id": "MDQ6VXNlcjMyMDI3MjY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32027268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ArtyZe",
            "html_url": "https://github.com/ArtyZe",
            "followers_url": "https://api.github.com/users/ArtyZe/followers",
            "following_url": "https://api.github.com/users/ArtyZe/following{/other_user}",
            "gists_url": "https://api.github.com/users/ArtyZe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ArtyZe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ArtyZe/subscriptions",
            "organizations_url": "https://api.github.com/users/ArtyZe/orgs",
            "repos_url": "https://api.github.com/users/ArtyZe/repos",
            "events_url": "https://api.github.com/users/ArtyZe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ArtyZe/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-16T04:03:18Z",
        "updated_at": "2023-01-16T06:49:35Z",
        "author_association": "NONE",
        "body": "> Did you call `eval()` on the pytorch model to set it to inferencing mode before exporting?\r\n> \r\n> https://pytorch.org/tutorials/beginner/saving_loading_models.html?highlight=eval\r\n> \r\n> > Remember that you must call model.eval() to set dropout and batch normalization layers to evaluation mode before running inference.\r\n\r\nThanks for your replyï¼ŒI set torch model to inference mode before eval_step:\r\n![3](https://user-images.githubusercontent.com/32027268/212596107-b0a60abf-1a62-43a7-978d-edd70668dbdc.png)\r\nbut got same training mode onnx model:\r\n![4](https://user-images.githubusercontent.com/32027268/212615165-818a210a-94e2-4d30-89d7-bdb98193b03f.png)\r\nIs there something I missed?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1383450794/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1384649213",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14185#issuecomment-1384649213",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14185",
        "id": 1384649213,
        "node_id": "IC_kwDOCVq1mM5SiBH9",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-16T23:01:30Z",
        "updated_at": "2023-01-16T23:01:30Z",
        "author_association": "MEMBER",
        "body": "I'm not familiar with ORTTrainer. Apparently it's [deprecated ](https://github.com/microsoft/onnxruntime/pull/13022) though.\r\n\r\n@baijumeswani is there documentation on how to a) convert to using ORTModule and b) exporting the inferencing model from that? ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1384649213/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1384725650",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14185#issuecomment-1384725650",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14185",
        "id": 1384725650,
        "node_id": "IC_kwDOCVq1mM5SiTyS",
        "user": {
            "login": "baijumeswani",
            "id": 12852605,
            "node_id": "MDQ6VXNlcjEyODUyNjA1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12852605?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/baijumeswani",
            "html_url": "https://github.com/baijumeswani",
            "followers_url": "https://api.github.com/users/baijumeswani/followers",
            "following_url": "https://api.github.com/users/baijumeswani/following{/other_user}",
            "gists_url": "https://api.github.com/users/baijumeswani/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/baijumeswani/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/baijumeswani/subscriptions",
            "organizations_url": "https://api.github.com/users/baijumeswani/orgs",
            "repos_url": "https://api.github.com/users/baijumeswani/repos",
            "events_url": "https://api.github.com/users/baijumeswani/events{/privacy}",
            "received_events_url": "https://api.github.com/users/baijumeswani/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-17T01:27:49Z",
        "updated_at": "2023-01-17T01:27:49Z",
        "author_association": "MEMBER",
        "body": "@skottmckay thanks for tagging me.\r\n\r\n@ArtyZe I would recommend trying out [`ORTModule`](https://github.com/microsoft/onnxruntime/blob/3a9f30df468812d604b53ca1e0a01fa5d9fd103e/orttraining/orttraining/python/training/ortmodule/ortmodule.py#L26). It should be very simple and straightforward to use.\r\n\r\nHere is a simple example on how you can use it:\r\n\r\n```py\r\n\r\n# User defined original pytorch module\r\nclass MyModule(torch.nn.Module):\r\n    ...\r\n\r\n# The original pytorch Module instantiated\r\npt_model = MyModule(...)\r\n\r\n# Module that uses onnxruntime execution engine.\r\n# It shares the model parameters with the original pytorch model.\r\n# So, training the ort_model is like training the pt_model, just leveraging the onnxruntime acceleration.\r\nort_model = ORTModule(pt_model)\r\n\r\n# run training and eval as you would with the pt_model (using the same api)\r\n...\r\n\r\n# after training the model, the original pt_model will have the updated weights\r\n# you can simply use torch.onnx.export to export the trained model for inference with onnxruntime.\r\n# use the pt_model here for export since we want to export the original pytorch model\r\n\r\ntorch.onnx.export(pt_model, training=torch.onnx.TrainingMode.EVAL, ...)\r\n\r\n# use exported model for inferencing.\r\n```\r\n\r\nHope my above snippet is helpful. Please also checkout this example on how to use `ORTModule`: https://github.com/microsoft/onnxruntime/blob/main/orttraining/orttraining/test/python/orttraining_test_ortmodule_bert_classifier.py",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1384725650/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1385106873",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14185#issuecomment-1385106873",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14185",
        "id": 1385106873,
        "node_id": "IC_kwDOCVq1mM5Sjw25",
        "user": {
            "login": "ArtyZe",
            "id": 32027268,
            "node_id": "MDQ6VXNlcjMyMDI3MjY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32027268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ArtyZe",
            "html_url": "https://github.com/ArtyZe",
            "followers_url": "https://api.github.com/users/ArtyZe/followers",
            "following_url": "https://api.github.com/users/ArtyZe/following{/other_user}",
            "gists_url": "https://api.github.com/users/ArtyZe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ArtyZe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ArtyZe/subscriptions",
            "organizations_url": "https://api.github.com/users/ArtyZe/orgs",
            "repos_url": "https://api.github.com/users/ArtyZe/repos",
            "events_url": "https://api.github.com/users/ArtyZe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ArtyZe/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-17T09:41:39Z",
        "updated_at": "2023-01-17T09:41:39Z",
        "author_association": "NONE",
        "body": "> > @skottmckay thanks for tagging me.\r\n\r\n> \r\n> @ArtyZe I would recommend trying out [`ORTModule`](https://github.com/microsoft/onnxruntime/blob/3a9f30df468812d604b53ca1e0a01fa5d9fd103e/orttraining/orttraining/python/training/ortmodule/ortmodule.py#L26). It should be very simple and straightforward to use.\r\n> \r\n> Here is a simple example on how you can use it:\r\n> \r\n> ```python\r\n> # User defined original pytorch module\r\n> class MyModule(torch.nn.Module):\r\n>     ...\r\n> \r\n> # The original pytorch Module instantiated\r\n> pt_model = MyModule(...)\r\n> \r\n> # Module that uses onnxruntime execution engine.\r\n> # It shares the model parameters with the original pytorch model.\r\n> # So, training the ort_model is like training the pt_model, just leveraging the onnxruntime acceleration.\r\n> ort_model = ORTModule(pt_model)\r\n> \r\n> # run training and eval as you would with the pt_model (using the same api)\r\n> ...\r\n> \r\n> # after training the model, the original pt_model will have the updated weights\r\n> # you can simply use torch.onnx.export to export the trained model for inference with onnxruntime.\r\n> # use the pt_model here for export since we want to export the original pytorch model\r\n> \r\n> torch.onnx.export(pt_model, training=torch.onnx.TrainingMode.EVAL, ...)\r\n> \r\n> # use exported model for inferencing.\r\n> ```\r\n> \r\n> Hope my above snippet is helpful. Please also checkout this example on how to use `ORTModule`: https://github.com/microsoft/onnxruntime/blob/main/orttraining/orttraining/test/python/orttraining_test_ortmodule_bert_classifier.py\r\n\r\nGreat! Thanks for your reply @skottmckay @baijumeswani \r\nNow I can train mobilenet with ORTModule successfully. And unfortunately I got a gradient infer error for torchvision.efficientnet.efficientnet_b2\r\n\r\nerror log:\r\n\r\n```\r\n    loss.backward()\r\n  File \"/workspace/ygao/anaconda3/envs/art37/lib/python3.7/site-packages/torch/_tensor.py\", line 363, in backward\r\n    torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs)\r\n  File \"/workspace/ygao/anaconda3/envs/art37/lib/python3.7/site-packages/torch/autograd/__init__.py\", line 175, in backward\r\n    allow_unreachable=True, accumulate_grad=True)  # Calls into the C++ engine to run the backward pass\r\n  File \"/workspace/ygao/anaconda3/envs/art37/lib/python3.7/site-packages/torch/autograd/function.py\", line 253, in apply\r\n    return user_fn(self, *args)\r\n  File \"/workspace/ygao/anaconda3/envs/art37/lib/python3.7/site-packages/onnxruntime/training/ortmodule/_training_manager.py\", line 158, in backward\r\n    self._execution_agent.run_backward(backward_inputs, backward_outputs, ctx.run_info.state)\r\n  File \"/workspace/ygao/anaconda3/envs/art37/lib/python3.7/site-packages/onnxruntime/training/ortmodule/_execution_agent.py\", line 163, in run_backward\r\n    self._training_agent.run_backward(feeds, fetches, state)\r\nRuntimeError: Error in backward pass execution: Non-zero status code returned while running SigmoidGrad node. Name:'Sigmoid_751_Grad/SigmoidGrad_0' Status Message: Sigmoid_751_Grad/SigmoidGrad_0: mismatching input shapes: {1,2112,7,7} != {1,2112,1,1}\r\n```\r\n\r\n**And error node:**\r\n**gradient inference from mul error**\r\n![image](https://user-images.githubusercontent.com/32027268/212862827-c4108d12-ba04-4967-a41f-3830bd74f4a4.png)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1385106873/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1410100666",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14185#issuecomment-1410100666",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14185",
        "id": 1410100666,
        "node_id": "IC_kwDOCVq1mM5UDG26",
        "user": {
            "login": "ArtyZe",
            "id": 32027268,
            "node_id": "MDQ6VXNlcjMyMDI3MjY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32027268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ArtyZe",
            "html_url": "https://github.com/ArtyZe",
            "followers_url": "https://api.github.com/users/ArtyZe/followers",
            "following_url": "https://api.github.com/users/ArtyZe/following{/other_user}",
            "gists_url": "https://api.github.com/users/ArtyZe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ArtyZe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ArtyZe/subscriptions",
            "organizations_url": "https://api.github.com/users/ArtyZe/orgs",
            "repos_url": "https://api.github.com/users/ArtyZe/repos",
            "events_url": "https://api.github.com/users/ArtyZe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ArtyZe/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-31T10:20:07Z",
        "updated_at": "2023-01-31T10:21:31Z",
        "author_association": "NONE",
        "body": "@baijumeswani helloï¼ŒCould you please give me an example for how to train a onnx model?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1410100666/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1410800716",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14185#issuecomment-1410800716",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14185",
        "id": 1410800716,
        "node_id": "IC_kwDOCVq1mM5UFxxM",
        "user": {
            "login": "baijumeswani",
            "id": 12852605,
            "node_id": "MDQ6VXNlcjEyODUyNjA1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12852605?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/baijumeswani",
            "html_url": "https://github.com/baijumeswani",
            "followers_url": "https://api.github.com/users/baijumeswani/followers",
            "following_url": "https://api.github.com/users/baijumeswani/following{/other_user}",
            "gists_url": "https://api.github.com/users/baijumeswani/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/baijumeswani/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/baijumeswani/subscriptions",
            "organizations_url": "https://api.github.com/users/baijumeswani/orgs",
            "repos_url": "https://api.github.com/users/baijumeswani/repos",
            "events_url": "https://api.github.com/users/baijumeswani/events{/privacy}",
            "received_events_url": "https://api.github.com/users/baijumeswani/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-31T17:39:11Z",
        "updated_at": "2023-01-31T17:39:11Z",
        "author_association": "MEMBER",
        "body": "@ArtyZe do you mean an example where the starting point is an onnx model as opposed to a pytorch model?\r\nCurrently, `ORTModule` only supports scenarios where the user begins with a PyTorch model. Could you share what you're trying to accomplish? ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1410800716/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1411410394",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14185#issuecomment-1411410394",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14185",
        "id": 1411410394,
        "node_id": "IC_kwDOCVq1mM5UIGna",
        "user": {
            "login": "ArtyZe",
            "id": 32027268,
            "node_id": "MDQ6VXNlcjMyMDI3MjY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32027268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ArtyZe",
            "html_url": "https://github.com/ArtyZe",
            "followers_url": "https://api.github.com/users/ArtyZe/followers",
            "following_url": "https://api.github.com/users/ArtyZe/following{/other_user}",
            "gists_url": "https://api.github.com/users/ArtyZe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ArtyZe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ArtyZe/subscriptions",
            "organizations_url": "https://api.github.com/users/ArtyZe/orgs",
            "repos_url": "https://api.github.com/users/ArtyZe/repos",
            "events_url": "https://api.github.com/users/ArtyZe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ArtyZe/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-01T03:27:04Z",
        "updated_at": "2023-02-01T03:46:18Z",
        "author_association": "NONE",
        "body": "> @ArtyZe do you mean an example where the starting point is an onnx model as opposed to a pytorch model? Currently, `ORTModule` only supports scenarios where the user begins with a PyTorch model. Could you share what you're trying to accomplish?\r\n\r\n@baijumeswani Yes, I have an untrained .onnx model converted from maybe tf or caffeï¼Œor an untrained .onnx model converted from PyTorch (but apply some specific optimizations, like node split and node fusion), and now I need to retrain it in ort, which ORTTrainer supported before(But ORTTrainer does not support save inference onnx model :( ). ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1411410394/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1412902564",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14185#issuecomment-1412902564",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14185",
        "id": 1412902564,
        "node_id": "IC_kwDOCVq1mM5UNy6k",
        "user": {
            "login": "baijumeswani",
            "id": 12852605,
            "node_id": "MDQ6VXNlcjEyODUyNjA1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12852605?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/baijumeswani",
            "html_url": "https://github.com/baijumeswani",
            "followers_url": "https://api.github.com/users/baijumeswani/followers",
            "following_url": "https://api.github.com/users/baijumeswani/following{/other_user}",
            "gists_url": "https://api.github.com/users/baijumeswani/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/baijumeswani/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/baijumeswani/subscriptions",
            "organizations_url": "https://api.github.com/users/baijumeswani/orgs",
            "repos_url": "https://api.github.com/users/baijumeswani/repos",
            "events_url": "https://api.github.com/users/baijumeswani/events{/privacy}",
            "received_events_url": "https://api.github.com/users/baijumeswani/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-01T23:30:18Z",
        "updated_at": "2023-02-01T23:30:18Z",
        "author_association": "MEMBER",
        "body": "oh. `ORTTrainer` supports this kind of scenario. However, `ORTTrainer` has been recently deprecated since the emergence of `ORTModule` made `ORTTrainer` the less desirable trainer.\r\n\r\nUnfortunately, `ORTModule` requires the starting point to be a pytorch model. It handles all `onnx/onnxruntime` related work behind the scenes and gives the appearance of being a torch.nn.Module. It cannot work with an onnx model as a starting point.\r\n\r\nI am not sure how advanced your use case is. But we have python and C++ training apis that can work with small models (https://github.com/microsoft/onnxruntime/tree/main/orttraining/orttraining/python/training/api). This api supports an onnx model as a starting point. However, it may not be robust enough to support very large model training. You can give it a try if you like.\r\n\r\nApologies if this was not helpful enough.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1412902564/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1422353882",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/14185#issuecomment-1422353882",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/14185",
        "id": 1422353882,
        "node_id": "IC_kwDOCVq1mM5Ux2Xa",
        "user": {
            "login": "ArtyZe",
            "id": 32027268,
            "node_id": "MDQ6VXNlcjMyMDI3MjY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32027268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ArtyZe",
            "html_url": "https://github.com/ArtyZe",
            "followers_url": "https://api.github.com/users/ArtyZe/followers",
            "following_url": "https://api.github.com/users/ArtyZe/following{/other_user}",
            "gists_url": "https://api.github.com/users/ArtyZe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ArtyZe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ArtyZe/subscriptions",
            "organizations_url": "https://api.github.com/users/ArtyZe/orgs",
            "repos_url": "https://api.github.com/users/ArtyZe/repos",
            "events_url": "https://api.github.com/users/ArtyZe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ArtyZe/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-08T10:14:27Z",
        "updated_at": "2023-02-08T10:14:27Z",
        "author_association": "NONE",
        "body": "> oh. `ORTTrainer` supports this kind of scenario. However, `ORTTrainer` has been recently deprecated since the emergence of `ORTModule` made `ORTTrainer` the less desirable trainer.\r\n> \r\n> Unfortunately, `ORTModule` requires the starting point to be a pytorch model. It handles all `onnx/onnxruntime` related work behind the scenes and gives the appearance of being a torch.nn.Module. It cannot work with an onnx model as a starting point.\r\n> \r\n> I am not sure how advanced your use case is. But we have python and C++ training apis that can work with small models (https://github.com/microsoft/onnxruntime/tree/main/orttraining/orttraining/python/training/api). This api supports an onnx model as a starting point. However, it may not be robust enough to support very large model training. You can give it a try if you like.\r\n> \r\n> Apologies if this was not helpful enough\r\n\r\nThat's really a lot of incomplete modules ...., But what I suggest is if ort wants to make orttraining more popular, combine ORTTrainer's graph(support onnx and Pytorch model, ) and ORTModule's training api(use Pytorch's optimizer, loss func, train(), eval()) is the best solution. Accessibility is more important than training speed for orttraining right now ðŸ’¯ , I can't even find a working orttraining module for a not complex task",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1422353882/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]